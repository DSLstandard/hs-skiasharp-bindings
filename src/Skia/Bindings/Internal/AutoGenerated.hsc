{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveFoldable #-}
{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE DerivingVia #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE EmptyCase #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedLabels #-}
{-# LANGUAGE OverloadedRecordDot #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE PatternSynonyms #-}
{-# LANGUAGE ScopedTypeVariables #-}

module Skia.Bindings.Internal.AutoGenerated where

import Foreign
import Foreign.C
import Foreign.Storable
import Foreign.Storable.Offset

#include "c/sk_colorfilter.h"
#include "c/sk_typeface.h"
#include "c/sk_picture.h"
#include "c/sk_surface.h"
#include "c/sk_pixmap.h"
#include "c/sk_region.h"
#include "c/sk_canvas.h"
#include "c/sk_textblob.h"
#include "c/sk_maskfilter.h"
#include "c/sk_colorspace.h"
#include "c/sk_imagefilter.h"
#include "c/sk_bitmap.h"
#include "c/sksg_invalidation_controller.h"
#include "c/sk_path.h"
#include "c/sk_runtimeeffect.h"
#include "c/sk_general.h"
#include "c/sk_document.h"
#include "c/sk_image.h"
#include "c/sk_codec.h"
#include "c/sk_data.h"
#include "c/sk_paint.h"
#include "c/sk_stream.h"
#include "c/sk_blender.h"
#include "c/sk_graphics.h"
#include "c/skottie_animation.h"
#include "c/skresources_resource_provider.h"
#include "c/sk_svg.h"
#include "c/sk_string.h"
#include "c/sk_linker.h"
#include "c/sk_patheffect.h"
#include "c/sk_vertices.h"
#include "c/sk_font.h"
#include "c/sk_rrect.h"
#include "c/sk_matrix.h"
#include "c/sk_shader.h"
#include "c/sk_types.h"
#include "c/gr_context.h"
#include "c/sk_drawable.h"
#include "xamarin/sk_manageddrawable.h"
#include "xamarin/sk_managedtracememorydump.h"
#include "xamarin/sk_managedstream.h"
#include "xamarin/sk_compatpaint.h"
#include "xamarin/sk_xamarin.h"

{- | Opaque C struct: @"sk_refcnt_t"@
-}
data Sk_refcnt = Sk_refcnt

{- | Opaque C struct: @"sk_nvrefcnt_t"@
-}
data Sk_nvrefcnt = Sk_nvrefcnt

{- | Opaque C struct: @"sk_flattenable_t"@
-}
data Sk_flattenable = Sk_flattenable

{- | C type alias: @sk_color_t@

@
typedef uint32_t sk_color_t
@
-}
type Sk_color = Word32

{- | C type alias: @sk_pmcolor_t@

@
typedef uint32_t sk_pmcolor_t
@
-}
type Sk_pmcolor = Word32

{- | C struct: @"sk_color4f_t"@

@
typedef struct sk_color4f_t
{
  float fR;
  float fG;
  float fB;
  float fA;
} sk_color4f_t
@
-}
data Sk_color4f = Sk_color4f
  { fR :: CFloat -- ^ C field: @"float fR"@
  , fG :: CFloat -- ^ C field: @"float fG"@
  , fB :: CFloat -- ^ C field: @"float fB"@
  , fA :: CFloat -- ^ C field: @"float fA"@
  }
instance Foreign.Storable.Offset.Offset "fR" Sk_color4f where
  rawOffset = (#offset sk_color4f_t, fR)
instance Foreign.Storable.Offset.Offset "fG" Sk_color4f where
  rawOffset = (#offset sk_color4f_t, fG)
instance Foreign.Storable.Offset.Offset "fB" Sk_color4f where
  rawOffset = (#offset sk_color4f_t, fB)
instance Foreign.Storable.Offset.Offset "fA" Sk_color4f where
  rawOffset = (#offset sk_color4f_t, fA)
instance Foreign.Storable.Storable Sk_color4f where
  sizeOf _ = (#size sk_color4f_t)
  alignment _ = (#alignment sk_color4f_t)
  peek p' = do
    fR <- (#peek sk_color4f_t, fR) p'
    fG <- (#peek sk_color4f_t, fG) p'
    fB <- (#peek sk_color4f_t, fB) p'
    fA <- (#peek sk_color4f_t, fA) p'
    pure Sk_color4f{..}
  poke p' Sk_color4f{..} = do
    (#poke sk_color4f_t, fR) p' fR
    (#poke sk_color4f_t, fG) p' fG
    (#poke sk_color4f_t, fB) p' fB
    (#poke sk_color4f_t, fA) p' fA

{- | C enum: @"sk_colortype_t"@

@
typedef enum 
{
  UNKNOWN_SK_COLORTYPE = 0,
  ALPHA_8_SK_COLORTYPE,
  RGB_565_SK_COLORTYPE,
  ARGB_4444_SK_COLORTYPE,
  RGBA_8888_SK_COLORTYPE,
  RGB_888X_SK_COLORTYPE,
  BGRA_8888_SK_COLORTYPE,
  RGBA_1010102_SK_COLORTYPE,
  BGRA_1010102_SK_COLORTYPE,
  RGB_101010X_SK_COLORTYPE,
  BGR_101010X_SK_COLORTYPE,
  BGR_101010X_XR_SK_COLORTYPE,
  RGBA_10X6_SK_COLORTYPE,
  GRAY_8_SK_COLORTYPE,
  RGBA_F16_NORM_SK_COLORTYPE,
  RGBA_F16_SK_COLORTYPE,
  RGBA_F32_SK_COLORTYPE,
  R8G8_UNORM_SK_COLORTYPE,
  A16_FLOAT_SK_COLORTYPE,
  R16G16_FLOAT_SK_COLORTYPE,
  A16_UNORM_SK_COLORTYPE,
  R16G16_UNORM_SK_COLORTYPE,
  R16G16B16A16_UNORM_SK_COLORTYPE,
  SRGBA_8888_SK_COLORTYPE,
  R8_UNORM_SK_COLORTYPE
} sk_colortype_t
@

-}
newtype Sk_colortype = Sk_colortype (#type sk_colortype_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_colortype_t"@ value (1/25): @"UNKNOWN_SK_COLORTYPE"@
pattern UNKNOWN_SK_COLORTYPE :: Sk_colortype
pattern UNKNOWN_SK_COLORTYPE = (#const UNKNOWN_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (2/25): @"ALPHA_8_SK_COLORTYPE"@
pattern ALPHA_8_SK_COLORTYPE :: Sk_colortype
pattern ALPHA_8_SK_COLORTYPE = (#const ALPHA_8_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (3/25): @"RGB_565_SK_COLORTYPE"@
pattern RGB_565_SK_COLORTYPE :: Sk_colortype
pattern RGB_565_SK_COLORTYPE = (#const RGB_565_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (4/25): @"ARGB_4444_SK_COLORTYPE"@
pattern ARGB_4444_SK_COLORTYPE :: Sk_colortype
pattern ARGB_4444_SK_COLORTYPE = (#const ARGB_4444_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (5/25): @"RGBA_8888_SK_COLORTYPE"@
pattern RGBA_8888_SK_COLORTYPE :: Sk_colortype
pattern RGBA_8888_SK_COLORTYPE = (#const RGBA_8888_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (6/25): @"RGB_888X_SK_COLORTYPE"@
pattern RGB_888X_SK_COLORTYPE :: Sk_colortype
pattern RGB_888X_SK_COLORTYPE = (#const RGB_888X_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (7/25): @"BGRA_8888_SK_COLORTYPE"@
pattern BGRA_8888_SK_COLORTYPE :: Sk_colortype
pattern BGRA_8888_SK_COLORTYPE = (#const BGRA_8888_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (8/25): @"RGBA_1010102_SK_COLORTYPE"@
pattern RGBA_1010102_SK_COLORTYPE :: Sk_colortype
pattern RGBA_1010102_SK_COLORTYPE = (#const RGBA_1010102_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (9/25): @"BGRA_1010102_SK_COLORTYPE"@
pattern BGRA_1010102_SK_COLORTYPE :: Sk_colortype
pattern BGRA_1010102_SK_COLORTYPE = (#const BGRA_1010102_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (10/25): @"RGB_101010X_SK_COLORTYPE"@
pattern RGB_101010X_SK_COLORTYPE :: Sk_colortype
pattern RGB_101010X_SK_COLORTYPE = (#const RGB_101010X_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (11/25): @"BGR_101010X_SK_COLORTYPE"@
pattern BGR_101010X_SK_COLORTYPE :: Sk_colortype
pattern BGR_101010X_SK_COLORTYPE = (#const BGR_101010X_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (12/25): @"BGR_101010X_XR_SK_COLORTYPE"@
pattern BGR_101010X_XR_SK_COLORTYPE :: Sk_colortype
pattern BGR_101010X_XR_SK_COLORTYPE = (#const BGR_101010X_XR_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (13/25): @"RGBA_10X6_SK_COLORTYPE"@
pattern RGBA_10X6_SK_COLORTYPE :: Sk_colortype
pattern RGBA_10X6_SK_COLORTYPE = (#const RGBA_10X6_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (14/25): @"GRAY_8_SK_COLORTYPE"@
pattern GRAY_8_SK_COLORTYPE :: Sk_colortype
pattern GRAY_8_SK_COLORTYPE = (#const GRAY_8_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (15/25): @"RGBA_F16_NORM_SK_COLORTYPE"@
pattern RGBA_F16_NORM_SK_COLORTYPE :: Sk_colortype
pattern RGBA_F16_NORM_SK_COLORTYPE = (#const RGBA_F16_NORM_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (16/25): @"RGBA_F16_SK_COLORTYPE"@
pattern RGBA_F16_SK_COLORTYPE :: Sk_colortype
pattern RGBA_F16_SK_COLORTYPE = (#const RGBA_F16_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (17/25): @"RGBA_F32_SK_COLORTYPE"@
pattern RGBA_F32_SK_COLORTYPE :: Sk_colortype
pattern RGBA_F32_SK_COLORTYPE = (#const RGBA_F32_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (18/25): @"R8G8_UNORM_SK_COLORTYPE"@
pattern R8G8_UNORM_SK_COLORTYPE :: Sk_colortype
pattern R8G8_UNORM_SK_COLORTYPE = (#const R8G8_UNORM_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (19/25): @"A16_FLOAT_SK_COLORTYPE"@
pattern A16_FLOAT_SK_COLORTYPE :: Sk_colortype
pattern A16_FLOAT_SK_COLORTYPE = (#const A16_FLOAT_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (20/25): @"R16G16_FLOAT_SK_COLORTYPE"@
pattern R16G16_FLOAT_SK_COLORTYPE :: Sk_colortype
pattern R16G16_FLOAT_SK_COLORTYPE = (#const R16G16_FLOAT_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (21/25): @"A16_UNORM_SK_COLORTYPE"@
pattern A16_UNORM_SK_COLORTYPE :: Sk_colortype
pattern A16_UNORM_SK_COLORTYPE = (#const A16_UNORM_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (22/25): @"R16G16_UNORM_SK_COLORTYPE"@
pattern R16G16_UNORM_SK_COLORTYPE :: Sk_colortype
pattern R16G16_UNORM_SK_COLORTYPE = (#const R16G16_UNORM_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (23/25): @"R16G16B16A16_UNORM_SK_COLORTYPE"@
pattern R16G16B16A16_UNORM_SK_COLORTYPE :: Sk_colortype
pattern R16G16B16A16_UNORM_SK_COLORTYPE = (#const R16G16B16A16_UNORM_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (24/25): @"SRGBA_8888_SK_COLORTYPE"@
pattern SRGBA_8888_SK_COLORTYPE :: Sk_colortype
pattern SRGBA_8888_SK_COLORTYPE = (#const SRGBA_8888_SK_COLORTYPE)

-- | C enum @"sk_colortype_t"@ value (25/25): @"R8_UNORM_SK_COLORTYPE"@
pattern R8_UNORM_SK_COLORTYPE :: Sk_colortype
pattern R8_UNORM_SK_COLORTYPE = (#const R8_UNORM_SK_COLORTYPE)

{- | C enum: @"sk_alphatype_t"@

@
typedef enum 
{
  UNKNOWN_SK_ALPHATYPE,
  OPAQUE_SK_ALPHATYPE,
  PREMUL_SK_ALPHATYPE,
  UNPREMUL_SK_ALPHATYPE
} sk_alphatype_t
@

-}
newtype Sk_alphatype = Sk_alphatype (#type sk_alphatype_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_alphatype_t"@ value (1/4): @"UNKNOWN_SK_ALPHATYPE"@
pattern UNKNOWN_SK_ALPHATYPE :: Sk_alphatype
pattern UNKNOWN_SK_ALPHATYPE = (#const UNKNOWN_SK_ALPHATYPE)

-- | C enum @"sk_alphatype_t"@ value (2/4): @"OPAQUE_SK_ALPHATYPE"@
pattern OPAQUE_SK_ALPHATYPE :: Sk_alphatype
pattern OPAQUE_SK_ALPHATYPE = (#const OPAQUE_SK_ALPHATYPE)

-- | C enum @"sk_alphatype_t"@ value (3/4): @"PREMUL_SK_ALPHATYPE"@
pattern PREMUL_SK_ALPHATYPE :: Sk_alphatype
pattern PREMUL_SK_ALPHATYPE = (#const PREMUL_SK_ALPHATYPE)

-- | C enum @"sk_alphatype_t"@ value (4/4): @"UNPREMUL_SK_ALPHATYPE"@
pattern UNPREMUL_SK_ALPHATYPE :: Sk_alphatype
pattern UNPREMUL_SK_ALPHATYPE = (#const UNPREMUL_SK_ALPHATYPE)

{- | C enum: @"sk_pixelgeometry_t"@

@
typedef enum 
{
  UNKNOWN_SK_PIXELGEOMETRY,
  RGB_H_SK_PIXELGEOMETRY,
  BGR_H_SK_PIXELGEOMETRY,
  RGB_V_SK_PIXELGEOMETRY,
  BGR_V_SK_PIXELGEOMETRY
} sk_pixelgeometry_t
@

-}
newtype Sk_pixelgeometry = Sk_pixelgeometry (#type sk_pixelgeometry_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_pixelgeometry_t"@ value (1/5): @"UNKNOWN_SK_PIXELGEOMETRY"@
pattern UNKNOWN_SK_PIXELGEOMETRY :: Sk_pixelgeometry
pattern UNKNOWN_SK_PIXELGEOMETRY = (#const UNKNOWN_SK_PIXELGEOMETRY)

-- | C enum @"sk_pixelgeometry_t"@ value (2/5): @"RGB_H_SK_PIXELGEOMETRY"@
pattern RGB_H_SK_PIXELGEOMETRY :: Sk_pixelgeometry
pattern RGB_H_SK_PIXELGEOMETRY = (#const RGB_H_SK_PIXELGEOMETRY)

-- | C enum @"sk_pixelgeometry_t"@ value (3/5): @"BGR_H_SK_PIXELGEOMETRY"@
pattern BGR_H_SK_PIXELGEOMETRY :: Sk_pixelgeometry
pattern BGR_H_SK_PIXELGEOMETRY = (#const BGR_H_SK_PIXELGEOMETRY)

-- | C enum @"sk_pixelgeometry_t"@ value (4/5): @"RGB_V_SK_PIXELGEOMETRY"@
pattern RGB_V_SK_PIXELGEOMETRY :: Sk_pixelgeometry
pattern RGB_V_SK_PIXELGEOMETRY = (#const RGB_V_SK_PIXELGEOMETRY)

-- | C enum @"sk_pixelgeometry_t"@ value (5/5): @"BGR_V_SK_PIXELGEOMETRY"@
pattern BGR_V_SK_PIXELGEOMETRY :: Sk_pixelgeometry
pattern BGR_V_SK_PIXELGEOMETRY = (#const BGR_V_SK_PIXELGEOMETRY)

{- | C enum: @"sk_surfaceprops_flags_t"@

@
typedef enum 
{
  NONE_SK_SURFACE_PROPS_FLAGS = 0,
  USE_DEVICE_INDEPENDENT_FONTS_SK_SURFACE_PROPS_FLAGS = 1 << 0
} sk_surfaceprops_flags_t
@

-}
newtype Sk_surfaceprops_flags = Sk_surfaceprops_flags (#type sk_surfaceprops_flags_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_surfaceprops_flags_t"@ value (1/2): @"NONE_SK_SURFACE_PROPS_FLAGS"@
pattern NONE_SK_SURFACE_PROPS_FLAGS :: Sk_surfaceprops_flags
pattern NONE_SK_SURFACE_PROPS_FLAGS = (#const NONE_SK_SURFACE_PROPS_FLAGS)

-- | C enum @"sk_surfaceprops_flags_t"@ value (2/2): @"USE_DEVICE_INDEPENDENT_FONTS_SK_SURFACE_PROPS_FLAGS"@
pattern USE_DEVICE_INDEPENDENT_FONTS_SK_SURFACE_PROPS_FLAGS :: Sk_surfaceprops_flags
pattern USE_DEVICE_INDEPENDENT_FONTS_SK_SURFACE_PROPS_FLAGS = (#const USE_DEVICE_INDEPENDENT_FONTS_SK_SURFACE_PROPS_FLAGS)

{- | Opaque C struct: @"sk_surfaceprops_t"@
-}
data Sk_surfaceprops = Sk_surfaceprops

{- | C struct: @"sk_point_t"@

@
typedef struct 
{
  float x;
  float y;
} sk_point_t
@
-}
data Sk_point = Sk_point
  { x :: CFloat -- ^ C field: @"float x"@
  , y :: CFloat -- ^ C field: @"float y"@
  }
instance Foreign.Storable.Offset.Offset "x" Sk_point where
  rawOffset = (#offset sk_point_t, x)
instance Foreign.Storable.Offset.Offset "y" Sk_point where
  rawOffset = (#offset sk_point_t, y)
instance Foreign.Storable.Storable Sk_point where
  sizeOf _ = (#size sk_point_t)
  alignment _ = (#alignment sk_point_t)
  peek p' = do
    x <- (#peek sk_point_t, x) p'
    y <- (#peek sk_point_t, y) p'
    pure Sk_point{..}
  poke p' Sk_point{..} = do
    (#poke sk_point_t, x) p' x
    (#poke sk_point_t, y) p' y

{- | C type alias: @sk_vector_t@

@
typedef sk_point_t sk_vector_t
@
-}
type Sk_vector = Sk_point

{- | C struct: @"sk_irect_t"@

@
typedef struct 
{
  int32_t left;
  int32_t top;
  int32_t right;
  int32_t bottom;
} sk_irect_t
@
-}
data Sk_irect = Sk_irect
  { left :: Int32 -- ^ C field: @"int32_t left"@
  , top :: Int32 -- ^ C field: @"int32_t top"@
  , right :: Int32 -- ^ C field: @"int32_t right"@
  , bottom :: Int32 -- ^ C field: @"int32_t bottom"@
  }
instance Foreign.Storable.Offset.Offset "left" Sk_irect where
  rawOffset = (#offset sk_irect_t, left)
instance Foreign.Storable.Offset.Offset "top" Sk_irect where
  rawOffset = (#offset sk_irect_t, top)
instance Foreign.Storable.Offset.Offset "right" Sk_irect where
  rawOffset = (#offset sk_irect_t, right)
instance Foreign.Storable.Offset.Offset "bottom" Sk_irect where
  rawOffset = (#offset sk_irect_t, bottom)
instance Foreign.Storable.Storable Sk_irect where
  sizeOf _ = (#size sk_irect_t)
  alignment _ = (#alignment sk_irect_t)
  peek p' = do
    left <- (#peek sk_irect_t, left) p'
    top <- (#peek sk_irect_t, top) p'
    right <- (#peek sk_irect_t, right) p'
    bottom <- (#peek sk_irect_t, bottom) p'
    pure Sk_irect{..}
  poke p' Sk_irect{..} = do
    (#poke sk_irect_t, left) p' left
    (#poke sk_irect_t, top) p' top
    (#poke sk_irect_t, right) p' right
    (#poke sk_irect_t, bottom) p' bottom

{- | C struct: @"sk_rect_t"@

@
typedef struct 
{
  float left;
  float top;
  float right;
  float bottom;
} sk_rect_t
@
-}
data Sk_rect = Sk_rect
  { left :: CFloat -- ^ C field: @"float left"@
  , top :: CFloat -- ^ C field: @"float top"@
  , right :: CFloat -- ^ C field: @"float right"@
  , bottom :: CFloat -- ^ C field: @"float bottom"@
  }
instance Foreign.Storable.Offset.Offset "left" Sk_rect where
  rawOffset = (#offset sk_rect_t, left)
instance Foreign.Storable.Offset.Offset "top" Sk_rect where
  rawOffset = (#offset sk_rect_t, top)
instance Foreign.Storable.Offset.Offset "right" Sk_rect where
  rawOffset = (#offset sk_rect_t, right)
instance Foreign.Storable.Offset.Offset "bottom" Sk_rect where
  rawOffset = (#offset sk_rect_t, bottom)
instance Foreign.Storable.Storable Sk_rect where
  sizeOf _ = (#size sk_rect_t)
  alignment _ = (#alignment sk_rect_t)
  peek p' = do
    left <- (#peek sk_rect_t, left) p'
    top <- (#peek sk_rect_t, top) p'
    right <- (#peek sk_rect_t, right) p'
    bottom <- (#peek sk_rect_t, bottom) p'
    pure Sk_rect{..}
  poke p' Sk_rect{..} = do
    (#poke sk_rect_t, left) p' left
    (#poke sk_rect_t, top) p' top
    (#poke sk_rect_t, right) p' right
    (#poke sk_rect_t, bottom) p' bottom

{- | C struct: @"sk_matrix_t"@

@
typedef struct 
{
  float scaleX;
  float skewX;
  float transX;
  float skewY;
  float scaleY;
  float transY;
  float persp0;
  float persp1;
  float persp2;
} sk_matrix_t
@
-}
data Sk_matrix = Sk_matrix
  { scaleX :: CFloat -- ^ C field: @"float scaleX"@
  , skewX :: CFloat -- ^ C field: @"float skewX"@
  , transX :: CFloat -- ^ C field: @"float transX"@
  , skewY :: CFloat -- ^ C field: @"float skewY"@
  , scaleY :: CFloat -- ^ C field: @"float scaleY"@
  , transY :: CFloat -- ^ C field: @"float transY"@
  , persp0 :: CFloat -- ^ C field: @"float persp0"@
  , persp1 :: CFloat -- ^ C field: @"float persp1"@
  , persp2 :: CFloat -- ^ C field: @"float persp2"@
  }
instance Foreign.Storable.Offset.Offset "scaleX" Sk_matrix where
  rawOffset = (#offset sk_matrix_t, scaleX)
instance Foreign.Storable.Offset.Offset "skewX" Sk_matrix where
  rawOffset = (#offset sk_matrix_t, skewX)
instance Foreign.Storable.Offset.Offset "transX" Sk_matrix where
  rawOffset = (#offset sk_matrix_t, transX)
instance Foreign.Storable.Offset.Offset "skewY" Sk_matrix where
  rawOffset = (#offset sk_matrix_t, skewY)
instance Foreign.Storable.Offset.Offset "scaleY" Sk_matrix where
  rawOffset = (#offset sk_matrix_t, scaleY)
instance Foreign.Storable.Offset.Offset "transY" Sk_matrix where
  rawOffset = (#offset sk_matrix_t, transY)
instance Foreign.Storable.Offset.Offset "persp0" Sk_matrix where
  rawOffset = (#offset sk_matrix_t, persp0)
instance Foreign.Storable.Offset.Offset "persp1" Sk_matrix where
  rawOffset = (#offset sk_matrix_t, persp1)
instance Foreign.Storable.Offset.Offset "persp2" Sk_matrix where
  rawOffset = (#offset sk_matrix_t, persp2)
instance Foreign.Storable.Storable Sk_matrix where
  sizeOf _ = (#size sk_matrix_t)
  alignment _ = (#alignment sk_matrix_t)
  peek p' = do
    scaleX <- (#peek sk_matrix_t, scaleX) p'
    skewX <- (#peek sk_matrix_t, skewX) p'
    transX <- (#peek sk_matrix_t, transX) p'
    skewY <- (#peek sk_matrix_t, skewY) p'
    scaleY <- (#peek sk_matrix_t, scaleY) p'
    transY <- (#peek sk_matrix_t, transY) p'
    persp0 <- (#peek sk_matrix_t, persp0) p'
    persp1 <- (#peek sk_matrix_t, persp1) p'
    persp2 <- (#peek sk_matrix_t, persp2) p'
    pure Sk_matrix{..}
  poke p' Sk_matrix{..} = do
    (#poke sk_matrix_t, scaleX) p' scaleX
    (#poke sk_matrix_t, skewX) p' skewX
    (#poke sk_matrix_t, transX) p' transX
    (#poke sk_matrix_t, skewY) p' skewY
    (#poke sk_matrix_t, scaleY) p' scaleY
    (#poke sk_matrix_t, transY) p' transY
    (#poke sk_matrix_t, persp0) p' persp0
    (#poke sk_matrix_t, persp1) p' persp1
    (#poke sk_matrix_t, persp2) p' persp2

{- | C struct: @"sk_matrix44_t"@

@
typedef struct 
{
  float m00;
  float m01;
  float m02;
  float m03;
  float m10;
  float m11;
  float m12;
  float m13;
  float m20;
  float m21;
  float m22;
  float m23;
  float m30;
  float m31;
  float m32;
  float m33;
} sk_matrix44_t
@
-}
data Sk_matrix44 = Sk_matrix44
  { m00 :: CFloat -- ^ C field: @"float m00"@
  , m01 :: CFloat -- ^ C field: @"float m01"@
  , m02 :: CFloat -- ^ C field: @"float m02"@
  , m03 :: CFloat -- ^ C field: @"float m03"@
  , m10 :: CFloat -- ^ C field: @"float m10"@
  , m11 :: CFloat -- ^ C field: @"float m11"@
  , m12 :: CFloat -- ^ C field: @"float m12"@
  , m13 :: CFloat -- ^ C field: @"float m13"@
  , m20 :: CFloat -- ^ C field: @"float m20"@
  , m21 :: CFloat -- ^ C field: @"float m21"@
  , m22 :: CFloat -- ^ C field: @"float m22"@
  , m23 :: CFloat -- ^ C field: @"float m23"@
  , m30 :: CFloat -- ^ C field: @"float m30"@
  , m31 :: CFloat -- ^ C field: @"float m31"@
  , m32 :: CFloat -- ^ C field: @"float m32"@
  , m33 :: CFloat -- ^ C field: @"float m33"@
  }
instance Foreign.Storable.Offset.Offset "m00" Sk_matrix44 where
  rawOffset = (#offset sk_matrix44_t, m00)
instance Foreign.Storable.Offset.Offset "m01" Sk_matrix44 where
  rawOffset = (#offset sk_matrix44_t, m01)
instance Foreign.Storable.Offset.Offset "m02" Sk_matrix44 where
  rawOffset = (#offset sk_matrix44_t, m02)
instance Foreign.Storable.Offset.Offset "m03" Sk_matrix44 where
  rawOffset = (#offset sk_matrix44_t, m03)
instance Foreign.Storable.Offset.Offset "m10" Sk_matrix44 where
  rawOffset = (#offset sk_matrix44_t, m10)
instance Foreign.Storable.Offset.Offset "m11" Sk_matrix44 where
  rawOffset = (#offset sk_matrix44_t, m11)
instance Foreign.Storable.Offset.Offset "m12" Sk_matrix44 where
  rawOffset = (#offset sk_matrix44_t, m12)
instance Foreign.Storable.Offset.Offset "m13" Sk_matrix44 where
  rawOffset = (#offset sk_matrix44_t, m13)
instance Foreign.Storable.Offset.Offset "m20" Sk_matrix44 where
  rawOffset = (#offset sk_matrix44_t, m20)
instance Foreign.Storable.Offset.Offset "m21" Sk_matrix44 where
  rawOffset = (#offset sk_matrix44_t, m21)
instance Foreign.Storable.Offset.Offset "m22" Sk_matrix44 where
  rawOffset = (#offset sk_matrix44_t, m22)
instance Foreign.Storable.Offset.Offset "m23" Sk_matrix44 where
  rawOffset = (#offset sk_matrix44_t, m23)
instance Foreign.Storable.Offset.Offset "m30" Sk_matrix44 where
  rawOffset = (#offset sk_matrix44_t, m30)
instance Foreign.Storable.Offset.Offset "m31" Sk_matrix44 where
  rawOffset = (#offset sk_matrix44_t, m31)
instance Foreign.Storable.Offset.Offset "m32" Sk_matrix44 where
  rawOffset = (#offset sk_matrix44_t, m32)
instance Foreign.Storable.Offset.Offset "m33" Sk_matrix44 where
  rawOffset = (#offset sk_matrix44_t, m33)
instance Foreign.Storable.Storable Sk_matrix44 where
  sizeOf _ = (#size sk_matrix44_t)
  alignment _ = (#alignment sk_matrix44_t)
  peek p' = do
    m00 <- (#peek sk_matrix44_t, m00) p'
    m01 <- (#peek sk_matrix44_t, m01) p'
    m02 <- (#peek sk_matrix44_t, m02) p'
    m03 <- (#peek sk_matrix44_t, m03) p'
    m10 <- (#peek sk_matrix44_t, m10) p'
    m11 <- (#peek sk_matrix44_t, m11) p'
    m12 <- (#peek sk_matrix44_t, m12) p'
    m13 <- (#peek sk_matrix44_t, m13) p'
    m20 <- (#peek sk_matrix44_t, m20) p'
    m21 <- (#peek sk_matrix44_t, m21) p'
    m22 <- (#peek sk_matrix44_t, m22) p'
    m23 <- (#peek sk_matrix44_t, m23) p'
    m30 <- (#peek sk_matrix44_t, m30) p'
    m31 <- (#peek sk_matrix44_t, m31) p'
    m32 <- (#peek sk_matrix44_t, m32) p'
    m33 <- (#peek sk_matrix44_t, m33) p'
    pure Sk_matrix44{..}
  poke p' Sk_matrix44{..} = do
    (#poke sk_matrix44_t, m00) p' m00
    (#poke sk_matrix44_t, m01) p' m01
    (#poke sk_matrix44_t, m02) p' m02
    (#poke sk_matrix44_t, m03) p' m03
    (#poke sk_matrix44_t, m10) p' m10
    (#poke sk_matrix44_t, m11) p' m11
    (#poke sk_matrix44_t, m12) p' m12
    (#poke sk_matrix44_t, m13) p' m13
    (#poke sk_matrix44_t, m20) p' m20
    (#poke sk_matrix44_t, m21) p' m21
    (#poke sk_matrix44_t, m22) p' m22
    (#poke sk_matrix44_t, m23) p' m23
    (#poke sk_matrix44_t, m30) p' m30
    (#poke sk_matrix44_t, m31) p' m31
    (#poke sk_matrix44_t, m32) p' m32
    (#poke sk_matrix44_t, m33) p' m33

{- | Opaque C struct: @"sk_canvas_t"@
-}
data Sk_canvas = Sk_canvas

{- | Opaque C struct: @"sk_nodraw_canvas_t"@
-}
data Sk_nodraw_canvas = Sk_nodraw_canvas

{- | Opaque C struct: @"sk_nway_canvas_t"@
-}
data Sk_nway_canvas = Sk_nway_canvas

{- | Opaque C struct: @"sk_overdraw_canvas_t"@
-}
data Sk_overdraw_canvas = Sk_overdraw_canvas

{- | Opaque C struct: @"sk_data_t"@
-}
data Sk_data = Sk_data

{- | Opaque C struct: @"sk_drawable_t"@
-}
data Sk_drawable = Sk_drawable

{- | Opaque C struct: @"sk_image_t"@
-}
data Sk_image = Sk_image

{- | Opaque C struct: @"sk_maskfilter_t"@
-}
data Sk_maskfilter = Sk_maskfilter

{- | Opaque C struct: @"sk_paint_t"@
-}
data Sk_paint = Sk_paint

{- | Opaque C struct: @"sk_font_t"@
-}
data Sk_font = Sk_font

{- | Opaque C struct: @"sk_path_t"@
-}
data Sk_path = Sk_path

{- | Opaque C struct: @"sk_picture_t"@
-}
data Sk_picture = Sk_picture

{- | Opaque C struct: @"sk_picture_recorder_t"@
-}
data Sk_picture_recorder = Sk_picture_recorder

{- | Opaque C struct: @"sk_bbh_factory_t"@
-}
data Sk_bbh_factory = Sk_bbh_factory

{- | Opaque C struct: @"sk_rtree_factory_t"@
-}
data Sk_rtree_factory = Sk_rtree_factory

{- | Opaque C struct: @"sk_shader_t"@
-}
data Sk_shader = Sk_shader

{- | Opaque C struct: @"sk_surface_t"@
-}
data Sk_surface = Sk_surface

{- | Opaque C struct: @"sk_region_t"@
-}
data Sk_region = Sk_region

{- | Opaque C struct: @"sk_region_iterator_t"@
-}
data Sk_region_iterator = Sk_region_iterator

{- | Opaque C struct: @"sk_region_cliperator_t"@
-}
data Sk_region_cliperator = Sk_region_cliperator

{- | Opaque C struct: @"sk_region_spanerator_t"@
-}
data Sk_region_spanerator = Sk_region_spanerator

{- | C enum: @"sk_blendmode_t"@

@
typedef enum 
{
  CLEAR_SK_BLENDMODE,
  SRC_SK_BLENDMODE,
  DST_SK_BLENDMODE,
  SRCOVER_SK_BLENDMODE,
  DSTOVER_SK_BLENDMODE,
  SRCIN_SK_BLENDMODE,
  DSTIN_SK_BLENDMODE,
  SRCOUT_SK_BLENDMODE,
  DSTOUT_SK_BLENDMODE,
  SRCATOP_SK_BLENDMODE,
  DSTATOP_SK_BLENDMODE,
  XOR_SK_BLENDMODE,
  PLUS_SK_BLENDMODE,
  MODULATE_SK_BLENDMODE,
  SCREEN_SK_BLENDMODE,
  OVERLAY_SK_BLENDMODE,
  DARKEN_SK_BLENDMODE,
  LIGHTEN_SK_BLENDMODE,
  COLORDODGE_SK_BLENDMODE,
  COLORBURN_SK_BLENDMODE,
  HARDLIGHT_SK_BLENDMODE,
  SOFTLIGHT_SK_BLENDMODE,
  DIFFERENCE_SK_BLENDMODE,
  EXCLUSION_SK_BLENDMODE,
  MULTIPLY_SK_BLENDMODE,
  HUE_SK_BLENDMODE,
  SATURATION_SK_BLENDMODE,
  COLOR_SK_BLENDMODE,
  LUMINOSITY_SK_BLENDMODE
} sk_blendmode_t
@

-}
newtype Sk_blendmode = Sk_blendmode (#type sk_blendmode_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_blendmode_t"@ value (1/29): @"CLEAR_SK_BLENDMODE"@
pattern CLEAR_SK_BLENDMODE :: Sk_blendmode
pattern CLEAR_SK_BLENDMODE = (#const CLEAR_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (2/29): @"SRC_SK_BLENDMODE"@
pattern SRC_SK_BLENDMODE :: Sk_blendmode
pattern SRC_SK_BLENDMODE = (#const SRC_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (3/29): @"DST_SK_BLENDMODE"@
pattern DST_SK_BLENDMODE :: Sk_blendmode
pattern DST_SK_BLENDMODE = (#const DST_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (4/29): @"SRCOVER_SK_BLENDMODE"@
pattern SRCOVER_SK_BLENDMODE :: Sk_blendmode
pattern SRCOVER_SK_BLENDMODE = (#const SRCOVER_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (5/29): @"DSTOVER_SK_BLENDMODE"@
pattern DSTOVER_SK_BLENDMODE :: Sk_blendmode
pattern DSTOVER_SK_BLENDMODE = (#const DSTOVER_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (6/29): @"SRCIN_SK_BLENDMODE"@
pattern SRCIN_SK_BLENDMODE :: Sk_blendmode
pattern SRCIN_SK_BLENDMODE = (#const SRCIN_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (7/29): @"DSTIN_SK_BLENDMODE"@
pattern DSTIN_SK_BLENDMODE :: Sk_blendmode
pattern DSTIN_SK_BLENDMODE = (#const DSTIN_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (8/29): @"SRCOUT_SK_BLENDMODE"@
pattern SRCOUT_SK_BLENDMODE :: Sk_blendmode
pattern SRCOUT_SK_BLENDMODE = (#const SRCOUT_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (9/29): @"DSTOUT_SK_BLENDMODE"@
pattern DSTOUT_SK_BLENDMODE :: Sk_blendmode
pattern DSTOUT_SK_BLENDMODE = (#const DSTOUT_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (10/29): @"SRCATOP_SK_BLENDMODE"@
pattern SRCATOP_SK_BLENDMODE :: Sk_blendmode
pattern SRCATOP_SK_BLENDMODE = (#const SRCATOP_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (11/29): @"DSTATOP_SK_BLENDMODE"@
pattern DSTATOP_SK_BLENDMODE :: Sk_blendmode
pattern DSTATOP_SK_BLENDMODE = (#const DSTATOP_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (12/29): @"XOR_SK_BLENDMODE"@
pattern XOR_SK_BLENDMODE :: Sk_blendmode
pattern XOR_SK_BLENDMODE = (#const XOR_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (13/29): @"PLUS_SK_BLENDMODE"@
pattern PLUS_SK_BLENDMODE :: Sk_blendmode
pattern PLUS_SK_BLENDMODE = (#const PLUS_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (14/29): @"MODULATE_SK_BLENDMODE"@
pattern MODULATE_SK_BLENDMODE :: Sk_blendmode
pattern MODULATE_SK_BLENDMODE = (#const MODULATE_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (15/29): @"SCREEN_SK_BLENDMODE"@
pattern SCREEN_SK_BLENDMODE :: Sk_blendmode
pattern SCREEN_SK_BLENDMODE = (#const SCREEN_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (16/29): @"OVERLAY_SK_BLENDMODE"@
pattern OVERLAY_SK_BLENDMODE :: Sk_blendmode
pattern OVERLAY_SK_BLENDMODE = (#const OVERLAY_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (17/29): @"DARKEN_SK_BLENDMODE"@
pattern DARKEN_SK_BLENDMODE :: Sk_blendmode
pattern DARKEN_SK_BLENDMODE = (#const DARKEN_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (18/29): @"LIGHTEN_SK_BLENDMODE"@
pattern LIGHTEN_SK_BLENDMODE :: Sk_blendmode
pattern LIGHTEN_SK_BLENDMODE = (#const LIGHTEN_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (19/29): @"COLORDODGE_SK_BLENDMODE"@
pattern COLORDODGE_SK_BLENDMODE :: Sk_blendmode
pattern COLORDODGE_SK_BLENDMODE = (#const COLORDODGE_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (20/29): @"COLORBURN_SK_BLENDMODE"@
pattern COLORBURN_SK_BLENDMODE :: Sk_blendmode
pattern COLORBURN_SK_BLENDMODE = (#const COLORBURN_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (21/29): @"HARDLIGHT_SK_BLENDMODE"@
pattern HARDLIGHT_SK_BLENDMODE :: Sk_blendmode
pattern HARDLIGHT_SK_BLENDMODE = (#const HARDLIGHT_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (22/29): @"SOFTLIGHT_SK_BLENDMODE"@
pattern SOFTLIGHT_SK_BLENDMODE :: Sk_blendmode
pattern SOFTLIGHT_SK_BLENDMODE = (#const SOFTLIGHT_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (23/29): @"DIFFERENCE_SK_BLENDMODE"@
pattern DIFFERENCE_SK_BLENDMODE :: Sk_blendmode
pattern DIFFERENCE_SK_BLENDMODE = (#const DIFFERENCE_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (24/29): @"EXCLUSION_SK_BLENDMODE"@
pattern EXCLUSION_SK_BLENDMODE :: Sk_blendmode
pattern EXCLUSION_SK_BLENDMODE = (#const EXCLUSION_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (25/29): @"MULTIPLY_SK_BLENDMODE"@
pattern MULTIPLY_SK_BLENDMODE :: Sk_blendmode
pattern MULTIPLY_SK_BLENDMODE = (#const MULTIPLY_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (26/29): @"HUE_SK_BLENDMODE"@
pattern HUE_SK_BLENDMODE :: Sk_blendmode
pattern HUE_SK_BLENDMODE = (#const HUE_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (27/29): @"SATURATION_SK_BLENDMODE"@
pattern SATURATION_SK_BLENDMODE :: Sk_blendmode
pattern SATURATION_SK_BLENDMODE = (#const SATURATION_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (28/29): @"COLOR_SK_BLENDMODE"@
pattern COLOR_SK_BLENDMODE :: Sk_blendmode
pattern COLOR_SK_BLENDMODE = (#const COLOR_SK_BLENDMODE)

-- | C enum @"sk_blendmode_t"@ value (29/29): @"LUMINOSITY_SK_BLENDMODE"@
pattern LUMINOSITY_SK_BLENDMODE :: Sk_blendmode
pattern LUMINOSITY_SK_BLENDMODE = (#const LUMINOSITY_SK_BLENDMODE)

{- | C struct: @"sk_point3_t"@

@
typedef struct 
{
  float x;
  float y;
  float z;
} sk_point3_t
@
-}
data Sk_point3 = Sk_point3
  { x :: CFloat -- ^ C field: @"float x"@
  , y :: CFloat -- ^ C field: @"float y"@
  , z :: CFloat -- ^ C field: @"float z"@
  }
instance Foreign.Storable.Offset.Offset "x" Sk_point3 where
  rawOffset = (#offset sk_point3_t, x)
instance Foreign.Storable.Offset.Offset "y" Sk_point3 where
  rawOffset = (#offset sk_point3_t, y)
instance Foreign.Storable.Offset.Offset "z" Sk_point3 where
  rawOffset = (#offset sk_point3_t, z)
instance Foreign.Storable.Storable Sk_point3 where
  sizeOf _ = (#size sk_point3_t)
  alignment _ = (#alignment sk_point3_t)
  peek p' = do
    x <- (#peek sk_point3_t, x) p'
    y <- (#peek sk_point3_t, y) p'
    z <- (#peek sk_point3_t, z) p'
    pure Sk_point3{..}
  poke p' Sk_point3{..} = do
    (#poke sk_point3_t, x) p' x
    (#poke sk_point3_t, y) p' y
    (#poke sk_point3_t, z) p' z

{- | C struct: @"sk_ipoint_t"@

@
typedef struct 
{
  int32_t x;
  int32_t y;
} sk_ipoint_t
@
-}
data Sk_ipoint = Sk_ipoint
  { x :: Int32 -- ^ C field: @"int32_t x"@
  , y :: Int32 -- ^ C field: @"int32_t y"@
  }
instance Foreign.Storable.Offset.Offset "x" Sk_ipoint where
  rawOffset = (#offset sk_ipoint_t, x)
instance Foreign.Storable.Offset.Offset "y" Sk_ipoint where
  rawOffset = (#offset sk_ipoint_t, y)
instance Foreign.Storable.Storable Sk_ipoint where
  sizeOf _ = (#size sk_ipoint_t)
  alignment _ = (#alignment sk_ipoint_t)
  peek p' = do
    x <- (#peek sk_ipoint_t, x) p'
    y <- (#peek sk_ipoint_t, y) p'
    pure Sk_ipoint{..}
  poke p' Sk_ipoint{..} = do
    (#poke sk_ipoint_t, x) p' x
    (#poke sk_ipoint_t, y) p' y

{- | C struct: @"sk_size_t"@

@
typedef struct 
{
  float w;
  float h;
} sk_size_t
@
-}
data Sk_size = Sk_size
  { w :: CFloat -- ^ C field: @"float w"@
  , h :: CFloat -- ^ C field: @"float h"@
  }
instance Foreign.Storable.Offset.Offset "w" Sk_size where
  rawOffset = (#offset sk_size_t, w)
instance Foreign.Storable.Offset.Offset "h" Sk_size where
  rawOffset = (#offset sk_size_t, h)
instance Foreign.Storable.Storable Sk_size where
  sizeOf _ = (#size sk_size_t)
  alignment _ = (#alignment sk_size_t)
  peek p' = do
    w <- (#peek sk_size_t, w) p'
    h <- (#peek sk_size_t, h) p'
    pure Sk_size{..}
  poke p' Sk_size{..} = do
    (#poke sk_size_t, w) p' w
    (#poke sk_size_t, h) p' h

{- | C struct: @"sk_isize_t"@

@
typedef struct 
{
  int32_t w;
  int32_t h;
} sk_isize_t
@
-}
data Sk_isize = Sk_isize
  { w :: Int32 -- ^ C field: @"int32_t w"@
  , h :: Int32 -- ^ C field: @"int32_t h"@
  }
instance Foreign.Storable.Offset.Offset "w" Sk_isize where
  rawOffset = (#offset sk_isize_t, w)
instance Foreign.Storable.Offset.Offset "h" Sk_isize where
  rawOffset = (#offset sk_isize_t, h)
instance Foreign.Storable.Storable Sk_isize where
  sizeOf _ = (#size sk_isize_t)
  alignment _ = (#alignment sk_isize_t)
  peek p' = do
    w <- (#peek sk_isize_t, w) p'
    h <- (#peek sk_isize_t, h) p'
    pure Sk_isize{..}
  poke p' Sk_isize{..} = do
    (#poke sk_isize_t, w) p' w
    (#poke sk_isize_t, h) p' h

{- | C struct: @"sk_fontmetrics_t"@

@
typedef struct 
{
  uint32_t fFlags;
  float fTop;
  float fAscent;
  float fDescent;
  float fBottom;
  float fLeading;
  float fAvgCharWidth;
  float fMaxCharWidth;
  float fXMin;
  float fXMax;
  float fXHeight;
  float fCapHeight;
  float fUnderlineThickness;
  float fUnderlinePosition;
  float fStrikeoutThickness;
  float fStrikeoutPosition;
} sk_fontmetrics_t
@
-}
data Sk_fontmetrics = Sk_fontmetrics
  { fFlags :: Word32 -- ^ C field: @"uint32_t fFlags"@
  , fTop :: CFloat -- ^ C field: @"float fTop"@
  , fAscent :: CFloat -- ^ C field: @"float fAscent"@
  , fDescent :: CFloat -- ^ C field: @"float fDescent"@
  , fBottom :: CFloat -- ^ C field: @"float fBottom"@
  , fLeading :: CFloat -- ^ C field: @"float fLeading"@
  , fAvgCharWidth :: CFloat -- ^ C field: @"float fAvgCharWidth"@
  , fMaxCharWidth :: CFloat -- ^ C field: @"float fMaxCharWidth"@
  , fXMin :: CFloat -- ^ C field: @"float fXMin"@
  , fXMax :: CFloat -- ^ C field: @"float fXMax"@
  , fXHeight :: CFloat -- ^ C field: @"float fXHeight"@
  , fCapHeight :: CFloat -- ^ C field: @"float fCapHeight"@
  , fUnderlineThickness :: CFloat -- ^ C field: @"float fUnderlineThickness"@
  , fUnderlinePosition :: CFloat -- ^ C field: @"float fUnderlinePosition"@
  , fStrikeoutThickness :: CFloat -- ^ C field: @"float fStrikeoutThickness"@
  , fStrikeoutPosition :: CFloat -- ^ C field: @"float fStrikeoutPosition"@
  }
instance Foreign.Storable.Offset.Offset "fFlags" Sk_fontmetrics where
  rawOffset = (#offset sk_fontmetrics_t, fFlags)
instance Foreign.Storable.Offset.Offset "fTop" Sk_fontmetrics where
  rawOffset = (#offset sk_fontmetrics_t, fTop)
instance Foreign.Storable.Offset.Offset "fAscent" Sk_fontmetrics where
  rawOffset = (#offset sk_fontmetrics_t, fAscent)
instance Foreign.Storable.Offset.Offset "fDescent" Sk_fontmetrics where
  rawOffset = (#offset sk_fontmetrics_t, fDescent)
instance Foreign.Storable.Offset.Offset "fBottom" Sk_fontmetrics where
  rawOffset = (#offset sk_fontmetrics_t, fBottom)
instance Foreign.Storable.Offset.Offset "fLeading" Sk_fontmetrics where
  rawOffset = (#offset sk_fontmetrics_t, fLeading)
instance Foreign.Storable.Offset.Offset "fAvgCharWidth" Sk_fontmetrics where
  rawOffset = (#offset sk_fontmetrics_t, fAvgCharWidth)
instance Foreign.Storable.Offset.Offset "fMaxCharWidth" Sk_fontmetrics where
  rawOffset = (#offset sk_fontmetrics_t, fMaxCharWidth)
instance Foreign.Storable.Offset.Offset "fXMin" Sk_fontmetrics where
  rawOffset = (#offset sk_fontmetrics_t, fXMin)
instance Foreign.Storable.Offset.Offset "fXMax" Sk_fontmetrics where
  rawOffset = (#offset sk_fontmetrics_t, fXMax)
instance Foreign.Storable.Offset.Offset "fXHeight" Sk_fontmetrics where
  rawOffset = (#offset sk_fontmetrics_t, fXHeight)
instance Foreign.Storable.Offset.Offset "fCapHeight" Sk_fontmetrics where
  rawOffset = (#offset sk_fontmetrics_t, fCapHeight)
instance Foreign.Storable.Offset.Offset "fUnderlineThickness" Sk_fontmetrics where
  rawOffset = (#offset sk_fontmetrics_t, fUnderlineThickness)
instance Foreign.Storable.Offset.Offset "fUnderlinePosition" Sk_fontmetrics where
  rawOffset = (#offset sk_fontmetrics_t, fUnderlinePosition)
instance Foreign.Storable.Offset.Offset "fStrikeoutThickness" Sk_fontmetrics where
  rawOffset = (#offset sk_fontmetrics_t, fStrikeoutThickness)
instance Foreign.Storable.Offset.Offset "fStrikeoutPosition" Sk_fontmetrics where
  rawOffset = (#offset sk_fontmetrics_t, fStrikeoutPosition)
instance Foreign.Storable.Storable Sk_fontmetrics where
  sizeOf _ = (#size sk_fontmetrics_t)
  alignment _ = (#alignment sk_fontmetrics_t)
  peek p' = do
    fFlags <- (#peek sk_fontmetrics_t, fFlags) p'
    fTop <- (#peek sk_fontmetrics_t, fTop) p'
    fAscent <- (#peek sk_fontmetrics_t, fAscent) p'
    fDescent <- (#peek sk_fontmetrics_t, fDescent) p'
    fBottom <- (#peek sk_fontmetrics_t, fBottom) p'
    fLeading <- (#peek sk_fontmetrics_t, fLeading) p'
    fAvgCharWidth <- (#peek sk_fontmetrics_t, fAvgCharWidth) p'
    fMaxCharWidth <- (#peek sk_fontmetrics_t, fMaxCharWidth) p'
    fXMin <- (#peek sk_fontmetrics_t, fXMin) p'
    fXMax <- (#peek sk_fontmetrics_t, fXMax) p'
    fXHeight <- (#peek sk_fontmetrics_t, fXHeight) p'
    fCapHeight <- (#peek sk_fontmetrics_t, fCapHeight) p'
    fUnderlineThickness <- (#peek sk_fontmetrics_t, fUnderlineThickness) p'
    fUnderlinePosition <- (#peek sk_fontmetrics_t, fUnderlinePosition) p'
    fStrikeoutThickness <- (#peek sk_fontmetrics_t, fStrikeoutThickness) p'
    fStrikeoutPosition <- (#peek sk_fontmetrics_t, fStrikeoutPosition) p'
    pure Sk_fontmetrics{..}
  poke p' Sk_fontmetrics{..} = do
    (#poke sk_fontmetrics_t, fFlags) p' fFlags
    (#poke sk_fontmetrics_t, fTop) p' fTop
    (#poke sk_fontmetrics_t, fAscent) p' fAscent
    (#poke sk_fontmetrics_t, fDescent) p' fDescent
    (#poke sk_fontmetrics_t, fBottom) p' fBottom
    (#poke sk_fontmetrics_t, fLeading) p' fLeading
    (#poke sk_fontmetrics_t, fAvgCharWidth) p' fAvgCharWidth
    (#poke sk_fontmetrics_t, fMaxCharWidth) p' fMaxCharWidth
    (#poke sk_fontmetrics_t, fXMin) p' fXMin
    (#poke sk_fontmetrics_t, fXMax) p' fXMax
    (#poke sk_fontmetrics_t, fXHeight) p' fXHeight
    (#poke sk_fontmetrics_t, fCapHeight) p' fCapHeight
    (#poke sk_fontmetrics_t, fUnderlineThickness) p' fUnderlineThickness
    (#poke sk_fontmetrics_t, fUnderlinePosition) p' fUnderlinePosition
    (#poke sk_fontmetrics_t, fStrikeoutThickness) p' fStrikeoutThickness
    (#poke sk_fontmetrics_t, fStrikeoutPosition) p' fStrikeoutPosition

{- | Opaque C struct: @"sk_string_t"@
-}
data Sk_string = Sk_string

{- | Opaque C struct: @"sk_bitmap_t"@
-}
data Sk_bitmap = Sk_bitmap

{- | Opaque C struct: @"sk_pixmap_t"@
-}
data Sk_pixmap = Sk_pixmap

{- | Opaque C struct: @"sk_colorfilter_t"@
-}
data Sk_colorfilter = Sk_colorfilter

{- | Opaque C struct: @"sk_imagefilter_t"@
-}
data Sk_imagefilter = Sk_imagefilter

{- | Opaque C struct: @"sk_blender_t"@
-}
data Sk_blender = Sk_blender

{- | Opaque C struct: @"sk_typeface_t"@
-}
data Sk_typeface = Sk_typeface

{- | C type alias: @sk_font_table_tag_t@

@
typedef uint32_t sk_font_table_tag_t
@
-}
type Sk_font_table_tag = Word32

{- | Opaque C struct: @"sk_fontmgr_t"@
-}
data Sk_fontmgr = Sk_fontmgr

{- | Opaque C struct: @"sk_fontstyle_t"@
-}
data Sk_fontstyle = Sk_fontstyle

{- | Opaque C struct: @"sk_fontstyleset_t"@
-}
data Sk_fontstyleset = Sk_fontstyleset

{- | Opaque C struct: @"sk_codec_t"@
-}
data Sk_codec = Sk_codec

{- | Opaque C struct: @"sk_colorspace_t"@
-}
data Sk_colorspace = Sk_colorspace

{- | Opaque C struct: @"sk_stream_t"@
-}
data Sk_stream = Sk_stream

{- | Opaque C struct: @"sk_stream_filestream_t"@
-}
data Sk_stream_filestream = Sk_stream_filestream

{- | Opaque C struct: @"sk_stream_asset_t"@
-}
data Sk_stream_asset = Sk_stream_asset

{- | Opaque C struct: @"sk_stream_memorystream_t"@
-}
data Sk_stream_memorystream = Sk_stream_memorystream

{- | Opaque C struct: @"sk_stream_streamrewindable_t"@
-}
data Sk_stream_streamrewindable = Sk_stream_streamrewindable

{- | Opaque C struct: @"sk_wstream_t"@
-}
data Sk_wstream = Sk_wstream

{- | Opaque C struct: @"sk_wstream_filestream_t"@
-}
data Sk_wstream_filestream = Sk_wstream_filestream

{- | Opaque C struct: @"sk_wstream_dynamicmemorystream_t"@
-}
data Sk_wstream_dynamicmemorystream = Sk_wstream_dynamicmemorystream

{- | Opaque C struct: @"sk_document_t"@
-}
data Sk_document = Sk_document

{- | C enum: @"sk_point_mode_t"@

@
typedef enum 
{
  POINTS_SK_POINT_MODE,
  LINES_SK_POINT_MODE,
  POLYGON_SK_POINT_MODE
} sk_point_mode_t
@

-}
newtype Sk_point_mode = Sk_point_mode (#type sk_point_mode_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_point_mode_t"@ value (1/3): @"POINTS_SK_POINT_MODE"@
pattern POINTS_SK_POINT_MODE :: Sk_point_mode
pattern POINTS_SK_POINT_MODE = (#const POINTS_SK_POINT_MODE)

-- | C enum @"sk_point_mode_t"@ value (2/3): @"LINES_SK_POINT_MODE"@
pattern LINES_SK_POINT_MODE :: Sk_point_mode
pattern LINES_SK_POINT_MODE = (#const LINES_SK_POINT_MODE)

-- | C enum @"sk_point_mode_t"@ value (3/3): @"POLYGON_SK_POINT_MODE"@
pattern POLYGON_SK_POINT_MODE :: Sk_point_mode
pattern POLYGON_SK_POINT_MODE = (#const POLYGON_SK_POINT_MODE)

{- | C enum: @"sk_text_align_t"@

@
typedef enum 
{
  LEFT_SK_TEXT_ALIGN,
  CENTER_SK_TEXT_ALIGN,
  RIGHT_SK_TEXT_ALIGN
} sk_text_align_t
@

-}
newtype Sk_text_align = Sk_text_align (#type sk_text_align_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_text_align_t"@ value (1/3): @"LEFT_SK_TEXT_ALIGN"@
pattern LEFT_SK_TEXT_ALIGN :: Sk_text_align
pattern LEFT_SK_TEXT_ALIGN = (#const LEFT_SK_TEXT_ALIGN)

-- | C enum @"sk_text_align_t"@ value (2/3): @"CENTER_SK_TEXT_ALIGN"@
pattern CENTER_SK_TEXT_ALIGN :: Sk_text_align
pattern CENTER_SK_TEXT_ALIGN = (#const CENTER_SK_TEXT_ALIGN)

-- | C enum @"sk_text_align_t"@ value (3/3): @"RIGHT_SK_TEXT_ALIGN"@
pattern RIGHT_SK_TEXT_ALIGN :: Sk_text_align
pattern RIGHT_SK_TEXT_ALIGN = (#const RIGHT_SK_TEXT_ALIGN)

{- | C enum: @"sk_text_encoding_t"@

@
typedef enum 
{
  UTF8_SK_TEXT_ENCODING,
  UTF16_SK_TEXT_ENCODING,
  UTF32_SK_TEXT_ENCODING,
  GLYPH_ID_SK_TEXT_ENCODING
} sk_text_encoding_t
@

-}
newtype Sk_text_encoding = Sk_text_encoding (#type sk_text_encoding_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_text_encoding_t"@ value (1/4): @"UTF8_SK_TEXT_ENCODING"@
pattern UTF8_SK_TEXT_ENCODING :: Sk_text_encoding
pattern UTF8_SK_TEXT_ENCODING = (#const UTF8_SK_TEXT_ENCODING)

-- | C enum @"sk_text_encoding_t"@ value (2/4): @"UTF16_SK_TEXT_ENCODING"@
pattern UTF16_SK_TEXT_ENCODING :: Sk_text_encoding
pattern UTF16_SK_TEXT_ENCODING = (#const UTF16_SK_TEXT_ENCODING)

-- | C enum @"sk_text_encoding_t"@ value (3/4): @"UTF32_SK_TEXT_ENCODING"@
pattern UTF32_SK_TEXT_ENCODING :: Sk_text_encoding
pattern UTF32_SK_TEXT_ENCODING = (#const UTF32_SK_TEXT_ENCODING)

-- | C enum @"sk_text_encoding_t"@ value (4/4): @"GLYPH_ID_SK_TEXT_ENCODING"@
pattern GLYPH_ID_SK_TEXT_ENCODING :: Sk_text_encoding
pattern GLYPH_ID_SK_TEXT_ENCODING = (#const GLYPH_ID_SK_TEXT_ENCODING)

{- | C enum: @"sk_path_filltype_t"@

@
typedef enum 
{
  WINDING_SK_PATH_FILLTYPE,
  EVENODD_SK_PATH_FILLTYPE,
  INVERSE_WINDING_SK_PATH_FILLTYPE,
  INVERSE_EVENODD_SK_PATH_FILLTYPE
} sk_path_filltype_t
@

-}
newtype Sk_path_filltype = Sk_path_filltype (#type sk_path_filltype_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_path_filltype_t"@ value (1/4): @"WINDING_SK_PATH_FILLTYPE"@
pattern WINDING_SK_PATH_FILLTYPE :: Sk_path_filltype
pattern WINDING_SK_PATH_FILLTYPE = (#const WINDING_SK_PATH_FILLTYPE)

-- | C enum @"sk_path_filltype_t"@ value (2/4): @"EVENODD_SK_PATH_FILLTYPE"@
pattern EVENODD_SK_PATH_FILLTYPE :: Sk_path_filltype
pattern EVENODD_SK_PATH_FILLTYPE = (#const EVENODD_SK_PATH_FILLTYPE)

-- | C enum @"sk_path_filltype_t"@ value (3/4): @"INVERSE_WINDING_SK_PATH_FILLTYPE"@
pattern INVERSE_WINDING_SK_PATH_FILLTYPE :: Sk_path_filltype
pattern INVERSE_WINDING_SK_PATH_FILLTYPE = (#const INVERSE_WINDING_SK_PATH_FILLTYPE)

-- | C enum @"sk_path_filltype_t"@ value (4/4): @"INVERSE_EVENODD_SK_PATH_FILLTYPE"@
pattern INVERSE_EVENODD_SK_PATH_FILLTYPE :: Sk_path_filltype
pattern INVERSE_EVENODD_SK_PATH_FILLTYPE = (#const INVERSE_EVENODD_SK_PATH_FILLTYPE)

{- | C enum: @"sk_font_style_slant_t"@

@
typedef enum 
{
  UPRIGHT_SK_FONT_STYLE_SLANT = 0,
  ITALIC_SK_FONT_STYLE_SLANT = 1,
  OBLIQUE_SK_FONT_STYLE_SLANT = 2
} sk_font_style_slant_t
@

-}
newtype Sk_font_style_slant = Sk_font_style_slant (#type sk_font_style_slant_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_font_style_slant_t"@ value (1/3): @"UPRIGHT_SK_FONT_STYLE_SLANT"@
pattern UPRIGHT_SK_FONT_STYLE_SLANT :: Sk_font_style_slant
pattern UPRIGHT_SK_FONT_STYLE_SLANT = (#const UPRIGHT_SK_FONT_STYLE_SLANT)

-- | C enum @"sk_font_style_slant_t"@ value (2/3): @"ITALIC_SK_FONT_STYLE_SLANT"@
pattern ITALIC_SK_FONT_STYLE_SLANT :: Sk_font_style_slant
pattern ITALIC_SK_FONT_STYLE_SLANT = (#const ITALIC_SK_FONT_STYLE_SLANT)

-- | C enum @"sk_font_style_slant_t"@ value (3/3): @"OBLIQUE_SK_FONT_STYLE_SLANT"@
pattern OBLIQUE_SK_FONT_STYLE_SLANT :: Sk_font_style_slant
pattern OBLIQUE_SK_FONT_STYLE_SLANT = (#const OBLIQUE_SK_FONT_STYLE_SLANT)

{- | C enum: @"sk_color_channel_t"@

@
typedef enum 
{
  R_SK_COLOR_CHANNEL,
  G_SK_COLOR_CHANNEL,
  B_SK_COLOR_CHANNEL,
  A_SK_COLOR_CHANNEL
} sk_color_channel_t
@

-}
newtype Sk_color_channel = Sk_color_channel (#type sk_color_channel_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_color_channel_t"@ value (1/4): @"R_SK_COLOR_CHANNEL"@
pattern R_SK_COLOR_CHANNEL :: Sk_color_channel
pattern R_SK_COLOR_CHANNEL = (#const R_SK_COLOR_CHANNEL)

-- | C enum @"sk_color_channel_t"@ value (2/4): @"G_SK_COLOR_CHANNEL"@
pattern G_SK_COLOR_CHANNEL :: Sk_color_channel
pattern G_SK_COLOR_CHANNEL = (#const G_SK_COLOR_CHANNEL)

-- | C enum @"sk_color_channel_t"@ value (3/4): @"B_SK_COLOR_CHANNEL"@
pattern B_SK_COLOR_CHANNEL :: Sk_color_channel
pattern B_SK_COLOR_CHANNEL = (#const B_SK_COLOR_CHANNEL)

-- | C enum @"sk_color_channel_t"@ value (4/4): @"A_SK_COLOR_CHANNEL"@
pattern A_SK_COLOR_CHANNEL :: Sk_color_channel
pattern A_SK_COLOR_CHANNEL = (#const A_SK_COLOR_CHANNEL)

{- | C enum: @"sk_region_op_t"@

@
typedef enum 
{
  DIFFERENCE_SK_REGION_OP,
  INTERSECT_SK_REGION_OP,
  UNION_SK_REGION_OP,
  XOR_SK_REGION_OP,
  REVERSE_DIFFERENCE_SK_REGION_OP,
  REPLACE_SK_REGION_OP
} sk_region_op_t
@

-}
newtype Sk_region_op = Sk_region_op (#type sk_region_op_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_region_op_t"@ value (1/6): @"DIFFERENCE_SK_REGION_OP"@
pattern DIFFERENCE_SK_REGION_OP :: Sk_region_op
pattern DIFFERENCE_SK_REGION_OP = (#const DIFFERENCE_SK_REGION_OP)

-- | C enum @"sk_region_op_t"@ value (2/6): @"INTERSECT_SK_REGION_OP"@
pattern INTERSECT_SK_REGION_OP :: Sk_region_op
pattern INTERSECT_SK_REGION_OP = (#const INTERSECT_SK_REGION_OP)

-- | C enum @"sk_region_op_t"@ value (3/6): @"UNION_SK_REGION_OP"@
pattern UNION_SK_REGION_OP :: Sk_region_op
pattern UNION_SK_REGION_OP = (#const UNION_SK_REGION_OP)

-- | C enum @"sk_region_op_t"@ value (4/6): @"XOR_SK_REGION_OP"@
pattern XOR_SK_REGION_OP :: Sk_region_op
pattern XOR_SK_REGION_OP = (#const XOR_SK_REGION_OP)

-- | C enum @"sk_region_op_t"@ value (5/6): @"REVERSE_DIFFERENCE_SK_REGION_OP"@
pattern REVERSE_DIFFERENCE_SK_REGION_OP :: Sk_region_op
pattern REVERSE_DIFFERENCE_SK_REGION_OP = (#const REVERSE_DIFFERENCE_SK_REGION_OP)

-- | C enum @"sk_region_op_t"@ value (6/6): @"REPLACE_SK_REGION_OP"@
pattern REPLACE_SK_REGION_OP :: Sk_region_op
pattern REPLACE_SK_REGION_OP = (#const REPLACE_SK_REGION_OP)

{- | C enum: @"sk_clipop_t"@

@
typedef enum 
{
  DIFFERENCE_SK_CLIPOP,
  INTERSECT_SK_CLIPOP
} sk_clipop_t
@

-}
newtype Sk_clipop = Sk_clipop (#type sk_clipop_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_clipop_t"@ value (1/2): @"DIFFERENCE_SK_CLIPOP"@
pattern DIFFERENCE_SK_CLIPOP :: Sk_clipop
pattern DIFFERENCE_SK_CLIPOP = (#const DIFFERENCE_SK_CLIPOP)

-- | C enum @"sk_clipop_t"@ value (2/2): @"INTERSECT_SK_CLIPOP"@
pattern INTERSECT_SK_CLIPOP :: Sk_clipop
pattern INTERSECT_SK_CLIPOP = (#const INTERSECT_SK_CLIPOP)

{- | C enum: @"sk_encoded_image_format_t"@

@
typedef enum 
{
  BMP_SK_ENCODED_FORMAT,
  GIF_SK_ENCODED_FORMAT,
  ICO_SK_ENCODED_FORMAT,
  JPEG_SK_ENCODED_FORMAT,
  PNG_SK_ENCODED_FORMAT,
  WBMP_SK_ENCODED_FORMAT,
  WEBP_SK_ENCODED_FORMAT,
  PKM_SK_ENCODED_FORMAT,
  KTX_SK_ENCODED_FORMAT,
  ASTC_SK_ENCODED_FORMAT,
  DNG_SK_ENCODED_FORMAT,
  HEIF_SK_ENCODED_FORMAT,
  AVIF_SK_ENCODED_FORMAT,
  JPEGXL_SK_ENCODED_FORMAT
} sk_encoded_image_format_t
@

-}
newtype Sk_encoded_image_format = Sk_encoded_image_format (#type sk_encoded_image_format_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_encoded_image_format_t"@ value (1/14): @"BMP_SK_ENCODED_FORMAT"@
pattern BMP_SK_ENCODED_FORMAT :: Sk_encoded_image_format
pattern BMP_SK_ENCODED_FORMAT = (#const BMP_SK_ENCODED_FORMAT)

-- | C enum @"sk_encoded_image_format_t"@ value (2/14): @"GIF_SK_ENCODED_FORMAT"@
pattern GIF_SK_ENCODED_FORMAT :: Sk_encoded_image_format
pattern GIF_SK_ENCODED_FORMAT = (#const GIF_SK_ENCODED_FORMAT)

-- | C enum @"sk_encoded_image_format_t"@ value (3/14): @"ICO_SK_ENCODED_FORMAT"@
pattern ICO_SK_ENCODED_FORMAT :: Sk_encoded_image_format
pattern ICO_SK_ENCODED_FORMAT = (#const ICO_SK_ENCODED_FORMAT)

-- | C enum @"sk_encoded_image_format_t"@ value (4/14): @"JPEG_SK_ENCODED_FORMAT"@
pattern JPEG_SK_ENCODED_FORMAT :: Sk_encoded_image_format
pattern JPEG_SK_ENCODED_FORMAT = (#const JPEG_SK_ENCODED_FORMAT)

-- | C enum @"sk_encoded_image_format_t"@ value (5/14): @"PNG_SK_ENCODED_FORMAT"@
pattern PNG_SK_ENCODED_FORMAT :: Sk_encoded_image_format
pattern PNG_SK_ENCODED_FORMAT = (#const PNG_SK_ENCODED_FORMAT)

-- | C enum @"sk_encoded_image_format_t"@ value (6/14): @"WBMP_SK_ENCODED_FORMAT"@
pattern WBMP_SK_ENCODED_FORMAT :: Sk_encoded_image_format
pattern WBMP_SK_ENCODED_FORMAT = (#const WBMP_SK_ENCODED_FORMAT)

-- | C enum @"sk_encoded_image_format_t"@ value (7/14): @"WEBP_SK_ENCODED_FORMAT"@
pattern WEBP_SK_ENCODED_FORMAT :: Sk_encoded_image_format
pattern WEBP_SK_ENCODED_FORMAT = (#const WEBP_SK_ENCODED_FORMAT)

-- | C enum @"sk_encoded_image_format_t"@ value (8/14): @"PKM_SK_ENCODED_FORMAT"@
pattern PKM_SK_ENCODED_FORMAT :: Sk_encoded_image_format
pattern PKM_SK_ENCODED_FORMAT = (#const PKM_SK_ENCODED_FORMAT)

-- | C enum @"sk_encoded_image_format_t"@ value (9/14): @"KTX_SK_ENCODED_FORMAT"@
pattern KTX_SK_ENCODED_FORMAT :: Sk_encoded_image_format
pattern KTX_SK_ENCODED_FORMAT = (#const KTX_SK_ENCODED_FORMAT)

-- | C enum @"sk_encoded_image_format_t"@ value (10/14): @"ASTC_SK_ENCODED_FORMAT"@
pattern ASTC_SK_ENCODED_FORMAT :: Sk_encoded_image_format
pattern ASTC_SK_ENCODED_FORMAT = (#const ASTC_SK_ENCODED_FORMAT)

-- | C enum @"sk_encoded_image_format_t"@ value (11/14): @"DNG_SK_ENCODED_FORMAT"@
pattern DNG_SK_ENCODED_FORMAT :: Sk_encoded_image_format
pattern DNG_SK_ENCODED_FORMAT = (#const DNG_SK_ENCODED_FORMAT)

-- | C enum @"sk_encoded_image_format_t"@ value (12/14): @"HEIF_SK_ENCODED_FORMAT"@
pattern HEIF_SK_ENCODED_FORMAT :: Sk_encoded_image_format
pattern HEIF_SK_ENCODED_FORMAT = (#const HEIF_SK_ENCODED_FORMAT)

-- | C enum @"sk_encoded_image_format_t"@ value (13/14): @"AVIF_SK_ENCODED_FORMAT"@
pattern AVIF_SK_ENCODED_FORMAT :: Sk_encoded_image_format
pattern AVIF_SK_ENCODED_FORMAT = (#const AVIF_SK_ENCODED_FORMAT)

-- | C enum @"sk_encoded_image_format_t"@ value (14/14): @"JPEGXL_SK_ENCODED_FORMAT"@
pattern JPEGXL_SK_ENCODED_FORMAT :: Sk_encoded_image_format
pattern JPEGXL_SK_ENCODED_FORMAT = (#const JPEGXL_SK_ENCODED_FORMAT)

{- | C enum: @"sk_encodedorigin_t"@

@
typedef enum 
{
  TOP_LEFT_SK_ENCODED_ORIGIN = 1,
  TOP_RIGHT_SK_ENCODED_ORIGIN = 2,
  BOTTOM_RIGHT_SK_ENCODED_ORIGIN = 3,
  BOTTOM_LEFT_SK_ENCODED_ORIGIN = 4,
  LEFT_TOP_SK_ENCODED_ORIGIN = 5,
  RIGHT_TOP_SK_ENCODED_ORIGIN = 6,
  RIGHT_BOTTOM_SK_ENCODED_ORIGIN = 7,
  LEFT_BOTTOM_SK_ENCODED_ORIGIN = 8,
  DEFAULT_SK_ENCODED_ORIGIN = TOP_LEFT_SK_ENCODED_ORIGIN
} sk_encodedorigin_t
@

-}
newtype Sk_encodedorigin = Sk_encodedorigin (#type sk_encodedorigin_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_encodedorigin_t"@ value (1/9): @"TOP_LEFT_SK_ENCODED_ORIGIN"@
pattern TOP_LEFT_SK_ENCODED_ORIGIN :: Sk_encodedorigin
pattern TOP_LEFT_SK_ENCODED_ORIGIN = (#const TOP_LEFT_SK_ENCODED_ORIGIN)

-- | C enum @"sk_encodedorigin_t"@ value (2/9): @"TOP_RIGHT_SK_ENCODED_ORIGIN"@
pattern TOP_RIGHT_SK_ENCODED_ORIGIN :: Sk_encodedorigin
pattern TOP_RIGHT_SK_ENCODED_ORIGIN = (#const TOP_RIGHT_SK_ENCODED_ORIGIN)

-- | C enum @"sk_encodedorigin_t"@ value (3/9): @"BOTTOM_RIGHT_SK_ENCODED_ORIGIN"@
pattern BOTTOM_RIGHT_SK_ENCODED_ORIGIN :: Sk_encodedorigin
pattern BOTTOM_RIGHT_SK_ENCODED_ORIGIN = (#const BOTTOM_RIGHT_SK_ENCODED_ORIGIN)

-- | C enum @"sk_encodedorigin_t"@ value (4/9): @"BOTTOM_LEFT_SK_ENCODED_ORIGIN"@
pattern BOTTOM_LEFT_SK_ENCODED_ORIGIN :: Sk_encodedorigin
pattern BOTTOM_LEFT_SK_ENCODED_ORIGIN = (#const BOTTOM_LEFT_SK_ENCODED_ORIGIN)

-- | C enum @"sk_encodedorigin_t"@ value (5/9): @"LEFT_TOP_SK_ENCODED_ORIGIN"@
pattern LEFT_TOP_SK_ENCODED_ORIGIN :: Sk_encodedorigin
pattern LEFT_TOP_SK_ENCODED_ORIGIN = (#const LEFT_TOP_SK_ENCODED_ORIGIN)

-- | C enum @"sk_encodedorigin_t"@ value (6/9): @"RIGHT_TOP_SK_ENCODED_ORIGIN"@
pattern RIGHT_TOP_SK_ENCODED_ORIGIN :: Sk_encodedorigin
pattern RIGHT_TOP_SK_ENCODED_ORIGIN = (#const RIGHT_TOP_SK_ENCODED_ORIGIN)

-- | C enum @"sk_encodedorigin_t"@ value (7/9): @"RIGHT_BOTTOM_SK_ENCODED_ORIGIN"@
pattern RIGHT_BOTTOM_SK_ENCODED_ORIGIN :: Sk_encodedorigin
pattern RIGHT_BOTTOM_SK_ENCODED_ORIGIN = (#const RIGHT_BOTTOM_SK_ENCODED_ORIGIN)

-- | C enum @"sk_encodedorigin_t"@ value (8/9): @"LEFT_BOTTOM_SK_ENCODED_ORIGIN"@
pattern LEFT_BOTTOM_SK_ENCODED_ORIGIN :: Sk_encodedorigin
pattern LEFT_BOTTOM_SK_ENCODED_ORIGIN = (#const LEFT_BOTTOM_SK_ENCODED_ORIGIN)

-- | C enum @"sk_encodedorigin_t"@ value (9/9): @"DEFAULT_SK_ENCODED_ORIGIN"@
pattern DEFAULT_SK_ENCODED_ORIGIN :: Sk_encodedorigin
pattern DEFAULT_SK_ENCODED_ORIGIN = (#const DEFAULT_SK_ENCODED_ORIGIN)

{- | C enum: @"sk_codec_result_t"@

@
typedef enum 
{
  SUCCESS_SK_CODEC_RESULT,
  INCOMPLETE_INPUT_SK_CODEC_RESULT,
  ERROR_IN_INPUT_SK_CODEC_RESULT,
  INVALID_CONVERSION_SK_CODEC_RESULT,
  INVALID_SCALE_SK_CODEC_RESULT,
  INVALID_PARAMETERS_SK_CODEC_RESULT,
  INVALID_INPUT_SK_CODEC_RESULT,
  COULD_NOT_REWIND_SK_CODEC_RESULT,
  INTERNAL_ERROR_SK_CODEC_RESULT,
  UNIMPLEMENTED_SK_CODEC_RESULT
} sk_codec_result_t
@

-}
newtype Sk_codec_result = Sk_codec_result (#type sk_codec_result_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_codec_result_t"@ value (1/10): @"SUCCESS_SK_CODEC_RESULT"@
pattern SUCCESS_SK_CODEC_RESULT :: Sk_codec_result
pattern SUCCESS_SK_CODEC_RESULT = (#const SUCCESS_SK_CODEC_RESULT)

-- | C enum @"sk_codec_result_t"@ value (2/10): @"INCOMPLETE_INPUT_SK_CODEC_RESULT"@
pattern INCOMPLETE_INPUT_SK_CODEC_RESULT :: Sk_codec_result
pattern INCOMPLETE_INPUT_SK_CODEC_RESULT = (#const INCOMPLETE_INPUT_SK_CODEC_RESULT)

-- | C enum @"sk_codec_result_t"@ value (3/10): @"ERROR_IN_INPUT_SK_CODEC_RESULT"@
pattern ERROR_IN_INPUT_SK_CODEC_RESULT :: Sk_codec_result
pattern ERROR_IN_INPUT_SK_CODEC_RESULT = (#const ERROR_IN_INPUT_SK_CODEC_RESULT)

-- | C enum @"sk_codec_result_t"@ value (4/10): @"INVALID_CONVERSION_SK_CODEC_RESULT"@
pattern INVALID_CONVERSION_SK_CODEC_RESULT :: Sk_codec_result
pattern INVALID_CONVERSION_SK_CODEC_RESULT = (#const INVALID_CONVERSION_SK_CODEC_RESULT)

-- | C enum @"sk_codec_result_t"@ value (5/10): @"INVALID_SCALE_SK_CODEC_RESULT"@
pattern INVALID_SCALE_SK_CODEC_RESULT :: Sk_codec_result
pattern INVALID_SCALE_SK_CODEC_RESULT = (#const INVALID_SCALE_SK_CODEC_RESULT)

-- | C enum @"sk_codec_result_t"@ value (6/10): @"INVALID_PARAMETERS_SK_CODEC_RESULT"@
pattern INVALID_PARAMETERS_SK_CODEC_RESULT :: Sk_codec_result
pattern INVALID_PARAMETERS_SK_CODEC_RESULT = (#const INVALID_PARAMETERS_SK_CODEC_RESULT)

-- | C enum @"sk_codec_result_t"@ value (7/10): @"INVALID_INPUT_SK_CODEC_RESULT"@
pattern INVALID_INPUT_SK_CODEC_RESULT :: Sk_codec_result
pattern INVALID_INPUT_SK_CODEC_RESULT = (#const INVALID_INPUT_SK_CODEC_RESULT)

-- | C enum @"sk_codec_result_t"@ value (8/10): @"COULD_NOT_REWIND_SK_CODEC_RESULT"@
pattern COULD_NOT_REWIND_SK_CODEC_RESULT :: Sk_codec_result
pattern COULD_NOT_REWIND_SK_CODEC_RESULT = (#const COULD_NOT_REWIND_SK_CODEC_RESULT)

-- | C enum @"sk_codec_result_t"@ value (9/10): @"INTERNAL_ERROR_SK_CODEC_RESULT"@
pattern INTERNAL_ERROR_SK_CODEC_RESULT :: Sk_codec_result
pattern INTERNAL_ERROR_SK_CODEC_RESULT = (#const INTERNAL_ERROR_SK_CODEC_RESULT)

-- | C enum @"sk_codec_result_t"@ value (10/10): @"UNIMPLEMENTED_SK_CODEC_RESULT"@
pattern UNIMPLEMENTED_SK_CODEC_RESULT :: Sk_codec_result
pattern UNIMPLEMENTED_SK_CODEC_RESULT = (#const UNIMPLEMENTED_SK_CODEC_RESULT)

{- | C enum: @"sk_codec_zero_initialized_t"@

@
typedef enum 
{
  YES_SK_CODEC_ZERO_INITIALIZED,
  NO_SK_CODEC_ZERO_INITIALIZED
} sk_codec_zero_initialized_t
@

-}
newtype Sk_codec_zero_initialized = Sk_codec_zero_initialized (#type sk_codec_zero_initialized_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_codec_zero_initialized_t"@ value (1/2): @"YES_SK_CODEC_ZERO_INITIALIZED"@
pattern YES_SK_CODEC_ZERO_INITIALIZED :: Sk_codec_zero_initialized
pattern YES_SK_CODEC_ZERO_INITIALIZED = (#const YES_SK_CODEC_ZERO_INITIALIZED)

-- | C enum @"sk_codec_zero_initialized_t"@ value (2/2): @"NO_SK_CODEC_ZERO_INITIALIZED"@
pattern NO_SK_CODEC_ZERO_INITIALIZED :: Sk_codec_zero_initialized
pattern NO_SK_CODEC_ZERO_INITIALIZED = (#const NO_SK_CODEC_ZERO_INITIALIZED)

{- | C struct: @"sk_codec_options_t"@

@
typedef struct 
{
  sk_codec_zero_initialized_t fZeroInitialized;
  sk_irect_t *fSubset;
  int fFrameIndex;
  int fPriorFrame;
} sk_codec_options_t
@
-}
data Sk_codec_options = Sk_codec_options
  { fZeroInitialized :: Sk_codec_zero_initialized -- ^ C field: @"sk_codec_zero_initialized_t fZeroInitialized"@
  , fSubset :: Ptr (Sk_irect) -- ^ C field: @"sk_irect_t *fSubset"@
  , fFrameIndex :: CInt -- ^ C field: @"int fFrameIndex"@
  , fPriorFrame :: CInt -- ^ C field: @"int fPriorFrame"@
  }
instance Foreign.Storable.Offset.Offset "fZeroInitialized" Sk_codec_options where
  rawOffset = (#offset sk_codec_options_t, fZeroInitialized)
instance Foreign.Storable.Offset.Offset "fSubset" Sk_codec_options where
  rawOffset = (#offset sk_codec_options_t, fSubset)
instance Foreign.Storable.Offset.Offset "fFrameIndex" Sk_codec_options where
  rawOffset = (#offset sk_codec_options_t, fFrameIndex)
instance Foreign.Storable.Offset.Offset "fPriorFrame" Sk_codec_options where
  rawOffset = (#offset sk_codec_options_t, fPriorFrame)
instance Foreign.Storable.Storable Sk_codec_options where
  sizeOf _ = (#size sk_codec_options_t)
  alignment _ = (#alignment sk_codec_options_t)
  peek p' = do
    fZeroInitialized <- (#peek sk_codec_options_t, fZeroInitialized) p'
    fSubset <- (#peek sk_codec_options_t, fSubset) p'
    fFrameIndex <- (#peek sk_codec_options_t, fFrameIndex) p'
    fPriorFrame <- (#peek sk_codec_options_t, fPriorFrame) p'
    pure Sk_codec_options{..}
  poke p' Sk_codec_options{..} = do
    (#poke sk_codec_options_t, fZeroInitialized) p' fZeroInitialized
    (#poke sk_codec_options_t, fSubset) p' fSubset
    (#poke sk_codec_options_t, fFrameIndex) p' fFrameIndex
    (#poke sk_codec_options_t, fPriorFrame) p' fPriorFrame

{- | C enum: @"sk_codec_scanline_order_t"@

@
typedef enum 
{
  TOP_DOWN_SK_CODEC_SCANLINE_ORDER,
  BOTTOM_UP_SK_CODEC_SCANLINE_ORDER
} sk_codec_scanline_order_t
@

-}
newtype Sk_codec_scanline_order = Sk_codec_scanline_order (#type sk_codec_scanline_order_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_codec_scanline_order_t"@ value (1/2): @"TOP_DOWN_SK_CODEC_SCANLINE_ORDER"@
pattern TOP_DOWN_SK_CODEC_SCANLINE_ORDER :: Sk_codec_scanline_order
pattern TOP_DOWN_SK_CODEC_SCANLINE_ORDER = (#const TOP_DOWN_SK_CODEC_SCANLINE_ORDER)

-- | C enum @"sk_codec_scanline_order_t"@ value (2/2): @"BOTTOM_UP_SK_CODEC_SCANLINE_ORDER"@
pattern BOTTOM_UP_SK_CODEC_SCANLINE_ORDER :: Sk_codec_scanline_order
pattern BOTTOM_UP_SK_CODEC_SCANLINE_ORDER = (#const BOTTOM_UP_SK_CODEC_SCANLINE_ORDER)

{- | C enum: @"sk_path_verb_t"@

@
typedef enum 
{
  MOVE_SK_PATH_VERB,
  LINE_SK_PATH_VERB,
  QUAD_SK_PATH_VERB,
  CONIC_SK_PATH_VERB,
  CUBIC_SK_PATH_VERB,
  CLOSE_SK_PATH_VERB,
  DONE_SK_PATH_VERB
} sk_path_verb_t
@

-}
newtype Sk_path_verb = Sk_path_verb (#type sk_path_verb_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_path_verb_t"@ value (1/7): @"MOVE_SK_PATH_VERB"@
pattern MOVE_SK_PATH_VERB :: Sk_path_verb
pattern MOVE_SK_PATH_VERB = (#const MOVE_SK_PATH_VERB)

-- | C enum @"sk_path_verb_t"@ value (2/7): @"LINE_SK_PATH_VERB"@
pattern LINE_SK_PATH_VERB :: Sk_path_verb
pattern LINE_SK_PATH_VERB = (#const LINE_SK_PATH_VERB)

-- | C enum @"sk_path_verb_t"@ value (3/7): @"QUAD_SK_PATH_VERB"@
pattern QUAD_SK_PATH_VERB :: Sk_path_verb
pattern QUAD_SK_PATH_VERB = (#const QUAD_SK_PATH_VERB)

-- | C enum @"sk_path_verb_t"@ value (4/7): @"CONIC_SK_PATH_VERB"@
pattern CONIC_SK_PATH_VERB :: Sk_path_verb
pattern CONIC_SK_PATH_VERB = (#const CONIC_SK_PATH_VERB)

-- | C enum @"sk_path_verb_t"@ value (5/7): @"CUBIC_SK_PATH_VERB"@
pattern CUBIC_SK_PATH_VERB :: Sk_path_verb
pattern CUBIC_SK_PATH_VERB = (#const CUBIC_SK_PATH_VERB)

-- | C enum @"sk_path_verb_t"@ value (6/7): @"CLOSE_SK_PATH_VERB"@
pattern CLOSE_SK_PATH_VERB :: Sk_path_verb
pattern CLOSE_SK_PATH_VERB = (#const CLOSE_SK_PATH_VERB)

-- | C enum @"sk_path_verb_t"@ value (7/7): @"DONE_SK_PATH_VERB"@
pattern DONE_SK_PATH_VERB :: Sk_path_verb
pattern DONE_SK_PATH_VERB = (#const DONE_SK_PATH_VERB)

{- | Opaque C struct: @"sk_path_iterator_t"@
-}
data Sk_path_iterator = Sk_path_iterator

{- | Opaque C struct: @"sk_path_rawiterator_t"@
-}
data Sk_path_rawiterator = Sk_path_rawiterator

{- | C enum: @"sk_path_add_mode_t"@

@
typedef enum 
{
  APPEND_SK_PATH_ADD_MODE,
  EXTEND_SK_PATH_ADD_MODE
} sk_path_add_mode_t
@

-}
newtype Sk_path_add_mode = Sk_path_add_mode (#type sk_path_add_mode_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_path_add_mode_t"@ value (1/2): @"APPEND_SK_PATH_ADD_MODE"@
pattern APPEND_SK_PATH_ADD_MODE :: Sk_path_add_mode
pattern APPEND_SK_PATH_ADD_MODE = (#const APPEND_SK_PATH_ADD_MODE)

-- | C enum @"sk_path_add_mode_t"@ value (2/2): @"EXTEND_SK_PATH_ADD_MODE"@
pattern EXTEND_SK_PATH_ADD_MODE :: Sk_path_add_mode
pattern EXTEND_SK_PATH_ADD_MODE = (#const EXTEND_SK_PATH_ADD_MODE)

{- | C enum: @"sk_path_segment_mask_t"@

@
typedef enum 
{
  LINE_SK_PATH_SEGMENT_MASK = 1 << 0,
  QUAD_SK_PATH_SEGMENT_MASK = 1 << 1,
  CONIC_SK_PATH_SEGMENT_MASK = 1 << 2,
  CUBIC_SK_PATH_SEGMENT_MASK = 1 << 3
} sk_path_segment_mask_t
@

-}
newtype Sk_path_segment_mask = Sk_path_segment_mask (#type sk_path_segment_mask_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_path_segment_mask_t"@ value (1/4): @"LINE_SK_PATH_SEGMENT_MASK"@
pattern LINE_SK_PATH_SEGMENT_MASK :: Sk_path_segment_mask
pattern LINE_SK_PATH_SEGMENT_MASK = (#const LINE_SK_PATH_SEGMENT_MASK)

-- | C enum @"sk_path_segment_mask_t"@ value (2/4): @"QUAD_SK_PATH_SEGMENT_MASK"@
pattern QUAD_SK_PATH_SEGMENT_MASK :: Sk_path_segment_mask
pattern QUAD_SK_PATH_SEGMENT_MASK = (#const QUAD_SK_PATH_SEGMENT_MASK)

-- | C enum @"sk_path_segment_mask_t"@ value (3/4): @"CONIC_SK_PATH_SEGMENT_MASK"@
pattern CONIC_SK_PATH_SEGMENT_MASK :: Sk_path_segment_mask
pattern CONIC_SK_PATH_SEGMENT_MASK = (#const CONIC_SK_PATH_SEGMENT_MASK)

-- | C enum @"sk_path_segment_mask_t"@ value (4/4): @"CUBIC_SK_PATH_SEGMENT_MASK"@
pattern CUBIC_SK_PATH_SEGMENT_MASK :: Sk_path_segment_mask
pattern CUBIC_SK_PATH_SEGMENT_MASK = (#const CUBIC_SK_PATH_SEGMENT_MASK)

{- | C enum: @"sk_path_effect_1d_style_t"@

@
typedef enum 
{
  TRANSLATE_SK_PATH_EFFECT_1D_STYLE,
  ROTATE_SK_PATH_EFFECT_1D_STYLE,
  MORPH_SK_PATH_EFFECT_1D_STYLE
} sk_path_effect_1d_style_t
@

-}
newtype Sk_path_effect_1d_style = Sk_path_effect_1d_style (#type sk_path_effect_1d_style_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_path_effect_1d_style_t"@ value (1/3): @"TRANSLATE_SK_PATH_EFFECT_1D_STYLE"@
pattern TRANSLATE_SK_PATH_EFFECT_1D_STYLE :: Sk_path_effect_1d_style
pattern TRANSLATE_SK_PATH_EFFECT_1D_STYLE = (#const TRANSLATE_SK_PATH_EFFECT_1D_STYLE)

-- | C enum @"sk_path_effect_1d_style_t"@ value (2/3): @"ROTATE_SK_PATH_EFFECT_1D_STYLE"@
pattern ROTATE_SK_PATH_EFFECT_1D_STYLE :: Sk_path_effect_1d_style
pattern ROTATE_SK_PATH_EFFECT_1D_STYLE = (#const ROTATE_SK_PATH_EFFECT_1D_STYLE)

-- | C enum @"sk_path_effect_1d_style_t"@ value (3/3): @"MORPH_SK_PATH_EFFECT_1D_STYLE"@
pattern MORPH_SK_PATH_EFFECT_1D_STYLE :: Sk_path_effect_1d_style
pattern MORPH_SK_PATH_EFFECT_1D_STYLE = (#const MORPH_SK_PATH_EFFECT_1D_STYLE)

{- | C enum: @"sk_path_effect_trim_mode_t"@

@
typedef enum 
{
  NORMAL_SK_PATH_EFFECT_TRIM_MODE,
  INVERTED_SK_PATH_EFFECT_TRIM_MODE
} sk_path_effect_trim_mode_t
@

-}
newtype Sk_path_effect_trim_mode = Sk_path_effect_trim_mode (#type sk_path_effect_trim_mode_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_path_effect_trim_mode_t"@ value (1/2): @"NORMAL_SK_PATH_EFFECT_TRIM_MODE"@
pattern NORMAL_SK_PATH_EFFECT_TRIM_MODE :: Sk_path_effect_trim_mode
pattern NORMAL_SK_PATH_EFFECT_TRIM_MODE = (#const NORMAL_SK_PATH_EFFECT_TRIM_MODE)

-- | C enum @"sk_path_effect_trim_mode_t"@ value (2/2): @"INVERTED_SK_PATH_EFFECT_TRIM_MODE"@
pattern INVERTED_SK_PATH_EFFECT_TRIM_MODE :: Sk_path_effect_trim_mode
pattern INVERTED_SK_PATH_EFFECT_TRIM_MODE = (#const INVERTED_SK_PATH_EFFECT_TRIM_MODE)

{- | Opaque C struct: @"sk_path_effect_t"@
-}
data Sk_path_effect = Sk_path_effect

{- | C enum: @"sk_stroke_cap_t"@

@
typedef enum 
{
  BUTT_SK_STROKE_CAP,
  ROUND_SK_STROKE_CAP,
  SQUARE_SK_STROKE_CAP
} sk_stroke_cap_t
@

-}
newtype Sk_stroke_cap = Sk_stroke_cap (#type sk_stroke_cap_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_stroke_cap_t"@ value (1/3): @"BUTT_SK_STROKE_CAP"@
pattern BUTT_SK_STROKE_CAP :: Sk_stroke_cap
pattern BUTT_SK_STROKE_CAP = (#const BUTT_SK_STROKE_CAP)

-- | C enum @"sk_stroke_cap_t"@ value (2/3): @"ROUND_SK_STROKE_CAP"@
pattern ROUND_SK_STROKE_CAP :: Sk_stroke_cap
pattern ROUND_SK_STROKE_CAP = (#const ROUND_SK_STROKE_CAP)

-- | C enum @"sk_stroke_cap_t"@ value (3/3): @"SQUARE_SK_STROKE_CAP"@
pattern SQUARE_SK_STROKE_CAP :: Sk_stroke_cap
pattern SQUARE_SK_STROKE_CAP = (#const SQUARE_SK_STROKE_CAP)

{- | C enum: @"sk_stroke_join_t"@

@
typedef enum 
{
  MITER_SK_STROKE_JOIN,
  ROUND_SK_STROKE_JOIN,
  BEVEL_SK_STROKE_JOIN
} sk_stroke_join_t
@

-}
newtype Sk_stroke_join = Sk_stroke_join (#type sk_stroke_join_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_stroke_join_t"@ value (1/3): @"MITER_SK_STROKE_JOIN"@
pattern MITER_SK_STROKE_JOIN :: Sk_stroke_join
pattern MITER_SK_STROKE_JOIN = (#const MITER_SK_STROKE_JOIN)

-- | C enum @"sk_stroke_join_t"@ value (2/3): @"ROUND_SK_STROKE_JOIN"@
pattern ROUND_SK_STROKE_JOIN :: Sk_stroke_join
pattern ROUND_SK_STROKE_JOIN = (#const ROUND_SK_STROKE_JOIN)

-- | C enum @"sk_stroke_join_t"@ value (3/3): @"BEVEL_SK_STROKE_JOIN"@
pattern BEVEL_SK_STROKE_JOIN :: Sk_stroke_join
pattern BEVEL_SK_STROKE_JOIN = (#const BEVEL_SK_STROKE_JOIN)

{- | C enum: @"sk_shader_tilemode_t"@

@
typedef enum 
{
  CLAMP_SK_SHADER_TILEMODE,
  REPEAT_SK_SHADER_TILEMODE,
  MIRROR_SK_SHADER_TILEMODE,
  DECAL_SK_SHADER_TILEMODE
} sk_shader_tilemode_t
@

-}
newtype Sk_shader_tilemode = Sk_shader_tilemode (#type sk_shader_tilemode_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_shader_tilemode_t"@ value (1/4): @"CLAMP_SK_SHADER_TILEMODE"@
pattern CLAMP_SK_SHADER_TILEMODE :: Sk_shader_tilemode
pattern CLAMP_SK_SHADER_TILEMODE = (#const CLAMP_SK_SHADER_TILEMODE)

-- | C enum @"sk_shader_tilemode_t"@ value (2/4): @"REPEAT_SK_SHADER_TILEMODE"@
pattern REPEAT_SK_SHADER_TILEMODE :: Sk_shader_tilemode
pattern REPEAT_SK_SHADER_TILEMODE = (#const REPEAT_SK_SHADER_TILEMODE)

-- | C enum @"sk_shader_tilemode_t"@ value (3/4): @"MIRROR_SK_SHADER_TILEMODE"@
pattern MIRROR_SK_SHADER_TILEMODE :: Sk_shader_tilemode
pattern MIRROR_SK_SHADER_TILEMODE = (#const MIRROR_SK_SHADER_TILEMODE)

-- | C enum @"sk_shader_tilemode_t"@ value (4/4): @"DECAL_SK_SHADER_TILEMODE"@
pattern DECAL_SK_SHADER_TILEMODE :: Sk_shader_tilemode
pattern DECAL_SK_SHADER_TILEMODE = (#const DECAL_SK_SHADER_TILEMODE)

{- | C enum: @"sk_blurstyle_t"@

@
typedef enum 
{
  NORMAL_SK_BLUR_STYLE,
  SOLID_SK_BLUR_STYLE,
  OUTER_SK_BLUR_STYLE,
  INNER_SK_BLUR_STYLE
} sk_blurstyle_t
@

-}
newtype Sk_blurstyle = Sk_blurstyle (#type sk_blurstyle_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_blurstyle_t"@ value (1/4): @"NORMAL_SK_BLUR_STYLE"@
pattern NORMAL_SK_BLUR_STYLE :: Sk_blurstyle
pattern NORMAL_SK_BLUR_STYLE = (#const NORMAL_SK_BLUR_STYLE)

-- | C enum @"sk_blurstyle_t"@ value (2/4): @"SOLID_SK_BLUR_STYLE"@
pattern SOLID_SK_BLUR_STYLE :: Sk_blurstyle
pattern SOLID_SK_BLUR_STYLE = (#const SOLID_SK_BLUR_STYLE)

-- | C enum @"sk_blurstyle_t"@ value (3/4): @"OUTER_SK_BLUR_STYLE"@
pattern OUTER_SK_BLUR_STYLE :: Sk_blurstyle
pattern OUTER_SK_BLUR_STYLE = (#const OUTER_SK_BLUR_STYLE)

-- | C enum @"sk_blurstyle_t"@ value (4/4): @"INNER_SK_BLUR_STYLE"@
pattern INNER_SK_BLUR_STYLE :: Sk_blurstyle
pattern INNER_SK_BLUR_STYLE = (#const INNER_SK_BLUR_STYLE)

{- | C enum: @"sk_path_direction_t"@

@
typedef enum 
{
  CW_SK_PATH_DIRECTION,
  CCW_SK_PATH_DIRECTION
} sk_path_direction_t
@

-}
newtype Sk_path_direction = Sk_path_direction (#type sk_path_direction_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_path_direction_t"@ value (1/2): @"CW_SK_PATH_DIRECTION"@
pattern CW_SK_PATH_DIRECTION :: Sk_path_direction
pattern CW_SK_PATH_DIRECTION = (#const CW_SK_PATH_DIRECTION)

-- | C enum @"sk_path_direction_t"@ value (2/2): @"CCW_SK_PATH_DIRECTION"@
pattern CCW_SK_PATH_DIRECTION :: Sk_path_direction
pattern CCW_SK_PATH_DIRECTION = (#const CCW_SK_PATH_DIRECTION)

{- | C enum: @"sk_path_arc_size_t"@

@
typedef enum 
{
  SMALL_SK_PATH_ARC_SIZE,
  LARGE_SK_PATH_ARC_SIZE
} sk_path_arc_size_t
@

-}
newtype Sk_path_arc_size = Sk_path_arc_size (#type sk_path_arc_size_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_path_arc_size_t"@ value (1/2): @"SMALL_SK_PATH_ARC_SIZE"@
pattern SMALL_SK_PATH_ARC_SIZE :: Sk_path_arc_size
pattern SMALL_SK_PATH_ARC_SIZE = (#const SMALL_SK_PATH_ARC_SIZE)

-- | C enum @"sk_path_arc_size_t"@ value (2/2): @"LARGE_SK_PATH_ARC_SIZE"@
pattern LARGE_SK_PATH_ARC_SIZE :: Sk_path_arc_size
pattern LARGE_SK_PATH_ARC_SIZE = (#const LARGE_SK_PATH_ARC_SIZE)

{- | C enum: @"sk_paint_style_t"@

@
typedef enum 
{
  FILL_SK_PAINT_STYLE,
  STROKE_SK_PAINT_STYLE,
  STROKE_AND_FILL_SK_PAINT_STYLE
} sk_paint_style_t
@

-}
newtype Sk_paint_style = Sk_paint_style (#type sk_paint_style_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_paint_style_t"@ value (1/3): @"FILL_SK_PAINT_STYLE"@
pattern FILL_SK_PAINT_STYLE :: Sk_paint_style
pattern FILL_SK_PAINT_STYLE = (#const FILL_SK_PAINT_STYLE)

-- | C enum @"sk_paint_style_t"@ value (2/3): @"STROKE_SK_PAINT_STYLE"@
pattern STROKE_SK_PAINT_STYLE :: Sk_paint_style
pattern STROKE_SK_PAINT_STYLE = (#const STROKE_SK_PAINT_STYLE)

-- | C enum @"sk_paint_style_t"@ value (3/3): @"STROKE_AND_FILL_SK_PAINT_STYLE"@
pattern STROKE_AND_FILL_SK_PAINT_STYLE :: Sk_paint_style
pattern STROKE_AND_FILL_SK_PAINT_STYLE = (#const STROKE_AND_FILL_SK_PAINT_STYLE)

{- | C enum: @"sk_font_hinting_t"@

@
typedef enum 
{
  NONE_SK_FONT_HINTING,
  SLIGHT_SK_FONT_HINTING,
  NORMAL_SK_FONT_HINTING,
  FULL_SK_FONT_HINTING
} sk_font_hinting_t
@

-}
newtype Sk_font_hinting = Sk_font_hinting (#type sk_font_hinting_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_font_hinting_t"@ value (1/4): @"NONE_SK_FONT_HINTING"@
pattern NONE_SK_FONT_HINTING :: Sk_font_hinting
pattern NONE_SK_FONT_HINTING = (#const NONE_SK_FONT_HINTING)

-- | C enum @"sk_font_hinting_t"@ value (2/4): @"SLIGHT_SK_FONT_HINTING"@
pattern SLIGHT_SK_FONT_HINTING :: Sk_font_hinting
pattern SLIGHT_SK_FONT_HINTING = (#const SLIGHT_SK_FONT_HINTING)

-- | C enum @"sk_font_hinting_t"@ value (3/4): @"NORMAL_SK_FONT_HINTING"@
pattern NORMAL_SK_FONT_HINTING :: Sk_font_hinting
pattern NORMAL_SK_FONT_HINTING = (#const NORMAL_SK_FONT_HINTING)

-- | C enum @"sk_font_hinting_t"@ value (4/4): @"FULL_SK_FONT_HINTING"@
pattern FULL_SK_FONT_HINTING :: Sk_font_hinting
pattern FULL_SK_FONT_HINTING = (#const FULL_SK_FONT_HINTING)

{- | C enum: @"sk_font_edging_t"@

@
typedef enum 
{
  ALIAS_SK_FONT_EDGING,
  ANTIALIAS_SK_FONT_EDGING,
  SUBPIXEL_ANTIALIAS_SK_FONT_EDGING
} sk_font_edging_t
@

-}
newtype Sk_font_edging = Sk_font_edging (#type sk_font_edging_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_font_edging_t"@ value (1/3): @"ALIAS_SK_FONT_EDGING"@
pattern ALIAS_SK_FONT_EDGING :: Sk_font_edging
pattern ALIAS_SK_FONT_EDGING = (#const ALIAS_SK_FONT_EDGING)

-- | C enum @"sk_font_edging_t"@ value (2/3): @"ANTIALIAS_SK_FONT_EDGING"@
pattern ANTIALIAS_SK_FONT_EDGING :: Sk_font_edging
pattern ANTIALIAS_SK_FONT_EDGING = (#const ANTIALIAS_SK_FONT_EDGING)

-- | C enum @"sk_font_edging_t"@ value (3/3): @"SUBPIXEL_ANTIALIAS_SK_FONT_EDGING"@
pattern SUBPIXEL_ANTIALIAS_SK_FONT_EDGING :: Sk_font_edging
pattern SUBPIXEL_ANTIALIAS_SK_FONT_EDGING = (#const SUBPIXEL_ANTIALIAS_SK_FONT_EDGING)

{- | Opaque C struct: @"sk_pixelref_factory_t"@
-}
data Sk_pixelref_factory = Sk_pixelref_factory

{- | C enum: @"gr_surfaceorigin_t"@

@
typedef enum 
{
  TOP_LEFT_GR_SURFACE_ORIGIN,
  BOTTOM_LEFT_GR_SURFACE_ORIGIN
} gr_surfaceorigin_t
@

-}
newtype Gr_surfaceorigin = Gr_surfaceorigin (#type gr_surfaceorigin_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"gr_surfaceorigin_t"@ value (1/2): @"TOP_LEFT_GR_SURFACE_ORIGIN"@
pattern TOP_LEFT_GR_SURFACE_ORIGIN :: Gr_surfaceorigin
pattern TOP_LEFT_GR_SURFACE_ORIGIN = (#const TOP_LEFT_GR_SURFACE_ORIGIN)

-- | C enum @"gr_surfaceorigin_t"@ value (2/2): @"BOTTOM_LEFT_GR_SURFACE_ORIGIN"@
pattern BOTTOM_LEFT_GR_SURFACE_ORIGIN :: Gr_surfaceorigin
pattern BOTTOM_LEFT_GR_SURFACE_ORIGIN = (#const BOTTOM_LEFT_GR_SURFACE_ORIGIN)

{- | C struct: @"gr_context_options_t"@

@
typedef struct 
{
  _Bool fAvoidStencilBuffers;
  int fRuntimeProgramCacheSize;
  size_t fGlyphCacheTextureMaximumBytes;
  _Bool fAllowPathMaskCaching;
  _Bool fDoManualMipmapping;
  int fBufferMapThreshold;
} gr_context_options_t
@
-}
data Gr_context_options = Gr_context_options
  { fAvoidStencilBuffers :: CBool -- ^ C field: @"_Bool fAvoidStencilBuffers"@
  , fRuntimeProgramCacheSize :: CInt -- ^ C field: @"int fRuntimeProgramCacheSize"@
  , fGlyphCacheTextureMaximumBytes :: CSize -- ^ C field: @"size_t fGlyphCacheTextureMaximumBytes"@
  , fAllowPathMaskCaching :: CBool -- ^ C field: @"_Bool fAllowPathMaskCaching"@
  , fDoManualMipmapping :: CBool -- ^ C field: @"_Bool fDoManualMipmapping"@
  , fBufferMapThreshold :: CInt -- ^ C field: @"int fBufferMapThreshold"@
  }
instance Foreign.Storable.Offset.Offset "fAvoidStencilBuffers" Gr_context_options where
  rawOffset = (#offset gr_context_options_t, fAvoidStencilBuffers)
instance Foreign.Storable.Offset.Offset "fRuntimeProgramCacheSize" Gr_context_options where
  rawOffset = (#offset gr_context_options_t, fRuntimeProgramCacheSize)
instance Foreign.Storable.Offset.Offset "fGlyphCacheTextureMaximumBytes" Gr_context_options where
  rawOffset = (#offset gr_context_options_t, fGlyphCacheTextureMaximumBytes)
instance Foreign.Storable.Offset.Offset "fAllowPathMaskCaching" Gr_context_options where
  rawOffset = (#offset gr_context_options_t, fAllowPathMaskCaching)
instance Foreign.Storable.Offset.Offset "fDoManualMipmapping" Gr_context_options where
  rawOffset = (#offset gr_context_options_t, fDoManualMipmapping)
instance Foreign.Storable.Offset.Offset "fBufferMapThreshold" Gr_context_options where
  rawOffset = (#offset gr_context_options_t, fBufferMapThreshold)
instance Foreign.Storable.Storable Gr_context_options where
  sizeOf _ = (#size gr_context_options_t)
  alignment _ = (#alignment gr_context_options_t)
  peek p' = do
    fAvoidStencilBuffers <- (#peek gr_context_options_t, fAvoidStencilBuffers) p'
    fRuntimeProgramCacheSize <- (#peek gr_context_options_t, fRuntimeProgramCacheSize) p'
    fGlyphCacheTextureMaximumBytes <- (#peek gr_context_options_t, fGlyphCacheTextureMaximumBytes) p'
    fAllowPathMaskCaching <- (#peek gr_context_options_t, fAllowPathMaskCaching) p'
    fDoManualMipmapping <- (#peek gr_context_options_t, fDoManualMipmapping) p'
    fBufferMapThreshold <- (#peek gr_context_options_t, fBufferMapThreshold) p'
    pure Gr_context_options{..}
  poke p' Gr_context_options{..} = do
    (#poke gr_context_options_t, fAvoidStencilBuffers) p' fAvoidStencilBuffers
    (#poke gr_context_options_t, fRuntimeProgramCacheSize) p' fRuntimeProgramCacheSize
    (#poke gr_context_options_t, fGlyphCacheTextureMaximumBytes) p' fGlyphCacheTextureMaximumBytes
    (#poke gr_context_options_t, fAllowPathMaskCaching) p' fAllowPathMaskCaching
    (#poke gr_context_options_t, fDoManualMipmapping) p' fDoManualMipmapping
    (#poke gr_context_options_t, fBufferMapThreshold) p' fBufferMapThreshold

{- | C type alias: @gr_backendobject_t@

@
typedef intptr_t gr_backendobject_t
@
-}
type Gr_backendobject = CIntPtr

{- | Opaque C struct: @"gr_backendrendertarget_t"@
-}
data Gr_backendrendertarget = Gr_backendrendertarget

{- | Opaque C struct: @"gr_backendtexture_t"@
-}
data Gr_backendtexture = Gr_backendtexture

{- | Opaque C struct: @"gr_direct_context_t"@
-}
data Gr_direct_context = Gr_direct_context

{- | Opaque C struct: @"gr_recording_context_t"@
-}
data Gr_recording_context = Gr_recording_context

{- | C enum: @"gr_backend_t"@

@
typedef enum 
{
  OPENGL_GR_BACKEND = 0,
  VULKAN_GR_BACKEND = 1,
  METAL_GR_BACKEND = 2,
  DIRECT3D_GR_BACKEND = 3,
  UNSUPPORTED_GR_BACKEND = 5
} gr_backend_t
@

-}
newtype Gr_backend = Gr_backend (#type gr_backend_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"gr_backend_t"@ value (1/5): @"OPENGL_GR_BACKEND"@
pattern OPENGL_GR_BACKEND :: Gr_backend
pattern OPENGL_GR_BACKEND = (#const OPENGL_GR_BACKEND)

-- | C enum @"gr_backend_t"@ value (2/5): @"VULKAN_GR_BACKEND"@
pattern VULKAN_GR_BACKEND :: Gr_backend
pattern VULKAN_GR_BACKEND = (#const VULKAN_GR_BACKEND)

-- | C enum @"gr_backend_t"@ value (3/5): @"METAL_GR_BACKEND"@
pattern METAL_GR_BACKEND :: Gr_backend
pattern METAL_GR_BACKEND = (#const METAL_GR_BACKEND)

-- | C enum @"gr_backend_t"@ value (4/5): @"DIRECT3D_GR_BACKEND"@
pattern DIRECT3D_GR_BACKEND :: Gr_backend
pattern DIRECT3D_GR_BACKEND = (#const DIRECT3D_GR_BACKEND)

-- | C enum @"gr_backend_t"@ value (5/5): @"UNSUPPORTED_GR_BACKEND"@
pattern UNSUPPORTED_GR_BACKEND :: Gr_backend
pattern UNSUPPORTED_GR_BACKEND = (#const UNSUPPORTED_GR_BACKEND)

{- | C type alias: @gr_backendcontext_t@

@
typedef intptr_t gr_backendcontext_t
@
-}
type Gr_backendcontext = CIntPtr

{- | Opaque C struct: @"gr_glinterface_t"@
-}
data Gr_glinterface = Gr_glinterface

-- | C function pointer type: @typedef void (*gr_gl_func_ptr)(void)@
type Gr_gl_func_ptr = IO (())

-- | Creates a 'FunPtr' of @"gr_gl_func_ptr"@.
foreign import ccall "wrapper" mkFunPtr'Gr_gl_func_ptr :: Gr_gl_func_ptr -> IO (FunPtr Gr_gl_func_ptr)

-- | C function pointer type: @typedef gr_gl_func_ptr (*gr_gl_get_proc)(void *ctx, const char *name)@
type Gr_gl_get_proc = Ptr (()) -> Ptr (CChar) -> IO (FunPtr Gr_gl_func_ptr)

-- | Creates a 'FunPtr' of @"gr_gl_get_proc"@.
foreign import ccall "wrapper" mkFunPtr'Gr_gl_get_proc :: Gr_gl_get_proc -> IO (FunPtr Gr_gl_get_proc)

{- | C struct: @"gr_gl_textureinfo_t"@

@
typedef struct 
{
  unsigned int fTarget;
  unsigned int fID;
  unsigned int fFormat;
  _Bool fProtected;
} gr_gl_textureinfo_t
@
-}
data Gr_gl_textureinfo = Gr_gl_textureinfo
  { fTarget :: CUInt -- ^ C field: @"unsigned int fTarget"@
  , fID :: CUInt -- ^ C field: @"unsigned int fID"@
  , fFormat :: CUInt -- ^ C field: @"unsigned int fFormat"@
  , fProtected :: CBool -- ^ C field: @"_Bool fProtected"@
  }
instance Foreign.Storable.Offset.Offset "fTarget" Gr_gl_textureinfo where
  rawOffset = (#offset gr_gl_textureinfo_t, fTarget)
instance Foreign.Storable.Offset.Offset "fID" Gr_gl_textureinfo where
  rawOffset = (#offset gr_gl_textureinfo_t, fID)
instance Foreign.Storable.Offset.Offset "fFormat" Gr_gl_textureinfo where
  rawOffset = (#offset gr_gl_textureinfo_t, fFormat)
instance Foreign.Storable.Offset.Offset "fProtected" Gr_gl_textureinfo where
  rawOffset = (#offset gr_gl_textureinfo_t, fProtected)
instance Foreign.Storable.Storable Gr_gl_textureinfo where
  sizeOf _ = (#size gr_gl_textureinfo_t)
  alignment _ = (#alignment gr_gl_textureinfo_t)
  peek p' = do
    fTarget <- (#peek gr_gl_textureinfo_t, fTarget) p'
    fID <- (#peek gr_gl_textureinfo_t, fID) p'
    fFormat <- (#peek gr_gl_textureinfo_t, fFormat) p'
    fProtected <- (#peek gr_gl_textureinfo_t, fProtected) p'
    pure Gr_gl_textureinfo{..}
  poke p' Gr_gl_textureinfo{..} = do
    (#poke gr_gl_textureinfo_t, fTarget) p' fTarget
    (#poke gr_gl_textureinfo_t, fID) p' fID
    (#poke gr_gl_textureinfo_t, fFormat) p' fFormat
    (#poke gr_gl_textureinfo_t, fProtected) p' fProtected

{- | C struct: @"gr_gl_framebufferinfo_t"@

@
typedef struct 
{
  unsigned int fFBOID;
  unsigned int fFormat;
  _Bool fProtected;
} gr_gl_framebufferinfo_t
@
-}
data Gr_gl_framebufferinfo = Gr_gl_framebufferinfo
  { fFBOID :: CUInt -- ^ C field: @"unsigned int fFBOID"@
  , fFormat :: CUInt -- ^ C field: @"unsigned int fFormat"@
  , fProtected :: CBool -- ^ C field: @"_Bool fProtected"@
  }
instance Foreign.Storable.Offset.Offset "fFBOID" Gr_gl_framebufferinfo where
  rawOffset = (#offset gr_gl_framebufferinfo_t, fFBOID)
instance Foreign.Storable.Offset.Offset "fFormat" Gr_gl_framebufferinfo where
  rawOffset = (#offset gr_gl_framebufferinfo_t, fFormat)
instance Foreign.Storable.Offset.Offset "fProtected" Gr_gl_framebufferinfo where
  rawOffset = (#offset gr_gl_framebufferinfo_t, fProtected)
instance Foreign.Storable.Storable Gr_gl_framebufferinfo where
  sizeOf _ = (#size gr_gl_framebufferinfo_t)
  alignment _ = (#alignment gr_gl_framebufferinfo_t)
  peek p' = do
    fFBOID <- (#peek gr_gl_framebufferinfo_t, fFBOID) p'
    fFormat <- (#peek gr_gl_framebufferinfo_t, fFormat) p'
    fProtected <- (#peek gr_gl_framebufferinfo_t, fProtected) p'
    pure Gr_gl_framebufferinfo{..}
  poke p' Gr_gl_framebufferinfo{..} = do
    (#poke gr_gl_framebufferinfo_t, fFBOID) p' fFBOID
    (#poke gr_gl_framebufferinfo_t, fFormat) p' fFormat
    (#poke gr_gl_framebufferinfo_t, fProtected) p' fProtected

{- | Opaque C struct: @"vk_instance_t"@
-}
data Vk_instance = Vk_instance

{- | Opaque C struct: @"gr_vkinterface_t"@
-}
data Gr_vkinterface = Gr_vkinterface

{- | Opaque C struct: @"vk_physical_device_t"@
-}
data Vk_physical_device = Vk_physical_device

{- | Opaque C struct: @"vk_physical_device_features_t"@
-}
data Vk_physical_device_features = Vk_physical_device_features

{- | Opaque C struct: @"vk_physical_device_features_2_t"@
-}
data Vk_physical_device_features_2 = Vk_physical_device_features_2

{- | Opaque C struct: @"vk_device_t"@
-}
data Vk_device = Vk_device

{- | Opaque C struct: @"vk_queue_t"@
-}
data Vk_queue = Vk_queue

{- | Opaque C struct: @"gr_vk_extensions_t"@
-}
data Gr_vk_extensions = Gr_vk_extensions

{- | Opaque C struct: @"gr_vk_memory_allocator_t"@
-}
data Gr_vk_memory_allocator = Gr_vk_memory_allocator

-- | C function pointer type: @typedef void (*gr_vk_func_ptr)(void)@
type Gr_vk_func_ptr = IO (())

-- | Creates a 'FunPtr' of @"gr_vk_func_ptr"@.
foreign import ccall "wrapper" mkFunPtr'Gr_vk_func_ptr :: Gr_vk_func_ptr -> IO (FunPtr Gr_vk_func_ptr)

-- | C function pointer type: @typedef gr_vk_func_ptr (*gr_vk_get_proc)(void *ctx, const char *name, vk_instance_t *instance, vk_device_t *device)@
type Gr_vk_get_proc = Ptr (()) -> Ptr (CChar) -> Ptr (Vk_instance) -> Ptr (Vk_device) -> IO (FunPtr Gr_vk_func_ptr)

-- | Creates a 'FunPtr' of @"gr_vk_get_proc"@.
foreign import ccall "wrapper" mkFunPtr'Gr_vk_get_proc :: Gr_vk_get_proc -> IO (FunPtr Gr_vk_get_proc)

{- | C struct: @"gr_vk_backendcontext_t"@

@
typedef struct 
{
  vk_instance_t *fInstance;
  vk_physical_device_t *fPhysicalDevice;
  vk_device_t *fDevice;
  vk_queue_t *fQueue;
  uint32_t fGraphicsQueueIndex;
  uint32_t fMinAPIVersion;
  uint32_t fInstanceVersion;
  uint32_t fMaxAPIVersion;
  uint32_t fExtensions;
  const gr_vk_extensions_t *fVkExtensions;
  uint32_t fFeatures;
  const vk_physical_device_features_t *fDeviceFeatures;
  const vk_physical_device_features_2_t *fDeviceFeatures2;
  gr_vk_memory_allocator_t *fMemoryAllocator;
  gr_vk_get_proc fGetProc;
  void *fGetProcUserData;
  _Bool fOwnsInstanceAndDevice;
  _Bool fProtectedContext;
} gr_vk_backendcontext_t
@
-}
data Gr_vk_backendcontext = Gr_vk_backendcontext
  { fInstance :: Ptr (Vk_instance) -- ^ C field: @"vk_instance_t *fInstance"@
  , fPhysicalDevice :: Ptr (Vk_physical_device) -- ^ C field: @"vk_physical_device_t *fPhysicalDevice"@
  , fDevice :: Ptr (Vk_device) -- ^ C field: @"vk_device_t *fDevice"@
  , fQueue :: Ptr (Vk_queue) -- ^ C field: @"vk_queue_t *fQueue"@
  , fGraphicsQueueIndex :: Word32 -- ^ C field: @"uint32_t fGraphicsQueueIndex"@
  , fMinAPIVersion :: Word32 -- ^ C field: @"uint32_t fMinAPIVersion"@
  , fInstanceVersion :: Word32 -- ^ C field: @"uint32_t fInstanceVersion"@
  , fMaxAPIVersion :: Word32 -- ^ C field: @"uint32_t fMaxAPIVersion"@
  , fExtensions :: Word32 -- ^ C field: @"uint32_t fExtensions"@
  , fVkExtensions :: Ptr (Gr_vk_extensions) -- ^ C field: @"const gr_vk_extensions_t *fVkExtensions"@
  , fFeatures :: Word32 -- ^ C field: @"uint32_t fFeatures"@
  , fDeviceFeatures :: Ptr (Vk_physical_device_features) -- ^ C field: @"const vk_physical_device_features_t *fDeviceFeatures"@
  , fDeviceFeatures2 :: Ptr (Vk_physical_device_features_2) -- ^ C field: @"const vk_physical_device_features_2_t *fDeviceFeatures2"@
  , fMemoryAllocator :: Ptr (Gr_vk_memory_allocator) -- ^ C field: @"gr_vk_memory_allocator_t *fMemoryAllocator"@
  , fGetProc :: FunPtr Gr_vk_get_proc -- ^ C field: @"gr_vk_get_proc fGetProc"@
  , fGetProcUserData :: Ptr (()) -- ^ C field: @"void *fGetProcUserData"@
  , fOwnsInstanceAndDevice :: CBool -- ^ C field: @"_Bool fOwnsInstanceAndDevice"@
  , fProtectedContext :: CBool -- ^ C field: @"_Bool fProtectedContext"@
  }
instance Foreign.Storable.Offset.Offset "fInstance" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fInstance)
instance Foreign.Storable.Offset.Offset "fPhysicalDevice" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fPhysicalDevice)
instance Foreign.Storable.Offset.Offset "fDevice" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fDevice)
instance Foreign.Storable.Offset.Offset "fQueue" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fQueue)
instance Foreign.Storable.Offset.Offset "fGraphicsQueueIndex" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fGraphicsQueueIndex)
instance Foreign.Storable.Offset.Offset "fMinAPIVersion" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fMinAPIVersion)
instance Foreign.Storable.Offset.Offset "fInstanceVersion" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fInstanceVersion)
instance Foreign.Storable.Offset.Offset "fMaxAPIVersion" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fMaxAPIVersion)
instance Foreign.Storable.Offset.Offset "fExtensions" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fExtensions)
instance Foreign.Storable.Offset.Offset "fVkExtensions" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fVkExtensions)
instance Foreign.Storable.Offset.Offset "fFeatures" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fFeatures)
instance Foreign.Storable.Offset.Offset "fDeviceFeatures" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fDeviceFeatures)
instance Foreign.Storable.Offset.Offset "fDeviceFeatures2" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fDeviceFeatures2)
instance Foreign.Storable.Offset.Offset "fMemoryAllocator" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fMemoryAllocator)
instance Foreign.Storable.Offset.Offset "fGetProc" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fGetProc)
instance Foreign.Storable.Offset.Offset "fGetProcUserData" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fGetProcUserData)
instance Foreign.Storable.Offset.Offset "fOwnsInstanceAndDevice" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fOwnsInstanceAndDevice)
instance Foreign.Storable.Offset.Offset "fProtectedContext" Gr_vk_backendcontext where
  rawOffset = (#offset gr_vk_backendcontext_t, fProtectedContext)
instance Foreign.Storable.Storable Gr_vk_backendcontext where
  sizeOf _ = (#size gr_vk_backendcontext_t)
  alignment _ = (#alignment gr_vk_backendcontext_t)
  peek p' = do
    fInstance <- (#peek gr_vk_backendcontext_t, fInstance) p'
    fPhysicalDevice <- (#peek gr_vk_backendcontext_t, fPhysicalDevice) p'
    fDevice <- (#peek gr_vk_backendcontext_t, fDevice) p'
    fQueue <- (#peek gr_vk_backendcontext_t, fQueue) p'
    fGraphicsQueueIndex <- (#peek gr_vk_backendcontext_t, fGraphicsQueueIndex) p'
    fMinAPIVersion <- (#peek gr_vk_backendcontext_t, fMinAPIVersion) p'
    fInstanceVersion <- (#peek gr_vk_backendcontext_t, fInstanceVersion) p'
    fMaxAPIVersion <- (#peek gr_vk_backendcontext_t, fMaxAPIVersion) p'
    fExtensions <- (#peek gr_vk_backendcontext_t, fExtensions) p'
    fVkExtensions <- (#peek gr_vk_backendcontext_t, fVkExtensions) p'
    fFeatures <- (#peek gr_vk_backendcontext_t, fFeatures) p'
    fDeviceFeatures <- (#peek gr_vk_backendcontext_t, fDeviceFeatures) p'
    fDeviceFeatures2 <- (#peek gr_vk_backendcontext_t, fDeviceFeatures2) p'
    fMemoryAllocator <- (#peek gr_vk_backendcontext_t, fMemoryAllocator) p'
    fGetProc <- (#peek gr_vk_backendcontext_t, fGetProc) p'
    fGetProcUserData <- (#peek gr_vk_backendcontext_t, fGetProcUserData) p'
    fOwnsInstanceAndDevice <- (#peek gr_vk_backendcontext_t, fOwnsInstanceAndDevice) p'
    fProtectedContext <- (#peek gr_vk_backendcontext_t, fProtectedContext) p'
    pure Gr_vk_backendcontext{..}
  poke p' Gr_vk_backendcontext{..} = do
    (#poke gr_vk_backendcontext_t, fInstance) p' fInstance
    (#poke gr_vk_backendcontext_t, fPhysicalDevice) p' fPhysicalDevice
    (#poke gr_vk_backendcontext_t, fDevice) p' fDevice
    (#poke gr_vk_backendcontext_t, fQueue) p' fQueue
    (#poke gr_vk_backendcontext_t, fGraphicsQueueIndex) p' fGraphicsQueueIndex
    (#poke gr_vk_backendcontext_t, fMinAPIVersion) p' fMinAPIVersion
    (#poke gr_vk_backendcontext_t, fInstanceVersion) p' fInstanceVersion
    (#poke gr_vk_backendcontext_t, fMaxAPIVersion) p' fMaxAPIVersion
    (#poke gr_vk_backendcontext_t, fExtensions) p' fExtensions
    (#poke gr_vk_backendcontext_t, fVkExtensions) p' fVkExtensions
    (#poke gr_vk_backendcontext_t, fFeatures) p' fFeatures
    (#poke gr_vk_backendcontext_t, fDeviceFeatures) p' fDeviceFeatures
    (#poke gr_vk_backendcontext_t, fDeviceFeatures2) p' fDeviceFeatures2
    (#poke gr_vk_backendcontext_t, fMemoryAllocator) p' fMemoryAllocator
    (#poke gr_vk_backendcontext_t, fGetProc) p' fGetProc
    (#poke gr_vk_backendcontext_t, fGetProcUserData) p' fGetProcUserData
    (#poke gr_vk_backendcontext_t, fOwnsInstanceAndDevice) p' fOwnsInstanceAndDevice
    (#poke gr_vk_backendcontext_t, fProtectedContext) p' fProtectedContext

{- | C type alias: @gr_vk_backendmemory_t@

@
typedef intptr_t gr_vk_backendmemory_t
@
-}
type Gr_vk_backendmemory = CIntPtr

{- | C struct: @"gr_vk_alloc_t"@

@
typedef struct 
{
  uint64_t fMemory;
  uint64_t fOffset;
  uint64_t fSize;
  uint32_t fFlags;
  gr_vk_backendmemory_t fBackendMemory;
  _Bool _private_fUsesSystemHeap;
} gr_vk_alloc_t
@
-}
data Gr_vk_alloc = Gr_vk_alloc
  { fMemory :: Word64 -- ^ C field: @"uint64_t fMemory"@
  , fOffset :: Word64 -- ^ C field: @"uint64_t fOffset"@
  , fSize :: Word64 -- ^ C field: @"uint64_t fSize"@
  , fFlags :: Word32 -- ^ C field: @"uint32_t fFlags"@
  , fBackendMemory :: Gr_vk_backendmemory -- ^ C field: @"gr_vk_backendmemory_t fBackendMemory"@
  , _private_fUsesSystemHeap :: CBool -- ^ C field: @"_Bool _private_fUsesSystemHeap"@
  }
instance Foreign.Storable.Offset.Offset "fMemory" Gr_vk_alloc where
  rawOffset = (#offset gr_vk_alloc_t, fMemory)
instance Foreign.Storable.Offset.Offset "fOffset" Gr_vk_alloc where
  rawOffset = (#offset gr_vk_alloc_t, fOffset)
instance Foreign.Storable.Offset.Offset "fSize" Gr_vk_alloc where
  rawOffset = (#offset gr_vk_alloc_t, fSize)
instance Foreign.Storable.Offset.Offset "fFlags" Gr_vk_alloc where
  rawOffset = (#offset gr_vk_alloc_t, fFlags)
instance Foreign.Storable.Offset.Offset "fBackendMemory" Gr_vk_alloc where
  rawOffset = (#offset gr_vk_alloc_t, fBackendMemory)
instance Foreign.Storable.Offset.Offset "_private_fUsesSystemHeap" Gr_vk_alloc where
  rawOffset = (#offset gr_vk_alloc_t, _private_fUsesSystemHeap)
instance Foreign.Storable.Storable Gr_vk_alloc where
  sizeOf _ = (#size gr_vk_alloc_t)
  alignment _ = (#alignment gr_vk_alloc_t)
  peek p' = do
    fMemory <- (#peek gr_vk_alloc_t, fMemory) p'
    fOffset <- (#peek gr_vk_alloc_t, fOffset) p'
    fSize <- (#peek gr_vk_alloc_t, fSize) p'
    fFlags <- (#peek gr_vk_alloc_t, fFlags) p'
    fBackendMemory <- (#peek gr_vk_alloc_t, fBackendMemory) p'
    _private_fUsesSystemHeap <- (#peek gr_vk_alloc_t, _private_fUsesSystemHeap) p'
    pure Gr_vk_alloc{..}
  poke p' Gr_vk_alloc{..} = do
    (#poke gr_vk_alloc_t, fMemory) p' fMemory
    (#poke gr_vk_alloc_t, fOffset) p' fOffset
    (#poke gr_vk_alloc_t, fSize) p' fSize
    (#poke gr_vk_alloc_t, fFlags) p' fFlags
    (#poke gr_vk_alloc_t, fBackendMemory) p' fBackendMemory
    (#poke gr_vk_alloc_t, _private_fUsesSystemHeap) p' _private_fUsesSystemHeap

{- | C struct: @"gr_vk_ycbcrconversioninfo_t"@

@
typedef struct 
{
  uint32_t fFormat;
  uint64_t fExternalFormat;
  uint32_t fYcbcrModel;
  uint32_t fYcbcrRange;
  uint32_t fXChromaOffset;
  uint32_t fYChromaOffset;
  uint32_t fChromaFilter;
  uint32_t fForceExplicitReconstruction;
  uint32_t fFormatFeatures;
} gr_vk_ycbcrconversioninfo_t
@
-}
data Gr_vk_ycbcrconversioninfo = Gr_vk_ycbcrconversioninfo
  { fFormat :: Word32 -- ^ C field: @"uint32_t fFormat"@
  , fExternalFormat :: Word64 -- ^ C field: @"uint64_t fExternalFormat"@
  , fYcbcrModel :: Word32 -- ^ C field: @"uint32_t fYcbcrModel"@
  , fYcbcrRange :: Word32 -- ^ C field: @"uint32_t fYcbcrRange"@
  , fXChromaOffset :: Word32 -- ^ C field: @"uint32_t fXChromaOffset"@
  , fYChromaOffset :: Word32 -- ^ C field: @"uint32_t fYChromaOffset"@
  , fChromaFilter :: Word32 -- ^ C field: @"uint32_t fChromaFilter"@
  , fForceExplicitReconstruction :: Word32 -- ^ C field: @"uint32_t fForceExplicitReconstruction"@
  , fFormatFeatures :: Word32 -- ^ C field: @"uint32_t fFormatFeatures"@
  }
instance Foreign.Storable.Offset.Offset "fFormat" Gr_vk_ycbcrconversioninfo where
  rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fFormat)
instance Foreign.Storable.Offset.Offset "fExternalFormat" Gr_vk_ycbcrconversioninfo where
  rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fExternalFormat)
instance Foreign.Storable.Offset.Offset "fYcbcrModel" Gr_vk_ycbcrconversioninfo where
  rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fYcbcrModel)
instance Foreign.Storable.Offset.Offset "fYcbcrRange" Gr_vk_ycbcrconversioninfo where
  rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fYcbcrRange)
instance Foreign.Storable.Offset.Offset "fXChromaOffset" Gr_vk_ycbcrconversioninfo where
  rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fXChromaOffset)
instance Foreign.Storable.Offset.Offset "fYChromaOffset" Gr_vk_ycbcrconversioninfo where
  rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fYChromaOffset)
instance Foreign.Storable.Offset.Offset "fChromaFilter" Gr_vk_ycbcrconversioninfo where
  rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fChromaFilter)
instance Foreign.Storable.Offset.Offset "fForceExplicitReconstruction" Gr_vk_ycbcrconversioninfo where
  rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fForceExplicitReconstruction)
instance Foreign.Storable.Offset.Offset "fFormatFeatures" Gr_vk_ycbcrconversioninfo where
  rawOffset = (#offset gr_vk_ycbcrconversioninfo_t, fFormatFeatures)
instance Foreign.Storable.Storable Gr_vk_ycbcrconversioninfo where
  sizeOf _ = (#size gr_vk_ycbcrconversioninfo_t)
  alignment _ = (#alignment gr_vk_ycbcrconversioninfo_t)
  peek p' = do
    fFormat <- (#peek gr_vk_ycbcrconversioninfo_t, fFormat) p'
    fExternalFormat <- (#peek gr_vk_ycbcrconversioninfo_t, fExternalFormat) p'
    fYcbcrModel <- (#peek gr_vk_ycbcrconversioninfo_t, fYcbcrModel) p'
    fYcbcrRange <- (#peek gr_vk_ycbcrconversioninfo_t, fYcbcrRange) p'
    fXChromaOffset <- (#peek gr_vk_ycbcrconversioninfo_t, fXChromaOffset) p'
    fYChromaOffset <- (#peek gr_vk_ycbcrconversioninfo_t, fYChromaOffset) p'
    fChromaFilter <- (#peek gr_vk_ycbcrconversioninfo_t, fChromaFilter) p'
    fForceExplicitReconstruction <- (#peek gr_vk_ycbcrconversioninfo_t, fForceExplicitReconstruction) p'
    fFormatFeatures <- (#peek gr_vk_ycbcrconversioninfo_t, fFormatFeatures) p'
    pure Gr_vk_ycbcrconversioninfo{..}
  poke p' Gr_vk_ycbcrconversioninfo{..} = do
    (#poke gr_vk_ycbcrconversioninfo_t, fFormat) p' fFormat
    (#poke gr_vk_ycbcrconversioninfo_t, fExternalFormat) p' fExternalFormat
    (#poke gr_vk_ycbcrconversioninfo_t, fYcbcrModel) p' fYcbcrModel
    (#poke gr_vk_ycbcrconversioninfo_t, fYcbcrRange) p' fYcbcrRange
    (#poke gr_vk_ycbcrconversioninfo_t, fXChromaOffset) p' fXChromaOffset
    (#poke gr_vk_ycbcrconversioninfo_t, fYChromaOffset) p' fYChromaOffset
    (#poke gr_vk_ycbcrconversioninfo_t, fChromaFilter) p' fChromaFilter
    (#poke gr_vk_ycbcrconversioninfo_t, fForceExplicitReconstruction) p' fForceExplicitReconstruction
    (#poke gr_vk_ycbcrconversioninfo_t, fFormatFeatures) p' fFormatFeatures

{- | C struct: @"gr_vk_imageinfo_t"@

@
typedef struct 
{
  uint64_t fImage;
  gr_vk_alloc_t fAlloc;
  uint32_t fImageTiling;
  uint32_t fImageLayout;
  uint32_t fFormat;
  uint32_t fImageUsageFlags;
  uint32_t fSampleCount;
  uint32_t fLevelCount;
  uint32_t fCurrentQueueFamily;
  _Bool fProtected;
  gr_vk_ycbcrconversioninfo_t fYcbcrConversionInfo;
  uint32_t fSharingMode;
} gr_vk_imageinfo_t
@
-}
data Gr_vk_imageinfo = Gr_vk_imageinfo
  { fImage :: Word64 -- ^ C field: @"uint64_t fImage"@
  , fAlloc :: Gr_vk_alloc -- ^ C field: @"gr_vk_alloc_t fAlloc"@
  , fImageTiling :: Word32 -- ^ C field: @"uint32_t fImageTiling"@
  , fImageLayout :: Word32 -- ^ C field: @"uint32_t fImageLayout"@
  , fFormat :: Word32 -- ^ C field: @"uint32_t fFormat"@
  , fImageUsageFlags :: Word32 -- ^ C field: @"uint32_t fImageUsageFlags"@
  , fSampleCount :: Word32 -- ^ C field: @"uint32_t fSampleCount"@
  , fLevelCount :: Word32 -- ^ C field: @"uint32_t fLevelCount"@
  , fCurrentQueueFamily :: Word32 -- ^ C field: @"uint32_t fCurrentQueueFamily"@
  , fProtected :: CBool -- ^ C field: @"_Bool fProtected"@
  , fYcbcrConversionInfo :: Gr_vk_ycbcrconversioninfo -- ^ C field: @"gr_vk_ycbcrconversioninfo_t fYcbcrConversionInfo"@
  , fSharingMode :: Word32 -- ^ C field: @"uint32_t fSharingMode"@
  }
instance Foreign.Storable.Offset.Offset "fImage" Gr_vk_imageinfo where
  rawOffset = (#offset gr_vk_imageinfo_t, fImage)
instance Foreign.Storable.Offset.Offset "fAlloc" Gr_vk_imageinfo where
  rawOffset = (#offset gr_vk_imageinfo_t, fAlloc)
instance Foreign.Storable.Offset.Offset "fImageTiling" Gr_vk_imageinfo where
  rawOffset = (#offset gr_vk_imageinfo_t, fImageTiling)
instance Foreign.Storable.Offset.Offset "fImageLayout" Gr_vk_imageinfo where
  rawOffset = (#offset gr_vk_imageinfo_t, fImageLayout)
instance Foreign.Storable.Offset.Offset "fFormat" Gr_vk_imageinfo where
  rawOffset = (#offset gr_vk_imageinfo_t, fFormat)
instance Foreign.Storable.Offset.Offset "fImageUsageFlags" Gr_vk_imageinfo where
  rawOffset = (#offset gr_vk_imageinfo_t, fImageUsageFlags)
instance Foreign.Storable.Offset.Offset "fSampleCount" Gr_vk_imageinfo where
  rawOffset = (#offset gr_vk_imageinfo_t, fSampleCount)
instance Foreign.Storable.Offset.Offset "fLevelCount" Gr_vk_imageinfo where
  rawOffset = (#offset gr_vk_imageinfo_t, fLevelCount)
instance Foreign.Storable.Offset.Offset "fCurrentQueueFamily" Gr_vk_imageinfo where
  rawOffset = (#offset gr_vk_imageinfo_t, fCurrentQueueFamily)
instance Foreign.Storable.Offset.Offset "fProtected" Gr_vk_imageinfo where
  rawOffset = (#offset gr_vk_imageinfo_t, fProtected)
instance Foreign.Storable.Offset.Offset "fYcbcrConversionInfo" Gr_vk_imageinfo where
  rawOffset = (#offset gr_vk_imageinfo_t, fYcbcrConversionInfo)
instance Foreign.Storable.Offset.Offset "fSharingMode" Gr_vk_imageinfo where
  rawOffset = (#offset gr_vk_imageinfo_t, fSharingMode)
instance Foreign.Storable.Storable Gr_vk_imageinfo where
  sizeOf _ = (#size gr_vk_imageinfo_t)
  alignment _ = (#alignment gr_vk_imageinfo_t)
  peek p' = do
    fImage <- (#peek gr_vk_imageinfo_t, fImage) p'
    fAlloc <- (#peek gr_vk_imageinfo_t, fAlloc) p'
    fImageTiling <- (#peek gr_vk_imageinfo_t, fImageTiling) p'
    fImageLayout <- (#peek gr_vk_imageinfo_t, fImageLayout) p'
    fFormat <- (#peek gr_vk_imageinfo_t, fFormat) p'
    fImageUsageFlags <- (#peek gr_vk_imageinfo_t, fImageUsageFlags) p'
    fSampleCount <- (#peek gr_vk_imageinfo_t, fSampleCount) p'
    fLevelCount <- (#peek gr_vk_imageinfo_t, fLevelCount) p'
    fCurrentQueueFamily <- (#peek gr_vk_imageinfo_t, fCurrentQueueFamily) p'
    fProtected <- (#peek gr_vk_imageinfo_t, fProtected) p'
    fYcbcrConversionInfo <- (#peek gr_vk_imageinfo_t, fYcbcrConversionInfo) p'
    fSharingMode <- (#peek gr_vk_imageinfo_t, fSharingMode) p'
    pure Gr_vk_imageinfo{..}
  poke p' Gr_vk_imageinfo{..} = do
    (#poke gr_vk_imageinfo_t, fImage) p' fImage
    (#poke gr_vk_imageinfo_t, fAlloc) p' fAlloc
    (#poke gr_vk_imageinfo_t, fImageTiling) p' fImageTiling
    (#poke gr_vk_imageinfo_t, fImageLayout) p' fImageLayout
    (#poke gr_vk_imageinfo_t, fFormat) p' fFormat
    (#poke gr_vk_imageinfo_t, fImageUsageFlags) p' fImageUsageFlags
    (#poke gr_vk_imageinfo_t, fSampleCount) p' fSampleCount
    (#poke gr_vk_imageinfo_t, fLevelCount) p' fLevelCount
    (#poke gr_vk_imageinfo_t, fCurrentQueueFamily) p' fCurrentQueueFamily
    (#poke gr_vk_imageinfo_t, fProtected) p' fProtected
    (#poke gr_vk_imageinfo_t, fYcbcrConversionInfo) p' fYcbcrConversionInfo
    (#poke gr_vk_imageinfo_t, fSharingMode) p' fSharingMode

{- | C struct: @"gr_mtl_textureinfo_t"@

@
typedef struct 
{
  const void *fTexture;
} gr_mtl_textureinfo_t
@
-}
data Gr_mtl_textureinfo = Gr_mtl_textureinfo
  { fTexture :: Ptr (()) -- ^ C field: @"const void *fTexture"@
  }
instance Foreign.Storable.Offset.Offset "fTexture" Gr_mtl_textureinfo where
  rawOffset = (#offset gr_mtl_textureinfo_t, fTexture)
instance Foreign.Storable.Storable Gr_mtl_textureinfo where
  sizeOf _ = (#size gr_mtl_textureinfo_t)
  alignment _ = (#alignment gr_mtl_textureinfo_t)
  peek p' = do
    fTexture <- (#peek gr_mtl_textureinfo_t, fTexture) p'
    pure Gr_mtl_textureinfo{..}
  poke p' Gr_mtl_textureinfo{..} = do
    (#poke gr_mtl_textureinfo_t, fTexture) p' fTexture

{- | C enum: @"sk_pathop_t"@

@
typedef enum 
{
  DIFFERENCE_SK_PATHOP,
  INTERSECT_SK_PATHOP,
  UNION_SK_PATHOP,
  XOR_SK_PATHOP,
  REVERSE_DIFFERENCE_SK_PATHOP
} sk_pathop_t
@

-}
newtype Sk_pathop = Sk_pathop (#type sk_pathop_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_pathop_t"@ value (1/5): @"DIFFERENCE_SK_PATHOP"@
pattern DIFFERENCE_SK_PATHOP :: Sk_pathop
pattern DIFFERENCE_SK_PATHOP = (#const DIFFERENCE_SK_PATHOP)

-- | C enum @"sk_pathop_t"@ value (2/5): @"INTERSECT_SK_PATHOP"@
pattern INTERSECT_SK_PATHOP :: Sk_pathop
pattern INTERSECT_SK_PATHOP = (#const INTERSECT_SK_PATHOP)

-- | C enum @"sk_pathop_t"@ value (3/5): @"UNION_SK_PATHOP"@
pattern UNION_SK_PATHOP :: Sk_pathop
pattern UNION_SK_PATHOP = (#const UNION_SK_PATHOP)

-- | C enum @"sk_pathop_t"@ value (4/5): @"XOR_SK_PATHOP"@
pattern XOR_SK_PATHOP :: Sk_pathop
pattern XOR_SK_PATHOP = (#const XOR_SK_PATHOP)

-- | C enum @"sk_pathop_t"@ value (5/5): @"REVERSE_DIFFERENCE_SK_PATHOP"@
pattern REVERSE_DIFFERENCE_SK_PATHOP :: Sk_pathop
pattern REVERSE_DIFFERENCE_SK_PATHOP = (#const REVERSE_DIFFERENCE_SK_PATHOP)

{- | Opaque C struct: @"sk_opbuilder_t"@
-}
data Sk_opbuilder = Sk_opbuilder

{- | C enum: @"sk_lattice_recttype_t"@

@
typedef enum 
{
  DEFAULT_SK_LATTICE_RECT_TYPE,
  TRANSPARENT_SK_LATTICE_RECT_TYPE,
  FIXED_COLOR_SK_LATTICE_RECT_TYPE
} sk_lattice_recttype_t
@

-}
newtype Sk_lattice_recttype = Sk_lattice_recttype (#type sk_lattice_recttype_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_lattice_recttype_t"@ value (1/3): @"DEFAULT_SK_LATTICE_RECT_TYPE"@
pattern DEFAULT_SK_LATTICE_RECT_TYPE :: Sk_lattice_recttype
pattern DEFAULT_SK_LATTICE_RECT_TYPE = (#const DEFAULT_SK_LATTICE_RECT_TYPE)

-- | C enum @"sk_lattice_recttype_t"@ value (2/3): @"TRANSPARENT_SK_LATTICE_RECT_TYPE"@
pattern TRANSPARENT_SK_LATTICE_RECT_TYPE :: Sk_lattice_recttype
pattern TRANSPARENT_SK_LATTICE_RECT_TYPE = (#const TRANSPARENT_SK_LATTICE_RECT_TYPE)

-- | C enum @"sk_lattice_recttype_t"@ value (3/3): @"FIXED_COLOR_SK_LATTICE_RECT_TYPE"@
pattern FIXED_COLOR_SK_LATTICE_RECT_TYPE :: Sk_lattice_recttype
pattern FIXED_COLOR_SK_LATTICE_RECT_TYPE = (#const FIXED_COLOR_SK_LATTICE_RECT_TYPE)

{- | C struct: @"sk_lattice_t"@

@
typedef struct 
{
  const int *fXDivs;
  const int *fYDivs;
  const sk_lattice_recttype_t *fRectTypes;
  int fXCount;
  int fYCount;
  const sk_irect_t *fBounds;
  const sk_color_t *fColors;
} sk_lattice_t
@
-}
data Sk_lattice = Sk_lattice
  { fXDivs :: Ptr (CInt) -- ^ C field: @"const int *fXDivs"@
  , fYDivs :: Ptr (CInt) -- ^ C field: @"const int *fYDivs"@
  , fRectTypes :: Ptr (Sk_lattice_recttype) -- ^ C field: @"const sk_lattice_recttype_t *fRectTypes"@
  , fXCount :: CInt -- ^ C field: @"int fXCount"@
  , fYCount :: CInt -- ^ C field: @"int fYCount"@
  , fBounds :: Ptr (Sk_irect) -- ^ C field: @"const sk_irect_t *fBounds"@
  , fColors :: Ptr (Sk_color) -- ^ C field: @"const sk_color_t *fColors"@
  }
instance Foreign.Storable.Offset.Offset "fXDivs" Sk_lattice where
  rawOffset = (#offset sk_lattice_t, fXDivs)
instance Foreign.Storable.Offset.Offset "fYDivs" Sk_lattice where
  rawOffset = (#offset sk_lattice_t, fYDivs)
instance Foreign.Storable.Offset.Offset "fRectTypes" Sk_lattice where
  rawOffset = (#offset sk_lattice_t, fRectTypes)
instance Foreign.Storable.Offset.Offset "fXCount" Sk_lattice where
  rawOffset = (#offset sk_lattice_t, fXCount)
instance Foreign.Storable.Offset.Offset "fYCount" Sk_lattice where
  rawOffset = (#offset sk_lattice_t, fYCount)
instance Foreign.Storable.Offset.Offset "fBounds" Sk_lattice where
  rawOffset = (#offset sk_lattice_t, fBounds)
instance Foreign.Storable.Offset.Offset "fColors" Sk_lattice where
  rawOffset = (#offset sk_lattice_t, fColors)
instance Foreign.Storable.Storable Sk_lattice where
  sizeOf _ = (#size sk_lattice_t)
  alignment _ = (#alignment sk_lattice_t)
  peek p' = do
    fXDivs <- (#peek sk_lattice_t, fXDivs) p'
    fYDivs <- (#peek sk_lattice_t, fYDivs) p'
    fRectTypes <- (#peek sk_lattice_t, fRectTypes) p'
    fXCount <- (#peek sk_lattice_t, fXCount) p'
    fYCount <- (#peek sk_lattice_t, fYCount) p'
    fBounds <- (#peek sk_lattice_t, fBounds) p'
    fColors <- (#peek sk_lattice_t, fColors) p'
    pure Sk_lattice{..}
  poke p' Sk_lattice{..} = do
    (#poke sk_lattice_t, fXDivs) p' fXDivs
    (#poke sk_lattice_t, fYDivs) p' fYDivs
    (#poke sk_lattice_t, fRectTypes) p' fRectTypes
    (#poke sk_lattice_t, fXCount) p' fXCount
    (#poke sk_lattice_t, fYCount) p' fYCount
    (#poke sk_lattice_t, fBounds) p' fBounds
    (#poke sk_lattice_t, fColors) p' fColors

{- | Opaque C struct: @"sk_pathmeasure_t"@
-}
data Sk_pathmeasure = Sk_pathmeasure

{- | C enum: @"sk_pathmeasure_matrixflags_t"@

@
typedef enum 
{
  GET_POSITION_SK_PATHMEASURE_MATRIXFLAGS = 0x01,
  GET_TANGENT_SK_PATHMEASURE_MATRIXFLAGS = 0x02,
  GET_POS_AND_TAN_SK_PATHMEASURE_MATRIXFLAGS = GET_POSITION_SK_PATHMEASURE_MATRIXFLAGS | GET_TANGENT_SK_PATHMEASURE_MATRIXFLAGS
} sk_pathmeasure_matrixflags_t
@

-}
newtype Sk_pathmeasure_matrixflags = Sk_pathmeasure_matrixflags (#type sk_pathmeasure_matrixflags_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_pathmeasure_matrixflags_t"@ value (1/3): @"GET_POSITION_SK_PATHMEASURE_MATRIXFLAGS"@
pattern GET_POSITION_SK_PATHMEASURE_MATRIXFLAGS :: Sk_pathmeasure_matrixflags
pattern GET_POSITION_SK_PATHMEASURE_MATRIXFLAGS = (#const GET_POSITION_SK_PATHMEASURE_MATRIXFLAGS)

-- | C enum @"sk_pathmeasure_matrixflags_t"@ value (2/3): @"GET_TANGENT_SK_PATHMEASURE_MATRIXFLAGS"@
pattern GET_TANGENT_SK_PATHMEASURE_MATRIXFLAGS :: Sk_pathmeasure_matrixflags
pattern GET_TANGENT_SK_PATHMEASURE_MATRIXFLAGS = (#const GET_TANGENT_SK_PATHMEASURE_MATRIXFLAGS)

-- | C enum @"sk_pathmeasure_matrixflags_t"@ value (3/3): @"GET_POS_AND_TAN_SK_PATHMEASURE_MATRIXFLAGS"@
pattern GET_POS_AND_TAN_SK_PATHMEASURE_MATRIXFLAGS :: Sk_pathmeasure_matrixflags
pattern GET_POS_AND_TAN_SK_PATHMEASURE_MATRIXFLAGS = (#const GET_POS_AND_TAN_SK_PATHMEASURE_MATRIXFLAGS)

-- | C function pointer type: @typedef void (*sk_bitmap_release_proc)(void *addr, void *context)@
type Sk_bitmap_release_proc = Ptr (()) -> Ptr (()) -> IO (())

-- | Creates a 'FunPtr' of @"sk_bitmap_release_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_bitmap_release_proc :: Sk_bitmap_release_proc -> IO (FunPtr Sk_bitmap_release_proc)

-- | C function pointer type: @typedef void (*sk_data_release_proc)(const void *ptr, void *context)@
type Sk_data_release_proc = Ptr (()) -> Ptr (()) -> IO (())

-- | Creates a 'FunPtr' of @"sk_data_release_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_data_release_proc :: Sk_data_release_proc -> IO (FunPtr Sk_data_release_proc)

-- | C function pointer type: @typedef void (*sk_image_raster_release_proc)(const void *addr, void *context)@
type Sk_image_raster_release_proc = Ptr (()) -> Ptr (()) -> IO (())

-- | Creates a 'FunPtr' of @"sk_image_raster_release_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_image_raster_release_proc :: Sk_image_raster_release_proc -> IO (FunPtr Sk_image_raster_release_proc)

-- | C function pointer type: @typedef void (*sk_image_texture_release_proc)(void *context)@
type Sk_image_texture_release_proc = Ptr (()) -> IO (())

-- | Creates a 'FunPtr' of @"sk_image_texture_release_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_image_texture_release_proc :: Sk_image_texture_release_proc -> IO (FunPtr Sk_image_texture_release_proc)

-- | C function pointer type: @typedef void (*sk_surface_raster_release_proc)(void *addr, void *context)@
type Sk_surface_raster_release_proc = Ptr (()) -> Ptr (()) -> IO (())

-- | Creates a 'FunPtr' of @"sk_surface_raster_release_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_surface_raster_release_proc :: Sk_surface_raster_release_proc -> IO (FunPtr Sk_surface_raster_release_proc)

-- | C function pointer type: @typedef void (*sk_glyph_path_proc)(const sk_path_t *pathOrNull, const sk_matrix_t *matrix, void *context)@
type Sk_glyph_path_proc = Ptr (Sk_path) -> Ptr (Sk_matrix) -> Ptr (()) -> IO (())

-- | Creates a 'FunPtr' of @"sk_glyph_path_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_glyph_path_proc :: Sk_glyph_path_proc -> IO (FunPtr Sk_glyph_path_proc)

{- | C enum: @"sk_image_caching_hint_t"@

@
typedef enum 
{
  ALLOW_SK_IMAGE_CACHING_HINT,
  DISALLOW_SK_IMAGE_CACHING_HINT
} sk_image_caching_hint_t
@

-}
newtype Sk_image_caching_hint = Sk_image_caching_hint (#type sk_image_caching_hint_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_image_caching_hint_t"@ value (1/2): @"ALLOW_SK_IMAGE_CACHING_HINT"@
pattern ALLOW_SK_IMAGE_CACHING_HINT :: Sk_image_caching_hint
pattern ALLOW_SK_IMAGE_CACHING_HINT = (#const ALLOW_SK_IMAGE_CACHING_HINT)

-- | C enum @"sk_image_caching_hint_t"@ value (2/2): @"DISALLOW_SK_IMAGE_CACHING_HINT"@
pattern DISALLOW_SK_IMAGE_CACHING_HINT :: Sk_image_caching_hint
pattern DISALLOW_SK_IMAGE_CACHING_HINT = (#const DISALLOW_SK_IMAGE_CACHING_HINT)

{- | C enum: @"sk_bitmap_allocflags_t"@

@
typedef enum 
{
  NONE_SK_BITMAP_ALLOC_FLAGS = 0,
  ZERO_PIXELS_SK_BITMAP_ALLOC_FLAGS = 1 << 0
} sk_bitmap_allocflags_t
@

-}
newtype Sk_bitmap_allocflags = Sk_bitmap_allocflags (#type sk_bitmap_allocflags_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_bitmap_allocflags_t"@ value (1/2): @"NONE_SK_BITMAP_ALLOC_FLAGS"@
pattern NONE_SK_BITMAP_ALLOC_FLAGS :: Sk_bitmap_allocflags
pattern NONE_SK_BITMAP_ALLOC_FLAGS = (#const NONE_SK_BITMAP_ALLOC_FLAGS)

-- | C enum @"sk_bitmap_allocflags_t"@ value (2/2): @"ZERO_PIXELS_SK_BITMAP_ALLOC_FLAGS"@
pattern ZERO_PIXELS_SK_BITMAP_ALLOC_FLAGS :: Sk_bitmap_allocflags
pattern ZERO_PIXELS_SK_BITMAP_ALLOC_FLAGS = (#const ZERO_PIXELS_SK_BITMAP_ALLOC_FLAGS)

{- | C struct: @"sk_document_pdf_datetime_t"@

@
typedef struct 
{
  int16_t fTimeZoneMinutes;
  uint16_t fYear;
  uint8_t fMonth;
  uint8_t fDayOfWeek;
  uint8_t fDay;
  uint8_t fHour;
  uint8_t fMinute;
  uint8_t fSecond;
} sk_document_pdf_datetime_t
@
-}
data Sk_document_pdf_datetime = Sk_document_pdf_datetime
  { fTimeZoneMinutes :: Int16 -- ^ C field: @"int16_t fTimeZoneMinutes"@
  , fYear :: Word16 -- ^ C field: @"uint16_t fYear"@
  , fMonth :: Word8 -- ^ C field: @"uint8_t fMonth"@
  , fDayOfWeek :: Word8 -- ^ C field: @"uint8_t fDayOfWeek"@
  , fDay :: Word8 -- ^ C field: @"uint8_t fDay"@
  , fHour :: Word8 -- ^ C field: @"uint8_t fHour"@
  , fMinute :: Word8 -- ^ C field: @"uint8_t fMinute"@
  , fSecond :: Word8 -- ^ C field: @"uint8_t fSecond"@
  }
instance Foreign.Storable.Offset.Offset "fTimeZoneMinutes" Sk_document_pdf_datetime where
  rawOffset = (#offset sk_document_pdf_datetime_t, fTimeZoneMinutes)
instance Foreign.Storable.Offset.Offset "fYear" Sk_document_pdf_datetime where
  rawOffset = (#offset sk_document_pdf_datetime_t, fYear)
instance Foreign.Storable.Offset.Offset "fMonth" Sk_document_pdf_datetime where
  rawOffset = (#offset sk_document_pdf_datetime_t, fMonth)
instance Foreign.Storable.Offset.Offset "fDayOfWeek" Sk_document_pdf_datetime where
  rawOffset = (#offset sk_document_pdf_datetime_t, fDayOfWeek)
instance Foreign.Storable.Offset.Offset "fDay" Sk_document_pdf_datetime where
  rawOffset = (#offset sk_document_pdf_datetime_t, fDay)
instance Foreign.Storable.Offset.Offset "fHour" Sk_document_pdf_datetime where
  rawOffset = (#offset sk_document_pdf_datetime_t, fHour)
instance Foreign.Storable.Offset.Offset "fMinute" Sk_document_pdf_datetime where
  rawOffset = (#offset sk_document_pdf_datetime_t, fMinute)
instance Foreign.Storable.Offset.Offset "fSecond" Sk_document_pdf_datetime where
  rawOffset = (#offset sk_document_pdf_datetime_t, fSecond)
instance Foreign.Storable.Storable Sk_document_pdf_datetime where
  sizeOf _ = (#size sk_document_pdf_datetime_t)
  alignment _ = (#alignment sk_document_pdf_datetime_t)
  peek p' = do
    fTimeZoneMinutes <- (#peek sk_document_pdf_datetime_t, fTimeZoneMinutes) p'
    fYear <- (#peek sk_document_pdf_datetime_t, fYear) p'
    fMonth <- (#peek sk_document_pdf_datetime_t, fMonth) p'
    fDayOfWeek <- (#peek sk_document_pdf_datetime_t, fDayOfWeek) p'
    fDay <- (#peek sk_document_pdf_datetime_t, fDay) p'
    fHour <- (#peek sk_document_pdf_datetime_t, fHour) p'
    fMinute <- (#peek sk_document_pdf_datetime_t, fMinute) p'
    fSecond <- (#peek sk_document_pdf_datetime_t, fSecond) p'
    pure Sk_document_pdf_datetime{..}
  poke p' Sk_document_pdf_datetime{..} = do
    (#poke sk_document_pdf_datetime_t, fTimeZoneMinutes) p' fTimeZoneMinutes
    (#poke sk_document_pdf_datetime_t, fYear) p' fYear
    (#poke sk_document_pdf_datetime_t, fMonth) p' fMonth
    (#poke sk_document_pdf_datetime_t, fDayOfWeek) p' fDayOfWeek
    (#poke sk_document_pdf_datetime_t, fDay) p' fDay
    (#poke sk_document_pdf_datetime_t, fHour) p' fHour
    (#poke sk_document_pdf_datetime_t, fMinute) p' fMinute
    (#poke sk_document_pdf_datetime_t, fSecond) p' fSecond

{- | C struct: @"sk_document_pdf_metadata_t"@

@
typedef struct 
{
  sk_string_t *fTitle;
  sk_string_t *fAuthor;
  sk_string_t *fSubject;
  sk_string_t *fKeywords;
  sk_string_t *fCreator;
  sk_string_t *fProducer;
  sk_document_pdf_datetime_t *fCreation;
  sk_document_pdf_datetime_t *fModified;
  float fRasterDPI;
  _Bool fPDFA;
  int fEncodingQuality;
} sk_document_pdf_metadata_t
@
-}
data Sk_document_pdf_metadata = Sk_document_pdf_metadata
  { fTitle :: Ptr (Sk_string) -- ^ C field: @"sk_string_t *fTitle"@
  , fAuthor :: Ptr (Sk_string) -- ^ C field: @"sk_string_t *fAuthor"@
  , fSubject :: Ptr (Sk_string) -- ^ C field: @"sk_string_t *fSubject"@
  , fKeywords :: Ptr (Sk_string) -- ^ C field: @"sk_string_t *fKeywords"@
  , fCreator :: Ptr (Sk_string) -- ^ C field: @"sk_string_t *fCreator"@
  , fProducer :: Ptr (Sk_string) -- ^ C field: @"sk_string_t *fProducer"@
  , fCreation :: Ptr (Sk_document_pdf_datetime) -- ^ C field: @"sk_document_pdf_datetime_t *fCreation"@
  , fModified :: Ptr (Sk_document_pdf_datetime) -- ^ C field: @"sk_document_pdf_datetime_t *fModified"@
  , fRasterDPI :: CFloat -- ^ C field: @"float fRasterDPI"@
  , fPDFA :: CBool -- ^ C field: @"_Bool fPDFA"@
  , fEncodingQuality :: CInt -- ^ C field: @"int fEncodingQuality"@
  }
instance Foreign.Storable.Offset.Offset "fTitle" Sk_document_pdf_metadata where
  rawOffset = (#offset sk_document_pdf_metadata_t, fTitle)
instance Foreign.Storable.Offset.Offset "fAuthor" Sk_document_pdf_metadata where
  rawOffset = (#offset sk_document_pdf_metadata_t, fAuthor)
instance Foreign.Storable.Offset.Offset "fSubject" Sk_document_pdf_metadata where
  rawOffset = (#offset sk_document_pdf_metadata_t, fSubject)
instance Foreign.Storable.Offset.Offset "fKeywords" Sk_document_pdf_metadata where
  rawOffset = (#offset sk_document_pdf_metadata_t, fKeywords)
instance Foreign.Storable.Offset.Offset "fCreator" Sk_document_pdf_metadata where
  rawOffset = (#offset sk_document_pdf_metadata_t, fCreator)
instance Foreign.Storable.Offset.Offset "fProducer" Sk_document_pdf_metadata where
  rawOffset = (#offset sk_document_pdf_metadata_t, fProducer)
instance Foreign.Storable.Offset.Offset "fCreation" Sk_document_pdf_metadata where
  rawOffset = (#offset sk_document_pdf_metadata_t, fCreation)
instance Foreign.Storable.Offset.Offset "fModified" Sk_document_pdf_metadata where
  rawOffset = (#offset sk_document_pdf_metadata_t, fModified)
instance Foreign.Storable.Offset.Offset "fRasterDPI" Sk_document_pdf_metadata where
  rawOffset = (#offset sk_document_pdf_metadata_t, fRasterDPI)
instance Foreign.Storable.Offset.Offset "fPDFA" Sk_document_pdf_metadata where
  rawOffset = (#offset sk_document_pdf_metadata_t, fPDFA)
instance Foreign.Storable.Offset.Offset "fEncodingQuality" Sk_document_pdf_metadata where
  rawOffset = (#offset sk_document_pdf_metadata_t, fEncodingQuality)
instance Foreign.Storable.Storable Sk_document_pdf_metadata where
  sizeOf _ = (#size sk_document_pdf_metadata_t)
  alignment _ = (#alignment sk_document_pdf_metadata_t)
  peek p' = do
    fTitle <- (#peek sk_document_pdf_metadata_t, fTitle) p'
    fAuthor <- (#peek sk_document_pdf_metadata_t, fAuthor) p'
    fSubject <- (#peek sk_document_pdf_metadata_t, fSubject) p'
    fKeywords <- (#peek sk_document_pdf_metadata_t, fKeywords) p'
    fCreator <- (#peek sk_document_pdf_metadata_t, fCreator) p'
    fProducer <- (#peek sk_document_pdf_metadata_t, fProducer) p'
    fCreation <- (#peek sk_document_pdf_metadata_t, fCreation) p'
    fModified <- (#peek sk_document_pdf_metadata_t, fModified) p'
    fRasterDPI <- (#peek sk_document_pdf_metadata_t, fRasterDPI) p'
    fPDFA <- (#peek sk_document_pdf_metadata_t, fPDFA) p'
    fEncodingQuality <- (#peek sk_document_pdf_metadata_t, fEncodingQuality) p'
    pure Sk_document_pdf_metadata{..}
  poke p' Sk_document_pdf_metadata{..} = do
    (#poke sk_document_pdf_metadata_t, fTitle) p' fTitle
    (#poke sk_document_pdf_metadata_t, fAuthor) p' fAuthor
    (#poke sk_document_pdf_metadata_t, fSubject) p' fSubject
    (#poke sk_document_pdf_metadata_t, fKeywords) p' fKeywords
    (#poke sk_document_pdf_metadata_t, fCreator) p' fCreator
    (#poke sk_document_pdf_metadata_t, fProducer) p' fProducer
    (#poke sk_document_pdf_metadata_t, fCreation) p' fCreation
    (#poke sk_document_pdf_metadata_t, fModified) p' fModified
    (#poke sk_document_pdf_metadata_t, fRasterDPI) p' fRasterDPI
    (#poke sk_document_pdf_metadata_t, fPDFA) p' fPDFA
    (#poke sk_document_pdf_metadata_t, fEncodingQuality) p' fEncodingQuality

{- | C struct: @"sk_imageinfo_t"@

@
typedef struct 
{
  sk_colorspace_t *colorspace;
  int32_t width;
  int32_t height;
  sk_colortype_t colorType;
  sk_alphatype_t alphaType;
} sk_imageinfo_t
@
-}
data Sk_imageinfo = Sk_imageinfo
  { colorspace :: Ptr (Sk_colorspace) -- ^ C field: @"sk_colorspace_t *colorspace"@
  , width :: Int32 -- ^ C field: @"int32_t width"@
  , height :: Int32 -- ^ C field: @"int32_t height"@
  , colorType :: Sk_colortype -- ^ C field: @"sk_colortype_t colorType"@
  , alphaType :: Sk_alphatype -- ^ C field: @"sk_alphatype_t alphaType"@
  }
instance Foreign.Storable.Offset.Offset "colorspace" Sk_imageinfo where
  rawOffset = (#offset sk_imageinfo_t, colorspace)
instance Foreign.Storable.Offset.Offset "width" Sk_imageinfo where
  rawOffset = (#offset sk_imageinfo_t, width)
instance Foreign.Storable.Offset.Offset "height" Sk_imageinfo where
  rawOffset = (#offset sk_imageinfo_t, height)
instance Foreign.Storable.Offset.Offset "colorType" Sk_imageinfo where
  rawOffset = (#offset sk_imageinfo_t, colorType)
instance Foreign.Storable.Offset.Offset "alphaType" Sk_imageinfo where
  rawOffset = (#offset sk_imageinfo_t, alphaType)
instance Foreign.Storable.Storable Sk_imageinfo where
  sizeOf _ = (#size sk_imageinfo_t)
  alignment _ = (#alignment sk_imageinfo_t)
  peek p' = do
    colorspace <- (#peek sk_imageinfo_t, colorspace) p'
    width <- (#peek sk_imageinfo_t, width) p'
    height <- (#peek sk_imageinfo_t, height) p'
    colorType <- (#peek sk_imageinfo_t, colorType) p'
    alphaType <- (#peek sk_imageinfo_t, alphaType) p'
    pure Sk_imageinfo{..}
  poke p' Sk_imageinfo{..} = do
    (#poke sk_imageinfo_t, colorspace) p' colorspace
    (#poke sk_imageinfo_t, width) p' width
    (#poke sk_imageinfo_t, height) p' height
    (#poke sk_imageinfo_t, colorType) p' colorType
    (#poke sk_imageinfo_t, alphaType) p' alphaType

{- | C enum: @"sk_codecanimation_disposalmethod_t"@

@
typedef enum 
{
  KEEP_SK_CODEC_ANIMATION_DISPOSAL_METHOD = 1,
  RESTORE_BG_COLOR_SK_CODEC_ANIMATION_DISPOSAL_METHOD = 2,
  RESTORE_PREVIOUS_SK_CODEC_ANIMATION_DISPOSAL_METHOD = 3
} sk_codecanimation_disposalmethod_t
@

-}
newtype Sk_codecanimation_disposalmethod = Sk_codecanimation_disposalmethod (#type sk_codecanimation_disposalmethod_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_codecanimation_disposalmethod_t"@ value (1/3): @"KEEP_SK_CODEC_ANIMATION_DISPOSAL_METHOD"@
pattern KEEP_SK_CODEC_ANIMATION_DISPOSAL_METHOD :: Sk_codecanimation_disposalmethod
pattern KEEP_SK_CODEC_ANIMATION_DISPOSAL_METHOD = (#const KEEP_SK_CODEC_ANIMATION_DISPOSAL_METHOD)

-- | C enum @"sk_codecanimation_disposalmethod_t"@ value (2/3): @"RESTORE_BG_COLOR_SK_CODEC_ANIMATION_DISPOSAL_METHOD"@
pattern RESTORE_BG_COLOR_SK_CODEC_ANIMATION_DISPOSAL_METHOD :: Sk_codecanimation_disposalmethod
pattern RESTORE_BG_COLOR_SK_CODEC_ANIMATION_DISPOSAL_METHOD = (#const RESTORE_BG_COLOR_SK_CODEC_ANIMATION_DISPOSAL_METHOD)

-- | C enum @"sk_codecanimation_disposalmethod_t"@ value (3/3): @"RESTORE_PREVIOUS_SK_CODEC_ANIMATION_DISPOSAL_METHOD"@
pattern RESTORE_PREVIOUS_SK_CODEC_ANIMATION_DISPOSAL_METHOD :: Sk_codecanimation_disposalmethod
pattern RESTORE_PREVIOUS_SK_CODEC_ANIMATION_DISPOSAL_METHOD = (#const RESTORE_PREVIOUS_SK_CODEC_ANIMATION_DISPOSAL_METHOD)

{- | C enum: @"sk_codecanimation_blend_t"@

@
typedef enum 
{
  SRC_OVER_SK_CODEC_ANIMATION_BLEND = 0,
  SRC_SK_CODEC_ANIMATION_BLEND = 1
} sk_codecanimation_blend_t
@

-}
newtype Sk_codecanimation_blend = Sk_codecanimation_blend (#type sk_codecanimation_blend_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_codecanimation_blend_t"@ value (1/2): @"SRC_OVER_SK_CODEC_ANIMATION_BLEND"@
pattern SRC_OVER_SK_CODEC_ANIMATION_BLEND :: Sk_codecanimation_blend
pattern SRC_OVER_SK_CODEC_ANIMATION_BLEND = (#const SRC_OVER_SK_CODEC_ANIMATION_BLEND)

-- | C enum @"sk_codecanimation_blend_t"@ value (2/2): @"SRC_SK_CODEC_ANIMATION_BLEND"@
pattern SRC_SK_CODEC_ANIMATION_BLEND :: Sk_codecanimation_blend
pattern SRC_SK_CODEC_ANIMATION_BLEND = (#const SRC_SK_CODEC_ANIMATION_BLEND)

{- | C struct: @"sk_codec_frameinfo_t"@

@
typedef struct 
{
  int fRequiredFrame;
  int fDuration;
  _Bool fFullyReceived;
  sk_alphatype_t fAlphaType;
  _Bool fHasAlphaWithinBounds;
  sk_codecanimation_disposalmethod_t fDisposalMethod;
  sk_codecanimation_blend_t fBlend;
  sk_irect_t fFrameRect;
} sk_codec_frameinfo_t
@
-}
data Sk_codec_frameinfo = Sk_codec_frameinfo
  { fRequiredFrame :: CInt -- ^ C field: @"int fRequiredFrame"@
  , fDuration :: CInt -- ^ C field: @"int fDuration"@
  , fFullyReceived :: CBool -- ^ C field: @"_Bool fFullyReceived"@
  , fAlphaType :: Sk_alphatype -- ^ C field: @"sk_alphatype_t fAlphaType"@
  , fHasAlphaWithinBounds :: CBool -- ^ C field: @"_Bool fHasAlphaWithinBounds"@
  , fDisposalMethod :: Sk_codecanimation_disposalmethod -- ^ C field: @"sk_codecanimation_disposalmethod_t fDisposalMethod"@
  , fBlend :: Sk_codecanimation_blend -- ^ C field: @"sk_codecanimation_blend_t fBlend"@
  , fFrameRect :: Sk_irect -- ^ C field: @"sk_irect_t fFrameRect"@
  }
instance Foreign.Storable.Offset.Offset "fRequiredFrame" Sk_codec_frameinfo where
  rawOffset = (#offset sk_codec_frameinfo_t, fRequiredFrame)
instance Foreign.Storable.Offset.Offset "fDuration" Sk_codec_frameinfo where
  rawOffset = (#offset sk_codec_frameinfo_t, fDuration)
instance Foreign.Storable.Offset.Offset "fFullyReceived" Sk_codec_frameinfo where
  rawOffset = (#offset sk_codec_frameinfo_t, fFullyReceived)
instance Foreign.Storable.Offset.Offset "fAlphaType" Sk_codec_frameinfo where
  rawOffset = (#offset sk_codec_frameinfo_t, fAlphaType)
instance Foreign.Storable.Offset.Offset "fHasAlphaWithinBounds" Sk_codec_frameinfo where
  rawOffset = (#offset sk_codec_frameinfo_t, fHasAlphaWithinBounds)
instance Foreign.Storable.Offset.Offset "fDisposalMethod" Sk_codec_frameinfo where
  rawOffset = (#offset sk_codec_frameinfo_t, fDisposalMethod)
instance Foreign.Storable.Offset.Offset "fBlend" Sk_codec_frameinfo where
  rawOffset = (#offset sk_codec_frameinfo_t, fBlend)
instance Foreign.Storable.Offset.Offset "fFrameRect" Sk_codec_frameinfo where
  rawOffset = (#offset sk_codec_frameinfo_t, fFrameRect)
instance Foreign.Storable.Storable Sk_codec_frameinfo where
  sizeOf _ = (#size sk_codec_frameinfo_t)
  alignment _ = (#alignment sk_codec_frameinfo_t)
  peek p' = do
    fRequiredFrame <- (#peek sk_codec_frameinfo_t, fRequiredFrame) p'
    fDuration <- (#peek sk_codec_frameinfo_t, fDuration) p'
    fFullyReceived <- (#peek sk_codec_frameinfo_t, fFullyReceived) p'
    fAlphaType <- (#peek sk_codec_frameinfo_t, fAlphaType) p'
    fHasAlphaWithinBounds <- (#peek sk_codec_frameinfo_t, fHasAlphaWithinBounds) p'
    fDisposalMethod <- (#peek sk_codec_frameinfo_t, fDisposalMethod) p'
    fBlend <- (#peek sk_codec_frameinfo_t, fBlend) p'
    fFrameRect <- (#peek sk_codec_frameinfo_t, fFrameRect) p'
    pure Sk_codec_frameinfo{..}
  poke p' Sk_codec_frameinfo{..} = do
    (#poke sk_codec_frameinfo_t, fRequiredFrame) p' fRequiredFrame
    (#poke sk_codec_frameinfo_t, fDuration) p' fDuration
    (#poke sk_codec_frameinfo_t, fFullyReceived) p' fFullyReceived
    (#poke sk_codec_frameinfo_t, fAlphaType) p' fAlphaType
    (#poke sk_codec_frameinfo_t, fHasAlphaWithinBounds) p' fHasAlphaWithinBounds
    (#poke sk_codec_frameinfo_t, fDisposalMethod) p' fDisposalMethod
    (#poke sk_codec_frameinfo_t, fBlend) p' fBlend
    (#poke sk_codec_frameinfo_t, fFrameRect) p' fFrameRect

{- | Opaque C struct: @"sk_svgcanvas_t"@
-}
data Sk_svgcanvas = Sk_svgcanvas

{- | C enum: @"sk_vertices_vertex_mode_t"@

@
typedef enum 
{
  TRIANGLES_SK_VERTICES_VERTEX_MODE,
  TRIANGLE_STRIP_SK_VERTICES_VERTEX_MODE,
  TRIANGLE_FAN_SK_VERTICES_VERTEX_MODE
} sk_vertices_vertex_mode_t
@

-}
newtype Sk_vertices_vertex_mode = Sk_vertices_vertex_mode (#type sk_vertices_vertex_mode_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_vertices_vertex_mode_t"@ value (1/3): @"TRIANGLES_SK_VERTICES_VERTEX_MODE"@
pattern TRIANGLES_SK_VERTICES_VERTEX_MODE :: Sk_vertices_vertex_mode
pattern TRIANGLES_SK_VERTICES_VERTEX_MODE = (#const TRIANGLES_SK_VERTICES_VERTEX_MODE)

-- | C enum @"sk_vertices_vertex_mode_t"@ value (2/3): @"TRIANGLE_STRIP_SK_VERTICES_VERTEX_MODE"@
pattern TRIANGLE_STRIP_SK_VERTICES_VERTEX_MODE :: Sk_vertices_vertex_mode
pattern TRIANGLE_STRIP_SK_VERTICES_VERTEX_MODE = (#const TRIANGLE_STRIP_SK_VERTICES_VERTEX_MODE)

-- | C enum @"sk_vertices_vertex_mode_t"@ value (3/3): @"TRIANGLE_FAN_SK_VERTICES_VERTEX_MODE"@
pattern TRIANGLE_FAN_SK_VERTICES_VERTEX_MODE :: Sk_vertices_vertex_mode
pattern TRIANGLE_FAN_SK_VERTICES_VERTEX_MODE = (#const TRIANGLE_FAN_SK_VERTICES_VERTEX_MODE)

{- | Opaque C struct: @"sk_vertices_t"@
-}
data Sk_vertices = Sk_vertices

{- | C struct: @"sk_colorspace_transfer_fn_t"@

@
typedef struct sk_colorspace_transfer_fn_t
{
  float fG;
  float fA;
  float fB;
  float fC;
  float fD;
  float fE;
  float fF;
} sk_colorspace_transfer_fn_t
@
-}
data Sk_colorspace_transfer_fn = Sk_colorspace_transfer_fn
  { fG :: CFloat -- ^ C field: @"float fG"@
  , fA :: CFloat -- ^ C field: @"float fA"@
  , fB :: CFloat -- ^ C field: @"float fB"@
  , fC :: CFloat -- ^ C field: @"float fC"@
  , fD :: CFloat -- ^ C field: @"float fD"@
  , fE :: CFloat -- ^ C field: @"float fE"@
  , fF :: CFloat -- ^ C field: @"float fF"@
  }
instance Foreign.Storable.Offset.Offset "fG" Sk_colorspace_transfer_fn where
  rawOffset = (#offset sk_colorspace_transfer_fn_t, fG)
instance Foreign.Storable.Offset.Offset "fA" Sk_colorspace_transfer_fn where
  rawOffset = (#offset sk_colorspace_transfer_fn_t, fA)
instance Foreign.Storable.Offset.Offset "fB" Sk_colorspace_transfer_fn where
  rawOffset = (#offset sk_colorspace_transfer_fn_t, fB)
instance Foreign.Storable.Offset.Offset "fC" Sk_colorspace_transfer_fn where
  rawOffset = (#offset sk_colorspace_transfer_fn_t, fC)
instance Foreign.Storable.Offset.Offset "fD" Sk_colorspace_transfer_fn where
  rawOffset = (#offset sk_colorspace_transfer_fn_t, fD)
instance Foreign.Storable.Offset.Offset "fE" Sk_colorspace_transfer_fn where
  rawOffset = (#offset sk_colorspace_transfer_fn_t, fE)
instance Foreign.Storable.Offset.Offset "fF" Sk_colorspace_transfer_fn where
  rawOffset = (#offset sk_colorspace_transfer_fn_t, fF)
instance Foreign.Storable.Storable Sk_colorspace_transfer_fn where
  sizeOf _ = (#size sk_colorspace_transfer_fn_t)
  alignment _ = (#alignment sk_colorspace_transfer_fn_t)
  peek p' = do
    fG <- (#peek sk_colorspace_transfer_fn_t, fG) p'
    fA <- (#peek sk_colorspace_transfer_fn_t, fA) p'
    fB <- (#peek sk_colorspace_transfer_fn_t, fB) p'
    fC <- (#peek sk_colorspace_transfer_fn_t, fC) p'
    fD <- (#peek sk_colorspace_transfer_fn_t, fD) p'
    fE <- (#peek sk_colorspace_transfer_fn_t, fE) p'
    fF <- (#peek sk_colorspace_transfer_fn_t, fF) p'
    pure Sk_colorspace_transfer_fn{..}
  poke p' Sk_colorspace_transfer_fn{..} = do
    (#poke sk_colorspace_transfer_fn_t, fG) p' fG
    (#poke sk_colorspace_transfer_fn_t, fA) p' fA
    (#poke sk_colorspace_transfer_fn_t, fB) p' fB
    (#poke sk_colorspace_transfer_fn_t, fC) p' fC
    (#poke sk_colorspace_transfer_fn_t, fD) p' fD
    (#poke sk_colorspace_transfer_fn_t, fE) p' fE
    (#poke sk_colorspace_transfer_fn_t, fF) p' fF

{- | C struct: @"sk_colorspace_primaries_t"@

@
typedef struct sk_colorspace_primaries_t
{
  float fRX;
  float fRY;
  float fGX;
  float fGY;
  float fBX;
  float fBY;
  float fWX;
  float fWY;
} sk_colorspace_primaries_t
@
-}
data Sk_colorspace_primaries = Sk_colorspace_primaries
  { fRX :: CFloat -- ^ C field: @"float fRX"@
  , fRY :: CFloat -- ^ C field: @"float fRY"@
  , fGX :: CFloat -- ^ C field: @"float fGX"@
  , fGY :: CFloat -- ^ C field: @"float fGY"@
  , fBX :: CFloat -- ^ C field: @"float fBX"@
  , fBY :: CFloat -- ^ C field: @"float fBY"@
  , fWX :: CFloat -- ^ C field: @"float fWX"@
  , fWY :: CFloat -- ^ C field: @"float fWY"@
  }
instance Foreign.Storable.Offset.Offset "fRX" Sk_colorspace_primaries where
  rawOffset = (#offset sk_colorspace_primaries_t, fRX)
instance Foreign.Storable.Offset.Offset "fRY" Sk_colorspace_primaries where
  rawOffset = (#offset sk_colorspace_primaries_t, fRY)
instance Foreign.Storable.Offset.Offset "fGX" Sk_colorspace_primaries where
  rawOffset = (#offset sk_colorspace_primaries_t, fGX)
instance Foreign.Storable.Offset.Offset "fGY" Sk_colorspace_primaries where
  rawOffset = (#offset sk_colorspace_primaries_t, fGY)
instance Foreign.Storable.Offset.Offset "fBX" Sk_colorspace_primaries where
  rawOffset = (#offset sk_colorspace_primaries_t, fBX)
instance Foreign.Storable.Offset.Offset "fBY" Sk_colorspace_primaries where
  rawOffset = (#offset sk_colorspace_primaries_t, fBY)
instance Foreign.Storable.Offset.Offset "fWX" Sk_colorspace_primaries where
  rawOffset = (#offset sk_colorspace_primaries_t, fWX)
instance Foreign.Storable.Offset.Offset "fWY" Sk_colorspace_primaries where
  rawOffset = (#offset sk_colorspace_primaries_t, fWY)
instance Foreign.Storable.Storable Sk_colorspace_primaries where
  sizeOf _ = (#size sk_colorspace_primaries_t)
  alignment _ = (#alignment sk_colorspace_primaries_t)
  peek p' = do
    fRX <- (#peek sk_colorspace_primaries_t, fRX) p'
    fRY <- (#peek sk_colorspace_primaries_t, fRY) p'
    fGX <- (#peek sk_colorspace_primaries_t, fGX) p'
    fGY <- (#peek sk_colorspace_primaries_t, fGY) p'
    fBX <- (#peek sk_colorspace_primaries_t, fBX) p'
    fBY <- (#peek sk_colorspace_primaries_t, fBY) p'
    fWX <- (#peek sk_colorspace_primaries_t, fWX) p'
    fWY <- (#peek sk_colorspace_primaries_t, fWY) p'
    pure Sk_colorspace_primaries{..}
  poke p' Sk_colorspace_primaries{..} = do
    (#poke sk_colorspace_primaries_t, fRX) p' fRX
    (#poke sk_colorspace_primaries_t, fRY) p' fRY
    (#poke sk_colorspace_primaries_t, fGX) p' fGX
    (#poke sk_colorspace_primaries_t, fGY) p' fGY
    (#poke sk_colorspace_primaries_t, fBX) p' fBX
    (#poke sk_colorspace_primaries_t, fBY) p' fBY
    (#poke sk_colorspace_primaries_t, fWX) p' fWX
    (#poke sk_colorspace_primaries_t, fWY) p' fWY

{- | C struct: @"sk_colorspace_xyz_t"@

@
typedef struct sk_colorspace_xyz_t
{
  float fM00;
  float fM01;
  float fM02;
  float fM10;
  float fM11;
  float fM12;
  float fM20;
  float fM21;
  float fM22;
} sk_colorspace_xyz_t
@
-}
data Sk_colorspace_xyz = Sk_colorspace_xyz
  { fM00 :: CFloat -- ^ C field: @"float fM00"@
  , fM01 :: CFloat -- ^ C field: @"float fM01"@
  , fM02 :: CFloat -- ^ C field: @"float fM02"@
  , fM10 :: CFloat -- ^ C field: @"float fM10"@
  , fM11 :: CFloat -- ^ C field: @"float fM11"@
  , fM12 :: CFloat -- ^ C field: @"float fM12"@
  , fM20 :: CFloat -- ^ C field: @"float fM20"@
  , fM21 :: CFloat -- ^ C field: @"float fM21"@
  , fM22 :: CFloat -- ^ C field: @"float fM22"@
  }
instance Foreign.Storable.Offset.Offset "fM00" Sk_colorspace_xyz where
  rawOffset = (#offset sk_colorspace_xyz_t, fM00)
instance Foreign.Storable.Offset.Offset "fM01" Sk_colorspace_xyz where
  rawOffset = (#offset sk_colorspace_xyz_t, fM01)
instance Foreign.Storable.Offset.Offset "fM02" Sk_colorspace_xyz where
  rawOffset = (#offset sk_colorspace_xyz_t, fM02)
instance Foreign.Storable.Offset.Offset "fM10" Sk_colorspace_xyz where
  rawOffset = (#offset sk_colorspace_xyz_t, fM10)
instance Foreign.Storable.Offset.Offset "fM11" Sk_colorspace_xyz where
  rawOffset = (#offset sk_colorspace_xyz_t, fM11)
instance Foreign.Storable.Offset.Offset "fM12" Sk_colorspace_xyz where
  rawOffset = (#offset sk_colorspace_xyz_t, fM12)
instance Foreign.Storable.Offset.Offset "fM20" Sk_colorspace_xyz where
  rawOffset = (#offset sk_colorspace_xyz_t, fM20)
instance Foreign.Storable.Offset.Offset "fM21" Sk_colorspace_xyz where
  rawOffset = (#offset sk_colorspace_xyz_t, fM21)
instance Foreign.Storable.Offset.Offset "fM22" Sk_colorspace_xyz where
  rawOffset = (#offset sk_colorspace_xyz_t, fM22)
instance Foreign.Storable.Storable Sk_colorspace_xyz where
  sizeOf _ = (#size sk_colorspace_xyz_t)
  alignment _ = (#alignment sk_colorspace_xyz_t)
  peek p' = do
    fM00 <- (#peek sk_colorspace_xyz_t, fM00) p'
    fM01 <- (#peek sk_colorspace_xyz_t, fM01) p'
    fM02 <- (#peek sk_colorspace_xyz_t, fM02) p'
    fM10 <- (#peek sk_colorspace_xyz_t, fM10) p'
    fM11 <- (#peek sk_colorspace_xyz_t, fM11) p'
    fM12 <- (#peek sk_colorspace_xyz_t, fM12) p'
    fM20 <- (#peek sk_colorspace_xyz_t, fM20) p'
    fM21 <- (#peek sk_colorspace_xyz_t, fM21) p'
    fM22 <- (#peek sk_colorspace_xyz_t, fM22) p'
    pure Sk_colorspace_xyz{..}
  poke p' Sk_colorspace_xyz{..} = do
    (#poke sk_colorspace_xyz_t, fM00) p' fM00
    (#poke sk_colorspace_xyz_t, fM01) p' fM01
    (#poke sk_colorspace_xyz_t, fM02) p' fM02
    (#poke sk_colorspace_xyz_t, fM10) p' fM10
    (#poke sk_colorspace_xyz_t, fM11) p' fM11
    (#poke sk_colorspace_xyz_t, fM12) p' fM12
    (#poke sk_colorspace_xyz_t, fM20) p' fM20
    (#poke sk_colorspace_xyz_t, fM21) p' fM21
    (#poke sk_colorspace_xyz_t, fM22) p' fM22

{- | Opaque C struct: @"sk_colorspace_icc_profile_t"@
-}
data Sk_colorspace_icc_profile = Sk_colorspace_icc_profile

{- | C enum: @"sk_highcontrastconfig_invertstyle_t"@

@
typedef enum 
{
  NO_INVERT_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE,
  INVERT_BRIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE,
  INVERT_LIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE
} sk_highcontrastconfig_invertstyle_t
@

-}
newtype Sk_highcontrastconfig_invertstyle = Sk_highcontrastconfig_invertstyle (#type sk_highcontrastconfig_invertstyle_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_highcontrastconfig_invertstyle_t"@ value (1/3): @"NO_INVERT_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE"@
pattern NO_INVERT_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE :: Sk_highcontrastconfig_invertstyle
pattern NO_INVERT_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE = (#const NO_INVERT_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE)

-- | C enum @"sk_highcontrastconfig_invertstyle_t"@ value (2/3): @"INVERT_BRIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE"@
pattern INVERT_BRIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE :: Sk_highcontrastconfig_invertstyle
pattern INVERT_BRIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE = (#const INVERT_BRIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE)

-- | C enum @"sk_highcontrastconfig_invertstyle_t"@ value (3/3): @"INVERT_LIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE"@
pattern INVERT_LIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE :: Sk_highcontrastconfig_invertstyle
pattern INVERT_LIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE = (#const INVERT_LIGHTNESS_SK_HIGH_CONTRAST_CONFIG_INVERT_STYLE)

{- | C struct: @"sk_highcontrastconfig_t"@

@
typedef struct 
{
  _Bool fGrayscale;
  sk_highcontrastconfig_invertstyle_t fInvertStyle;
  float fContrast;
} sk_highcontrastconfig_t
@
-}
data Sk_highcontrastconfig = Sk_highcontrastconfig
  { fGrayscale :: CBool -- ^ C field: @"_Bool fGrayscale"@
  , fInvertStyle :: Sk_highcontrastconfig_invertstyle -- ^ C field: @"sk_highcontrastconfig_invertstyle_t fInvertStyle"@
  , fContrast :: CFloat -- ^ C field: @"float fContrast"@
  }
instance Foreign.Storable.Offset.Offset "fGrayscale" Sk_highcontrastconfig where
  rawOffset = (#offset sk_highcontrastconfig_t, fGrayscale)
instance Foreign.Storable.Offset.Offset "fInvertStyle" Sk_highcontrastconfig where
  rawOffset = (#offset sk_highcontrastconfig_t, fInvertStyle)
instance Foreign.Storable.Offset.Offset "fContrast" Sk_highcontrastconfig where
  rawOffset = (#offset sk_highcontrastconfig_t, fContrast)
instance Foreign.Storable.Storable Sk_highcontrastconfig where
  sizeOf _ = (#size sk_highcontrastconfig_t)
  alignment _ = (#alignment sk_highcontrastconfig_t)
  peek p' = do
    fGrayscale <- (#peek sk_highcontrastconfig_t, fGrayscale) p'
    fInvertStyle <- (#peek sk_highcontrastconfig_t, fInvertStyle) p'
    fContrast <- (#peek sk_highcontrastconfig_t, fContrast) p'
    pure Sk_highcontrastconfig{..}
  poke p' Sk_highcontrastconfig{..} = do
    (#poke sk_highcontrastconfig_t, fGrayscale) p' fGrayscale
    (#poke sk_highcontrastconfig_t, fInvertStyle) p' fInvertStyle
    (#poke sk_highcontrastconfig_t, fContrast) p' fContrast

{- | C enum: @"sk_pngencoder_filterflags_t"@

@
typedef enum 
{
  ZERO_SK_PNGENCODER_FILTER_FLAGS = 0x00,
  NONE_SK_PNGENCODER_FILTER_FLAGS = 0x08,
  SUB_SK_PNGENCODER_FILTER_FLAGS = 0x10,
  UP_SK_PNGENCODER_FILTER_FLAGS = 0x20,
  AVG_SK_PNGENCODER_FILTER_FLAGS = 0x40,
  PAETH_SK_PNGENCODER_FILTER_FLAGS = 0x80,
  ALL_SK_PNGENCODER_FILTER_FLAGS = (((NONE_SK_PNGENCODER_FILTER_FLAGS | SUB_SK_PNGENCODER_FILTER_FLAGS) | UP_SK_PNGENCODER_FILTER_FLAGS) | AVG_SK_PNGENCODER_FILTER_FLAGS) | PAETH_SK_PNGENCODER_FILTER_FLAGS
} sk_pngencoder_filterflags_t
@

-}
newtype Sk_pngencoder_filterflags = Sk_pngencoder_filterflags (#type sk_pngencoder_filterflags_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_pngencoder_filterflags_t"@ value (1/7): @"ZERO_SK_PNGENCODER_FILTER_FLAGS"@
pattern ZERO_SK_PNGENCODER_FILTER_FLAGS :: Sk_pngencoder_filterflags
pattern ZERO_SK_PNGENCODER_FILTER_FLAGS = (#const ZERO_SK_PNGENCODER_FILTER_FLAGS)

-- | C enum @"sk_pngencoder_filterflags_t"@ value (2/7): @"NONE_SK_PNGENCODER_FILTER_FLAGS"@
pattern NONE_SK_PNGENCODER_FILTER_FLAGS :: Sk_pngencoder_filterflags
pattern NONE_SK_PNGENCODER_FILTER_FLAGS = (#const NONE_SK_PNGENCODER_FILTER_FLAGS)

-- | C enum @"sk_pngencoder_filterflags_t"@ value (3/7): @"SUB_SK_PNGENCODER_FILTER_FLAGS"@
pattern SUB_SK_PNGENCODER_FILTER_FLAGS :: Sk_pngencoder_filterflags
pattern SUB_SK_PNGENCODER_FILTER_FLAGS = (#const SUB_SK_PNGENCODER_FILTER_FLAGS)

-- | C enum @"sk_pngencoder_filterflags_t"@ value (4/7): @"UP_SK_PNGENCODER_FILTER_FLAGS"@
pattern UP_SK_PNGENCODER_FILTER_FLAGS :: Sk_pngencoder_filterflags
pattern UP_SK_PNGENCODER_FILTER_FLAGS = (#const UP_SK_PNGENCODER_FILTER_FLAGS)

-- | C enum @"sk_pngencoder_filterflags_t"@ value (5/7): @"AVG_SK_PNGENCODER_FILTER_FLAGS"@
pattern AVG_SK_PNGENCODER_FILTER_FLAGS :: Sk_pngencoder_filterflags
pattern AVG_SK_PNGENCODER_FILTER_FLAGS = (#const AVG_SK_PNGENCODER_FILTER_FLAGS)

-- | C enum @"sk_pngencoder_filterflags_t"@ value (6/7): @"PAETH_SK_PNGENCODER_FILTER_FLAGS"@
pattern PAETH_SK_PNGENCODER_FILTER_FLAGS :: Sk_pngencoder_filterflags
pattern PAETH_SK_PNGENCODER_FILTER_FLAGS = (#const PAETH_SK_PNGENCODER_FILTER_FLAGS)

-- | C enum @"sk_pngencoder_filterflags_t"@ value (7/7): @"ALL_SK_PNGENCODER_FILTER_FLAGS"@
pattern ALL_SK_PNGENCODER_FILTER_FLAGS :: Sk_pngencoder_filterflags
pattern ALL_SK_PNGENCODER_FILTER_FLAGS = (#const ALL_SK_PNGENCODER_FILTER_FLAGS)

{- | C struct: @"sk_pngencoder_options_t"@

@
typedef struct 
{
  sk_pngencoder_filterflags_t fFilterFlags;
  int fZLibLevel;
  void *fComments;
  const sk_colorspace_icc_profile_t *fICCProfile;
  const char *fICCProfileDescription;
} sk_pngencoder_options_t
@
-}
data Sk_pngencoder_options = Sk_pngencoder_options
  { fFilterFlags :: Sk_pngencoder_filterflags -- ^ C field: @"sk_pngencoder_filterflags_t fFilterFlags"@
  , fZLibLevel :: CInt -- ^ C field: @"int fZLibLevel"@
  , fComments :: Ptr (()) -- ^ C field: @"void *fComments"@
  , fICCProfile :: Ptr (Sk_colorspace_icc_profile) -- ^ C field: @"const sk_colorspace_icc_profile_t *fICCProfile"@
  , fICCProfileDescription :: Ptr (CChar) -- ^ C field: @"const char *fICCProfileDescription"@
  }
instance Foreign.Storable.Offset.Offset "fFilterFlags" Sk_pngencoder_options where
  rawOffset = (#offset sk_pngencoder_options_t, fFilterFlags)
instance Foreign.Storable.Offset.Offset "fZLibLevel" Sk_pngencoder_options where
  rawOffset = (#offset sk_pngencoder_options_t, fZLibLevel)
instance Foreign.Storable.Offset.Offset "fComments" Sk_pngencoder_options where
  rawOffset = (#offset sk_pngencoder_options_t, fComments)
instance Foreign.Storable.Offset.Offset "fICCProfile" Sk_pngencoder_options where
  rawOffset = (#offset sk_pngencoder_options_t, fICCProfile)
instance Foreign.Storable.Offset.Offset "fICCProfileDescription" Sk_pngencoder_options where
  rawOffset = (#offset sk_pngencoder_options_t, fICCProfileDescription)
instance Foreign.Storable.Storable Sk_pngencoder_options where
  sizeOf _ = (#size sk_pngencoder_options_t)
  alignment _ = (#alignment sk_pngencoder_options_t)
  peek p' = do
    fFilterFlags <- (#peek sk_pngencoder_options_t, fFilterFlags) p'
    fZLibLevel <- (#peek sk_pngencoder_options_t, fZLibLevel) p'
    fComments <- (#peek sk_pngencoder_options_t, fComments) p'
    fICCProfile <- (#peek sk_pngencoder_options_t, fICCProfile) p'
    fICCProfileDescription <- (#peek sk_pngencoder_options_t, fICCProfileDescription) p'
    pure Sk_pngencoder_options{..}
  poke p' Sk_pngencoder_options{..} = do
    (#poke sk_pngencoder_options_t, fFilterFlags) p' fFilterFlags
    (#poke sk_pngencoder_options_t, fZLibLevel) p' fZLibLevel
    (#poke sk_pngencoder_options_t, fComments) p' fComments
    (#poke sk_pngencoder_options_t, fICCProfile) p' fICCProfile
    (#poke sk_pngencoder_options_t, fICCProfileDescription) p' fICCProfileDescription

{- | C enum: @"sk_jpegencoder_downsample_t"@

@
typedef enum 
{
  DOWNSAMPLE_420_SK_JPEGENCODER_DOWNSAMPLE,
  DOWNSAMPLE_422_SK_JPEGENCODER_DOWNSAMPLE,
  DOWNSAMPLE_444_SK_JPEGENCODER_DOWNSAMPLE
} sk_jpegencoder_downsample_t
@

-}
newtype Sk_jpegencoder_downsample = Sk_jpegencoder_downsample (#type sk_jpegencoder_downsample_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_jpegencoder_downsample_t"@ value (1/3): @"DOWNSAMPLE_420_SK_JPEGENCODER_DOWNSAMPLE"@
pattern DOWNSAMPLE_420_SK_JPEGENCODER_DOWNSAMPLE :: Sk_jpegencoder_downsample
pattern DOWNSAMPLE_420_SK_JPEGENCODER_DOWNSAMPLE = (#const DOWNSAMPLE_420_SK_JPEGENCODER_DOWNSAMPLE)

-- | C enum @"sk_jpegencoder_downsample_t"@ value (2/3): @"DOWNSAMPLE_422_SK_JPEGENCODER_DOWNSAMPLE"@
pattern DOWNSAMPLE_422_SK_JPEGENCODER_DOWNSAMPLE :: Sk_jpegencoder_downsample
pattern DOWNSAMPLE_422_SK_JPEGENCODER_DOWNSAMPLE = (#const DOWNSAMPLE_422_SK_JPEGENCODER_DOWNSAMPLE)

-- | C enum @"sk_jpegencoder_downsample_t"@ value (3/3): @"DOWNSAMPLE_444_SK_JPEGENCODER_DOWNSAMPLE"@
pattern DOWNSAMPLE_444_SK_JPEGENCODER_DOWNSAMPLE :: Sk_jpegencoder_downsample
pattern DOWNSAMPLE_444_SK_JPEGENCODER_DOWNSAMPLE = (#const DOWNSAMPLE_444_SK_JPEGENCODER_DOWNSAMPLE)

{- | C enum: @"sk_jpegencoder_alphaoption_t"@

@
typedef enum 
{
  IGNORE_SK_JPEGENCODER_ALPHA_OPTION,
  BLEND_ON_BLACK_SK_JPEGENCODER_ALPHA_OPTION
} sk_jpegencoder_alphaoption_t
@

-}
newtype Sk_jpegencoder_alphaoption = Sk_jpegencoder_alphaoption (#type sk_jpegencoder_alphaoption_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_jpegencoder_alphaoption_t"@ value (1/2): @"IGNORE_SK_JPEGENCODER_ALPHA_OPTION"@
pattern IGNORE_SK_JPEGENCODER_ALPHA_OPTION :: Sk_jpegencoder_alphaoption
pattern IGNORE_SK_JPEGENCODER_ALPHA_OPTION = (#const IGNORE_SK_JPEGENCODER_ALPHA_OPTION)

-- | C enum @"sk_jpegencoder_alphaoption_t"@ value (2/2): @"BLEND_ON_BLACK_SK_JPEGENCODER_ALPHA_OPTION"@
pattern BLEND_ON_BLACK_SK_JPEGENCODER_ALPHA_OPTION :: Sk_jpegencoder_alphaoption
pattern BLEND_ON_BLACK_SK_JPEGENCODER_ALPHA_OPTION = (#const BLEND_ON_BLACK_SK_JPEGENCODER_ALPHA_OPTION)

{- | C struct: @"sk_jpegencoder_options_t"@

@
typedef struct 
{
  int fQuality;
  sk_jpegencoder_downsample_t fDownsample;
  sk_jpegencoder_alphaoption_t fAlphaOption;
  const sk_data_t *xmpMetadata;
  const sk_colorspace_icc_profile_t *fICCProfile;
  const char *fICCProfileDescription;
} sk_jpegencoder_options_t
@
-}
data Sk_jpegencoder_options = Sk_jpegencoder_options
  { fQuality :: CInt -- ^ C field: @"int fQuality"@
  , fDownsample :: Sk_jpegencoder_downsample -- ^ C field: @"sk_jpegencoder_downsample_t fDownsample"@
  , fAlphaOption :: Sk_jpegencoder_alphaoption -- ^ C field: @"sk_jpegencoder_alphaoption_t fAlphaOption"@
  , xmpMetadata :: Ptr (Sk_data) -- ^ C field: @"const sk_data_t *xmpMetadata"@
  , fICCProfile :: Ptr (Sk_colorspace_icc_profile) -- ^ C field: @"const sk_colorspace_icc_profile_t *fICCProfile"@
  , fICCProfileDescription :: Ptr (CChar) -- ^ C field: @"const char *fICCProfileDescription"@
  }
instance Foreign.Storable.Offset.Offset "fQuality" Sk_jpegencoder_options where
  rawOffset = (#offset sk_jpegencoder_options_t, fQuality)
instance Foreign.Storable.Offset.Offset "fDownsample" Sk_jpegencoder_options where
  rawOffset = (#offset sk_jpegencoder_options_t, fDownsample)
instance Foreign.Storable.Offset.Offset "fAlphaOption" Sk_jpegencoder_options where
  rawOffset = (#offset sk_jpegencoder_options_t, fAlphaOption)
instance Foreign.Storable.Offset.Offset "xmpMetadata" Sk_jpegencoder_options where
  rawOffset = (#offset sk_jpegencoder_options_t, xmpMetadata)
instance Foreign.Storable.Offset.Offset "fICCProfile" Sk_jpegencoder_options where
  rawOffset = (#offset sk_jpegencoder_options_t, fICCProfile)
instance Foreign.Storable.Offset.Offset "fICCProfileDescription" Sk_jpegencoder_options where
  rawOffset = (#offset sk_jpegencoder_options_t, fICCProfileDescription)
instance Foreign.Storable.Storable Sk_jpegencoder_options where
  sizeOf _ = (#size sk_jpegencoder_options_t)
  alignment _ = (#alignment sk_jpegencoder_options_t)
  peek p' = do
    fQuality <- (#peek sk_jpegencoder_options_t, fQuality) p'
    fDownsample <- (#peek sk_jpegencoder_options_t, fDownsample) p'
    fAlphaOption <- (#peek sk_jpegencoder_options_t, fAlphaOption) p'
    xmpMetadata <- (#peek sk_jpegencoder_options_t, xmpMetadata) p'
    fICCProfile <- (#peek sk_jpegencoder_options_t, fICCProfile) p'
    fICCProfileDescription <- (#peek sk_jpegencoder_options_t, fICCProfileDescription) p'
    pure Sk_jpegencoder_options{..}
  poke p' Sk_jpegencoder_options{..} = do
    (#poke sk_jpegencoder_options_t, fQuality) p' fQuality
    (#poke sk_jpegencoder_options_t, fDownsample) p' fDownsample
    (#poke sk_jpegencoder_options_t, fAlphaOption) p' fAlphaOption
    (#poke sk_jpegencoder_options_t, xmpMetadata) p' xmpMetadata
    (#poke sk_jpegencoder_options_t, fICCProfile) p' fICCProfile
    (#poke sk_jpegencoder_options_t, fICCProfileDescription) p' fICCProfileDescription

{- | C enum: @"sk_webpencoder_compression_t"@

@
typedef enum 
{
  LOSSY_SK_WEBPENCODER_COMPTRESSION,
  LOSSLESS_SK_WEBPENCODER_COMPTRESSION
} sk_webpencoder_compression_t
@

-}
newtype Sk_webpencoder_compression = Sk_webpencoder_compression (#type sk_webpencoder_compression_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_webpencoder_compression_t"@ value (1/2): @"LOSSY_SK_WEBPENCODER_COMPTRESSION"@
pattern LOSSY_SK_WEBPENCODER_COMPTRESSION :: Sk_webpencoder_compression
pattern LOSSY_SK_WEBPENCODER_COMPTRESSION = (#const LOSSY_SK_WEBPENCODER_COMPTRESSION)

-- | C enum @"sk_webpencoder_compression_t"@ value (2/2): @"LOSSLESS_SK_WEBPENCODER_COMPTRESSION"@
pattern LOSSLESS_SK_WEBPENCODER_COMPTRESSION :: Sk_webpencoder_compression
pattern LOSSLESS_SK_WEBPENCODER_COMPTRESSION = (#const LOSSLESS_SK_WEBPENCODER_COMPTRESSION)

{- | C struct: @"sk_webpencoder_options_t"@

@
typedef struct 
{
  sk_webpencoder_compression_t fCompression;
  float fQuality;
  const sk_colorspace_icc_profile_t *fICCProfile;
  const char *fICCProfileDescription;
} sk_webpencoder_options_t
@
-}
data Sk_webpencoder_options = Sk_webpencoder_options
  { fCompression :: Sk_webpencoder_compression -- ^ C field: @"sk_webpencoder_compression_t fCompression"@
  , fQuality :: CFloat -- ^ C field: @"float fQuality"@
  , fICCProfile :: Ptr (Sk_colorspace_icc_profile) -- ^ C field: @"const sk_colorspace_icc_profile_t *fICCProfile"@
  , fICCProfileDescription :: Ptr (CChar) -- ^ C field: @"const char *fICCProfileDescription"@
  }
instance Foreign.Storable.Offset.Offset "fCompression" Sk_webpencoder_options where
  rawOffset = (#offset sk_webpencoder_options_t, fCompression)
instance Foreign.Storable.Offset.Offset "fQuality" Sk_webpencoder_options where
  rawOffset = (#offset sk_webpencoder_options_t, fQuality)
instance Foreign.Storable.Offset.Offset "fICCProfile" Sk_webpencoder_options where
  rawOffset = (#offset sk_webpencoder_options_t, fICCProfile)
instance Foreign.Storable.Offset.Offset "fICCProfileDescription" Sk_webpencoder_options where
  rawOffset = (#offset sk_webpencoder_options_t, fICCProfileDescription)
instance Foreign.Storable.Storable Sk_webpencoder_options where
  sizeOf _ = (#size sk_webpencoder_options_t)
  alignment _ = (#alignment sk_webpencoder_options_t)
  peek p' = do
    fCompression <- (#peek sk_webpencoder_options_t, fCompression) p'
    fQuality <- (#peek sk_webpencoder_options_t, fQuality) p'
    fICCProfile <- (#peek sk_webpencoder_options_t, fICCProfile) p'
    fICCProfileDescription <- (#peek sk_webpencoder_options_t, fICCProfileDescription) p'
    pure Sk_webpencoder_options{..}
  poke p' Sk_webpencoder_options{..} = do
    (#poke sk_webpencoder_options_t, fCompression) p' fCompression
    (#poke sk_webpencoder_options_t, fQuality) p' fQuality
    (#poke sk_webpencoder_options_t, fICCProfile) p' fICCProfile
    (#poke sk_webpencoder_options_t, fICCProfileDescription) p' fICCProfileDescription

{- | Opaque C struct: @"sk_rrect_t"@
-}
data Sk_rrect = Sk_rrect

{- | C enum: @"sk_rrect_type_t"@

@
typedef enum 
{
  EMPTY_SK_RRECT_TYPE,
  RECT_SK_RRECT_TYPE,
  OVAL_SK_RRECT_TYPE,
  SIMPLE_SK_RRECT_TYPE,
  NINE_PATCH_SK_RRECT_TYPE,
  COMPLEX_SK_RRECT_TYPE
} sk_rrect_type_t
@

-}
newtype Sk_rrect_type = Sk_rrect_type (#type sk_rrect_type_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_rrect_type_t"@ value (1/6): @"EMPTY_SK_RRECT_TYPE"@
pattern EMPTY_SK_RRECT_TYPE :: Sk_rrect_type
pattern EMPTY_SK_RRECT_TYPE = (#const EMPTY_SK_RRECT_TYPE)

-- | C enum @"sk_rrect_type_t"@ value (2/6): @"RECT_SK_RRECT_TYPE"@
pattern RECT_SK_RRECT_TYPE :: Sk_rrect_type
pattern RECT_SK_RRECT_TYPE = (#const RECT_SK_RRECT_TYPE)

-- | C enum @"sk_rrect_type_t"@ value (3/6): @"OVAL_SK_RRECT_TYPE"@
pattern OVAL_SK_RRECT_TYPE :: Sk_rrect_type
pattern OVAL_SK_RRECT_TYPE = (#const OVAL_SK_RRECT_TYPE)

-- | C enum @"sk_rrect_type_t"@ value (4/6): @"SIMPLE_SK_RRECT_TYPE"@
pattern SIMPLE_SK_RRECT_TYPE :: Sk_rrect_type
pattern SIMPLE_SK_RRECT_TYPE = (#const SIMPLE_SK_RRECT_TYPE)

-- | C enum @"sk_rrect_type_t"@ value (5/6): @"NINE_PATCH_SK_RRECT_TYPE"@
pattern NINE_PATCH_SK_RRECT_TYPE :: Sk_rrect_type
pattern NINE_PATCH_SK_RRECT_TYPE = (#const NINE_PATCH_SK_RRECT_TYPE)

-- | C enum @"sk_rrect_type_t"@ value (6/6): @"COMPLEX_SK_RRECT_TYPE"@
pattern COMPLEX_SK_RRECT_TYPE :: Sk_rrect_type
pattern COMPLEX_SK_RRECT_TYPE = (#const COMPLEX_SK_RRECT_TYPE)

{- | C enum: @"sk_rrect_corner_t"@

@
typedef enum 
{
  UPPER_LEFT_SK_RRECT_CORNER,
  UPPER_RIGHT_SK_RRECT_CORNER,
  LOWER_RIGHT_SK_RRECT_CORNER,
  LOWER_LEFT_SK_RRECT_CORNER
} sk_rrect_corner_t
@

-}
newtype Sk_rrect_corner = Sk_rrect_corner (#type sk_rrect_corner_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_rrect_corner_t"@ value (1/4): @"UPPER_LEFT_SK_RRECT_CORNER"@
pattern UPPER_LEFT_SK_RRECT_CORNER :: Sk_rrect_corner
pattern UPPER_LEFT_SK_RRECT_CORNER = (#const UPPER_LEFT_SK_RRECT_CORNER)

-- | C enum @"sk_rrect_corner_t"@ value (2/4): @"UPPER_RIGHT_SK_RRECT_CORNER"@
pattern UPPER_RIGHT_SK_RRECT_CORNER :: Sk_rrect_corner
pattern UPPER_RIGHT_SK_RRECT_CORNER = (#const UPPER_RIGHT_SK_RRECT_CORNER)

-- | C enum @"sk_rrect_corner_t"@ value (3/4): @"LOWER_RIGHT_SK_RRECT_CORNER"@
pattern LOWER_RIGHT_SK_RRECT_CORNER :: Sk_rrect_corner
pattern LOWER_RIGHT_SK_RRECT_CORNER = (#const LOWER_RIGHT_SK_RRECT_CORNER)

-- | C enum @"sk_rrect_corner_t"@ value (4/4): @"LOWER_LEFT_SK_RRECT_CORNER"@
pattern LOWER_LEFT_SK_RRECT_CORNER :: Sk_rrect_corner
pattern LOWER_LEFT_SK_RRECT_CORNER = (#const LOWER_LEFT_SK_RRECT_CORNER)

{- | Opaque C struct: @"sk_textblob_t"@
-}
data Sk_textblob = Sk_textblob

{- | Opaque C struct: @"sk_textblob_builder_t"@
-}
data Sk_textblob_builder = Sk_textblob_builder

{- | C struct: @"sk_textblob_builder_runbuffer_t"@

@
typedef struct 
{
  void *glyphs;
  void *pos;
  void *utf8text;
  void *clusters;
} sk_textblob_builder_runbuffer_t
@
-}
data Sk_textblob_builder_runbuffer = Sk_textblob_builder_runbuffer
  { glyphs :: Ptr (()) -- ^ C field: @"void *glyphs"@
  , pos :: Ptr (()) -- ^ C field: @"void *pos"@
  , utf8text :: Ptr (()) -- ^ C field: @"void *utf8text"@
  , clusters :: Ptr (()) -- ^ C field: @"void *clusters"@
  }
instance Foreign.Storable.Offset.Offset "glyphs" Sk_textblob_builder_runbuffer where
  rawOffset = (#offset sk_textblob_builder_runbuffer_t, glyphs)
instance Foreign.Storable.Offset.Offset "pos" Sk_textblob_builder_runbuffer where
  rawOffset = (#offset sk_textblob_builder_runbuffer_t, pos)
instance Foreign.Storable.Offset.Offset "utf8text" Sk_textblob_builder_runbuffer where
  rawOffset = (#offset sk_textblob_builder_runbuffer_t, utf8text)
instance Foreign.Storable.Offset.Offset "clusters" Sk_textblob_builder_runbuffer where
  rawOffset = (#offset sk_textblob_builder_runbuffer_t, clusters)
instance Foreign.Storable.Storable Sk_textblob_builder_runbuffer where
  sizeOf _ = (#size sk_textblob_builder_runbuffer_t)
  alignment _ = (#alignment sk_textblob_builder_runbuffer_t)
  peek p' = do
    glyphs <- (#peek sk_textblob_builder_runbuffer_t, glyphs) p'
    pos <- (#peek sk_textblob_builder_runbuffer_t, pos) p'
    utf8text <- (#peek sk_textblob_builder_runbuffer_t, utf8text) p'
    clusters <- (#peek sk_textblob_builder_runbuffer_t, clusters) p'
    pure Sk_textblob_builder_runbuffer{..}
  poke p' Sk_textblob_builder_runbuffer{..} = do
    (#poke sk_textblob_builder_runbuffer_t, glyphs) p' glyphs
    (#poke sk_textblob_builder_runbuffer_t, pos) p' pos
    (#poke sk_textblob_builder_runbuffer_t, utf8text) p' utf8text
    (#poke sk_textblob_builder_runbuffer_t, clusters) p' clusters

{- | C struct: @"sk_rsxform_t"@

@
typedef struct 
{
  float fSCos;
  float fSSin;
  float fTX;
  float fTY;
} sk_rsxform_t
@
-}
data Sk_rsxform = Sk_rsxform
  { fSCos :: CFloat -- ^ C field: @"float fSCos"@
  , fSSin :: CFloat -- ^ C field: @"float fSSin"@
  , fTX :: CFloat -- ^ C field: @"float fTX"@
  , fTY :: CFloat -- ^ C field: @"float fTY"@
  }
instance Foreign.Storable.Offset.Offset "fSCos" Sk_rsxform where
  rawOffset = (#offset sk_rsxform_t, fSCos)
instance Foreign.Storable.Offset.Offset "fSSin" Sk_rsxform where
  rawOffset = (#offset sk_rsxform_t, fSSin)
instance Foreign.Storable.Offset.Offset "fTX" Sk_rsxform where
  rawOffset = (#offset sk_rsxform_t, fTX)
instance Foreign.Storable.Offset.Offset "fTY" Sk_rsxform where
  rawOffset = (#offset sk_rsxform_t, fTY)
instance Foreign.Storable.Storable Sk_rsxform where
  sizeOf _ = (#size sk_rsxform_t)
  alignment _ = (#alignment sk_rsxform_t)
  peek p' = do
    fSCos <- (#peek sk_rsxform_t, fSCos) p'
    fSSin <- (#peek sk_rsxform_t, fSSin) p'
    fTX <- (#peek sk_rsxform_t, fTX) p'
    fTY <- (#peek sk_rsxform_t, fTY) p'
    pure Sk_rsxform{..}
  poke p' Sk_rsxform{..} = do
    (#poke sk_rsxform_t, fSCos) p' fSCos
    (#poke sk_rsxform_t, fSSin) p' fSSin
    (#poke sk_rsxform_t, fTX) p' fTX
    (#poke sk_rsxform_t, fTY) p' fTY

{- | Opaque C struct: @"sk_tracememorydump_t"@
-}
data Sk_tracememorydump = Sk_tracememorydump

{- | Opaque C struct: @"sk_runtimeeffect_t"@
-}
data Sk_runtimeeffect = Sk_runtimeeffect

{- | C enum: @"sk_runtimeeffect_uniform_type_t"@

@
typedef enum 
{
  FLOAT_SK_RUNTIMEEFFECT_UNIFORM_TYPE,
  FLOAT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE,
  FLOAT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE,
  FLOAT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE,
  FLOAT2X2_SK_RUNTIMEEFFECT_UNIFORM_TYPE,
  FLOAT3X3_SK_RUNTIMEEFFECT_UNIFORM_TYPE,
  FLOAT4X4_SK_RUNTIMEEFFECT_UNIFORM_TYPE,
  INT_SK_RUNTIMEEFFECT_UNIFORM_TYPE,
  INT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE,
  INT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE,
  INT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE
} sk_runtimeeffect_uniform_type_t
@

-}
newtype Sk_runtimeeffect_uniform_type = Sk_runtimeeffect_uniform_type (#type sk_runtimeeffect_uniform_type_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_runtimeeffect_uniform_type_t"@ value (1/11): @"FLOAT_SK_RUNTIMEEFFECT_UNIFORM_TYPE"@
pattern FLOAT_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
pattern FLOAT_SK_RUNTIMEEFFECT_UNIFORM_TYPE = (#const FLOAT_SK_RUNTIMEEFFECT_UNIFORM_TYPE)

-- | C enum @"sk_runtimeeffect_uniform_type_t"@ value (2/11): @"FLOAT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE"@
pattern FLOAT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
pattern FLOAT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE = (#const FLOAT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE)

-- | C enum @"sk_runtimeeffect_uniform_type_t"@ value (3/11): @"FLOAT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE"@
pattern FLOAT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
pattern FLOAT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE = (#const FLOAT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE)

-- | C enum @"sk_runtimeeffect_uniform_type_t"@ value (4/11): @"FLOAT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE"@
pattern FLOAT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
pattern FLOAT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE = (#const FLOAT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE)

-- | C enum @"sk_runtimeeffect_uniform_type_t"@ value (5/11): @"FLOAT2X2_SK_RUNTIMEEFFECT_UNIFORM_TYPE"@
pattern FLOAT2X2_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
pattern FLOAT2X2_SK_RUNTIMEEFFECT_UNIFORM_TYPE = (#const FLOAT2X2_SK_RUNTIMEEFFECT_UNIFORM_TYPE)

-- | C enum @"sk_runtimeeffect_uniform_type_t"@ value (6/11): @"FLOAT3X3_SK_RUNTIMEEFFECT_UNIFORM_TYPE"@
pattern FLOAT3X3_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
pattern FLOAT3X3_SK_RUNTIMEEFFECT_UNIFORM_TYPE = (#const FLOAT3X3_SK_RUNTIMEEFFECT_UNIFORM_TYPE)

-- | C enum @"sk_runtimeeffect_uniform_type_t"@ value (7/11): @"FLOAT4X4_SK_RUNTIMEEFFECT_UNIFORM_TYPE"@
pattern FLOAT4X4_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
pattern FLOAT4X4_SK_RUNTIMEEFFECT_UNIFORM_TYPE = (#const FLOAT4X4_SK_RUNTIMEEFFECT_UNIFORM_TYPE)

-- | C enum @"sk_runtimeeffect_uniform_type_t"@ value (8/11): @"INT_SK_RUNTIMEEFFECT_UNIFORM_TYPE"@
pattern INT_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
pattern INT_SK_RUNTIMEEFFECT_UNIFORM_TYPE = (#const INT_SK_RUNTIMEEFFECT_UNIFORM_TYPE)

-- | C enum @"sk_runtimeeffect_uniform_type_t"@ value (9/11): @"INT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE"@
pattern INT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
pattern INT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE = (#const INT2_SK_RUNTIMEEFFECT_UNIFORM_TYPE)

-- | C enum @"sk_runtimeeffect_uniform_type_t"@ value (10/11): @"INT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE"@
pattern INT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
pattern INT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE = (#const INT3_SK_RUNTIMEEFFECT_UNIFORM_TYPE)

-- | C enum @"sk_runtimeeffect_uniform_type_t"@ value (11/11): @"INT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE"@
pattern INT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE :: Sk_runtimeeffect_uniform_type
pattern INT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE = (#const INT4_SK_RUNTIMEEFFECT_UNIFORM_TYPE)

{- | C enum: @"sk_runtimeeffect_child_type_t"@

@
typedef enum 
{
  SHADER_SK_RUNTIMEEFFECT_CHILD_TYPE,
  COLOR_FILTER_SK_RUNTIMEEFFECT_CHILD_TYPE,
  BLENDER_SK_RUNTIMEEFFECT_CHILD_TYPE
} sk_runtimeeffect_child_type_t
@

-}
newtype Sk_runtimeeffect_child_type = Sk_runtimeeffect_child_type (#type sk_runtimeeffect_child_type_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_runtimeeffect_child_type_t"@ value (1/3): @"SHADER_SK_RUNTIMEEFFECT_CHILD_TYPE"@
pattern SHADER_SK_RUNTIMEEFFECT_CHILD_TYPE :: Sk_runtimeeffect_child_type
pattern SHADER_SK_RUNTIMEEFFECT_CHILD_TYPE = (#const SHADER_SK_RUNTIMEEFFECT_CHILD_TYPE)

-- | C enum @"sk_runtimeeffect_child_type_t"@ value (2/3): @"COLOR_FILTER_SK_RUNTIMEEFFECT_CHILD_TYPE"@
pattern COLOR_FILTER_SK_RUNTIMEEFFECT_CHILD_TYPE :: Sk_runtimeeffect_child_type
pattern COLOR_FILTER_SK_RUNTIMEEFFECT_CHILD_TYPE = (#const COLOR_FILTER_SK_RUNTIMEEFFECT_CHILD_TYPE)

-- | C enum @"sk_runtimeeffect_child_type_t"@ value (3/3): @"BLENDER_SK_RUNTIMEEFFECT_CHILD_TYPE"@
pattern BLENDER_SK_RUNTIMEEFFECT_CHILD_TYPE :: Sk_runtimeeffect_child_type
pattern BLENDER_SK_RUNTIMEEFFECT_CHILD_TYPE = (#const BLENDER_SK_RUNTIMEEFFECT_CHILD_TYPE)

{- | C enum: @"sk_runtimeeffect_uniform_flags_t"@

@
typedef enum 
{
  NONE_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = 0x00,
  ARRAY_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = 0x01,
  COLOR_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = 0x02,
  VERTEX_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = 0x04,
  FRAGMENT_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = 0x08,
  HALF_PRECISION_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = 0x10
} sk_runtimeeffect_uniform_flags_t
@

-}
newtype Sk_runtimeeffect_uniform_flags = Sk_runtimeeffect_uniform_flags (#type sk_runtimeeffect_uniform_flags_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_runtimeeffect_uniform_flags_t"@ value (1/6): @"NONE_SK_RUNTIMEEFFECT_UNIFORM_FLAGS"@
pattern NONE_SK_RUNTIMEEFFECT_UNIFORM_FLAGS :: Sk_runtimeeffect_uniform_flags
pattern NONE_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = (#const NONE_SK_RUNTIMEEFFECT_UNIFORM_FLAGS)

-- | C enum @"sk_runtimeeffect_uniform_flags_t"@ value (2/6): @"ARRAY_SK_RUNTIMEEFFECT_UNIFORM_FLAGS"@
pattern ARRAY_SK_RUNTIMEEFFECT_UNIFORM_FLAGS :: Sk_runtimeeffect_uniform_flags
pattern ARRAY_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = (#const ARRAY_SK_RUNTIMEEFFECT_UNIFORM_FLAGS)

-- | C enum @"sk_runtimeeffect_uniform_flags_t"@ value (3/6): @"COLOR_SK_RUNTIMEEFFECT_UNIFORM_FLAGS"@
pattern COLOR_SK_RUNTIMEEFFECT_UNIFORM_FLAGS :: Sk_runtimeeffect_uniform_flags
pattern COLOR_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = (#const COLOR_SK_RUNTIMEEFFECT_UNIFORM_FLAGS)

-- | C enum @"sk_runtimeeffect_uniform_flags_t"@ value (4/6): @"VERTEX_SK_RUNTIMEEFFECT_UNIFORM_FLAGS"@
pattern VERTEX_SK_RUNTIMEEFFECT_UNIFORM_FLAGS :: Sk_runtimeeffect_uniform_flags
pattern VERTEX_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = (#const VERTEX_SK_RUNTIMEEFFECT_UNIFORM_FLAGS)

-- | C enum @"sk_runtimeeffect_uniform_flags_t"@ value (5/6): @"FRAGMENT_SK_RUNTIMEEFFECT_UNIFORM_FLAGS"@
pattern FRAGMENT_SK_RUNTIMEEFFECT_UNIFORM_FLAGS :: Sk_runtimeeffect_uniform_flags
pattern FRAGMENT_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = (#const FRAGMENT_SK_RUNTIMEEFFECT_UNIFORM_FLAGS)

-- | C enum @"sk_runtimeeffect_uniform_flags_t"@ value (6/6): @"HALF_PRECISION_SK_RUNTIMEEFFECT_UNIFORM_FLAGS"@
pattern HALF_PRECISION_SK_RUNTIMEEFFECT_UNIFORM_FLAGS :: Sk_runtimeeffect_uniform_flags
pattern HALF_PRECISION_SK_RUNTIMEEFFECT_UNIFORM_FLAGS = (#const HALF_PRECISION_SK_RUNTIMEEFFECT_UNIFORM_FLAGS)

{- | C struct: @"sk_runtimeeffect_uniform_t"@

@
typedef struct 
{
  const char *fName;
  size_t fNameLength;
  size_t fOffset;
  sk_runtimeeffect_uniform_type_t fType;
  int fCount;
  sk_runtimeeffect_uniform_flags_t fFlags;
} sk_runtimeeffect_uniform_t
@
-}
data Sk_runtimeeffect_uniform = Sk_runtimeeffect_uniform
  { fName :: Ptr (CChar) -- ^ C field: @"const char *fName"@
  , fNameLength :: CSize -- ^ C field: @"size_t fNameLength"@
  , fOffset :: CSize -- ^ C field: @"size_t fOffset"@
  , fType :: Sk_runtimeeffect_uniform_type -- ^ C field: @"sk_runtimeeffect_uniform_type_t fType"@
  , fCount :: CInt -- ^ C field: @"int fCount"@
  , fFlags :: Sk_runtimeeffect_uniform_flags -- ^ C field: @"sk_runtimeeffect_uniform_flags_t fFlags"@
  }
instance Foreign.Storable.Offset.Offset "fName" Sk_runtimeeffect_uniform where
  rawOffset = (#offset sk_runtimeeffect_uniform_t, fName)
instance Foreign.Storable.Offset.Offset "fNameLength" Sk_runtimeeffect_uniform where
  rawOffset = (#offset sk_runtimeeffect_uniform_t, fNameLength)
instance Foreign.Storable.Offset.Offset "fOffset" Sk_runtimeeffect_uniform where
  rawOffset = (#offset sk_runtimeeffect_uniform_t, fOffset)
instance Foreign.Storable.Offset.Offset "fType" Sk_runtimeeffect_uniform where
  rawOffset = (#offset sk_runtimeeffect_uniform_t, fType)
instance Foreign.Storable.Offset.Offset "fCount" Sk_runtimeeffect_uniform where
  rawOffset = (#offset sk_runtimeeffect_uniform_t, fCount)
instance Foreign.Storable.Offset.Offset "fFlags" Sk_runtimeeffect_uniform where
  rawOffset = (#offset sk_runtimeeffect_uniform_t, fFlags)
instance Foreign.Storable.Storable Sk_runtimeeffect_uniform where
  sizeOf _ = (#size sk_runtimeeffect_uniform_t)
  alignment _ = (#alignment sk_runtimeeffect_uniform_t)
  peek p' = do
    fName <- (#peek sk_runtimeeffect_uniform_t, fName) p'
    fNameLength <- (#peek sk_runtimeeffect_uniform_t, fNameLength) p'
    fOffset <- (#peek sk_runtimeeffect_uniform_t, fOffset) p'
    fType <- (#peek sk_runtimeeffect_uniform_t, fType) p'
    fCount <- (#peek sk_runtimeeffect_uniform_t, fCount) p'
    fFlags <- (#peek sk_runtimeeffect_uniform_t, fFlags) p'
    pure Sk_runtimeeffect_uniform{..}
  poke p' Sk_runtimeeffect_uniform{..} = do
    (#poke sk_runtimeeffect_uniform_t, fName) p' fName
    (#poke sk_runtimeeffect_uniform_t, fNameLength) p' fNameLength
    (#poke sk_runtimeeffect_uniform_t, fOffset) p' fOffset
    (#poke sk_runtimeeffect_uniform_t, fType) p' fType
    (#poke sk_runtimeeffect_uniform_t, fCount) p' fCount
    (#poke sk_runtimeeffect_uniform_t, fFlags) p' fFlags

{- | C struct: @"sk_runtimeeffect_child_t"@

@
typedef struct 
{
  const char *fName;
  size_t fNameLength;
  sk_runtimeeffect_child_type_t fType;
  int fIndex;
} sk_runtimeeffect_child_t
@
-}
data Sk_runtimeeffect_child = Sk_runtimeeffect_child
  { fName :: Ptr (CChar) -- ^ C field: @"const char *fName"@
  , fNameLength :: CSize -- ^ C field: @"size_t fNameLength"@
  , fType :: Sk_runtimeeffect_child_type -- ^ C field: @"sk_runtimeeffect_child_type_t fType"@
  , fIndex :: CInt -- ^ C field: @"int fIndex"@
  }
instance Foreign.Storable.Offset.Offset "fName" Sk_runtimeeffect_child where
  rawOffset = (#offset sk_runtimeeffect_child_t, fName)
instance Foreign.Storable.Offset.Offset "fNameLength" Sk_runtimeeffect_child where
  rawOffset = (#offset sk_runtimeeffect_child_t, fNameLength)
instance Foreign.Storable.Offset.Offset "fType" Sk_runtimeeffect_child where
  rawOffset = (#offset sk_runtimeeffect_child_t, fType)
instance Foreign.Storable.Offset.Offset "fIndex" Sk_runtimeeffect_child where
  rawOffset = (#offset sk_runtimeeffect_child_t, fIndex)
instance Foreign.Storable.Storable Sk_runtimeeffect_child where
  sizeOf _ = (#size sk_runtimeeffect_child_t)
  alignment _ = (#alignment sk_runtimeeffect_child_t)
  peek p' = do
    fName <- (#peek sk_runtimeeffect_child_t, fName) p'
    fNameLength <- (#peek sk_runtimeeffect_child_t, fNameLength) p'
    fType <- (#peek sk_runtimeeffect_child_t, fType) p'
    fIndex <- (#peek sk_runtimeeffect_child_t, fIndex) p'
    pure Sk_runtimeeffect_child{..}
  poke p' Sk_runtimeeffect_child{..} = do
    (#poke sk_runtimeeffect_child_t, fName) p' fName
    (#poke sk_runtimeeffect_child_t, fNameLength) p' fNameLength
    (#poke sk_runtimeeffect_child_t, fType) p' fType
    (#poke sk_runtimeeffect_child_t, fIndex) p' fIndex

{- | C enum: @"sk_filter_mode_t"@

@
typedef enum 
{
  NEAREST_SK_FILTER_MODE,
  LINEAR_SK_FILTER_MODE
} sk_filter_mode_t
@

-}
newtype Sk_filter_mode = Sk_filter_mode (#type sk_filter_mode_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_filter_mode_t"@ value (1/2): @"NEAREST_SK_FILTER_MODE"@
pattern NEAREST_SK_FILTER_MODE :: Sk_filter_mode
pattern NEAREST_SK_FILTER_MODE = (#const NEAREST_SK_FILTER_MODE)

-- | C enum @"sk_filter_mode_t"@ value (2/2): @"LINEAR_SK_FILTER_MODE"@
pattern LINEAR_SK_FILTER_MODE :: Sk_filter_mode
pattern LINEAR_SK_FILTER_MODE = (#const LINEAR_SK_FILTER_MODE)

{- | C enum: @"sk_mipmap_mode_t"@

@
typedef enum 
{
  NONE_SK_MIPMAP_MODE,
  NEAREST_SK_MIPMAP_MODE,
  LINEAR_SK_MIPMAP_MODE
} sk_mipmap_mode_t
@

-}
newtype Sk_mipmap_mode = Sk_mipmap_mode (#type sk_mipmap_mode_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_mipmap_mode_t"@ value (1/3): @"NONE_SK_MIPMAP_MODE"@
pattern NONE_SK_MIPMAP_MODE :: Sk_mipmap_mode
pattern NONE_SK_MIPMAP_MODE = (#const NONE_SK_MIPMAP_MODE)

-- | C enum @"sk_mipmap_mode_t"@ value (2/3): @"NEAREST_SK_MIPMAP_MODE"@
pattern NEAREST_SK_MIPMAP_MODE :: Sk_mipmap_mode
pattern NEAREST_SK_MIPMAP_MODE = (#const NEAREST_SK_MIPMAP_MODE)

-- | C enum @"sk_mipmap_mode_t"@ value (3/3): @"LINEAR_SK_MIPMAP_MODE"@
pattern LINEAR_SK_MIPMAP_MODE :: Sk_mipmap_mode
pattern LINEAR_SK_MIPMAP_MODE = (#const LINEAR_SK_MIPMAP_MODE)

{- | C struct: @"sk_cubic_resampler_t"@

@
typedef struct 
{
  float fB;
  float fC;
} sk_cubic_resampler_t
@
-}
data Sk_cubic_resampler = Sk_cubic_resampler
  { fB :: CFloat -- ^ C field: @"float fB"@
  , fC :: CFloat -- ^ C field: @"float fC"@
  }
instance Foreign.Storable.Offset.Offset "fB" Sk_cubic_resampler where
  rawOffset = (#offset sk_cubic_resampler_t, fB)
instance Foreign.Storable.Offset.Offset "fC" Sk_cubic_resampler where
  rawOffset = (#offset sk_cubic_resampler_t, fC)
instance Foreign.Storable.Storable Sk_cubic_resampler where
  sizeOf _ = (#size sk_cubic_resampler_t)
  alignment _ = (#alignment sk_cubic_resampler_t)
  peek p' = do
    fB <- (#peek sk_cubic_resampler_t, fB) p'
    fC <- (#peek sk_cubic_resampler_t, fC) p'
    pure Sk_cubic_resampler{..}
  poke p' Sk_cubic_resampler{..} = do
    (#poke sk_cubic_resampler_t, fB) p' fB
    (#poke sk_cubic_resampler_t, fC) p' fC

{- | C struct: @"sk_sampling_options_t"@

@
typedef struct 
{
  int fMaxAniso;
  _Bool fUseCubic;
  sk_cubic_resampler_t fCubic;
  sk_filter_mode_t fFilter;
  sk_mipmap_mode_t fMipmap;
} sk_sampling_options_t
@
-}
data Sk_sampling_options = Sk_sampling_options
  { fMaxAniso :: CInt -- ^ C field: @"int fMaxAniso"@
  , fUseCubic :: CBool -- ^ C field: @"_Bool fUseCubic"@
  , fCubic :: Sk_cubic_resampler -- ^ C field: @"sk_cubic_resampler_t fCubic"@
  , fFilter :: Sk_filter_mode -- ^ C field: @"sk_filter_mode_t fFilter"@
  , fMipmap :: Sk_mipmap_mode -- ^ C field: @"sk_mipmap_mode_t fMipmap"@
  }
instance Foreign.Storable.Offset.Offset "fMaxAniso" Sk_sampling_options where
  rawOffset = (#offset sk_sampling_options_t, fMaxAniso)
instance Foreign.Storable.Offset.Offset "fUseCubic" Sk_sampling_options where
  rawOffset = (#offset sk_sampling_options_t, fUseCubic)
instance Foreign.Storable.Offset.Offset "fCubic" Sk_sampling_options where
  rawOffset = (#offset sk_sampling_options_t, fCubic)
instance Foreign.Storable.Offset.Offset "fFilter" Sk_sampling_options where
  rawOffset = (#offset sk_sampling_options_t, fFilter)
instance Foreign.Storable.Offset.Offset "fMipmap" Sk_sampling_options where
  rawOffset = (#offset sk_sampling_options_t, fMipmap)
instance Foreign.Storable.Storable Sk_sampling_options where
  sizeOf _ = (#size sk_sampling_options_t)
  alignment _ = (#alignment sk_sampling_options_t)
  peek p' = do
    fMaxAniso <- (#peek sk_sampling_options_t, fMaxAniso) p'
    fUseCubic <- (#peek sk_sampling_options_t, fUseCubic) p'
    fCubic <- (#peek sk_sampling_options_t, fCubic) p'
    fFilter <- (#peek sk_sampling_options_t, fFilter) p'
    fMipmap <- (#peek sk_sampling_options_t, fMipmap) p'
    pure Sk_sampling_options{..}
  poke p' Sk_sampling_options{..} = do
    (#poke sk_sampling_options_t, fMaxAniso) p' fMaxAniso
    (#poke sk_sampling_options_t, fUseCubic) p' fUseCubic
    (#poke sk_sampling_options_t, fCubic) p' fCubic
    (#poke sk_sampling_options_t, fFilter) p' fFilter
    (#poke sk_sampling_options_t, fMipmap) p' fMipmap

{- | C enum: @"sk_canvas_savelayerrec_flags_t"@

@
typedef enum 
{
  NONE_SK_CANVAS_SAVELAYERREC_FLAGS = 0,
  PRESERVE_LCD_TEXT_SK_CANVAS_SAVELAYERREC_FLAGS = 1 << 1,
  INITIALIZE_WITH_PREVIOUS_SK_CANVAS_SAVELAYERREC_FLAGS = 1 << 2,
  F16_COLOR_TYPE_SK_CANVAS_SAVELAYERREC_FLAGS = 1 << 4
} sk_canvas_savelayerrec_flags_t
@

-}
newtype Sk_canvas_savelayerrec_flags = Sk_canvas_savelayerrec_flags (#type sk_canvas_savelayerrec_flags_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"sk_canvas_savelayerrec_flags_t"@ value (1/4): @"NONE_SK_CANVAS_SAVELAYERREC_FLAGS"@
pattern NONE_SK_CANVAS_SAVELAYERREC_FLAGS :: Sk_canvas_savelayerrec_flags
pattern NONE_SK_CANVAS_SAVELAYERREC_FLAGS = (#const NONE_SK_CANVAS_SAVELAYERREC_FLAGS)

-- | C enum @"sk_canvas_savelayerrec_flags_t"@ value (2/4): @"PRESERVE_LCD_TEXT_SK_CANVAS_SAVELAYERREC_FLAGS"@
pattern PRESERVE_LCD_TEXT_SK_CANVAS_SAVELAYERREC_FLAGS :: Sk_canvas_savelayerrec_flags
pattern PRESERVE_LCD_TEXT_SK_CANVAS_SAVELAYERREC_FLAGS = (#const PRESERVE_LCD_TEXT_SK_CANVAS_SAVELAYERREC_FLAGS)

-- | C enum @"sk_canvas_savelayerrec_flags_t"@ value (3/4): @"INITIALIZE_WITH_PREVIOUS_SK_CANVAS_SAVELAYERREC_FLAGS"@
pattern INITIALIZE_WITH_PREVIOUS_SK_CANVAS_SAVELAYERREC_FLAGS :: Sk_canvas_savelayerrec_flags
pattern INITIALIZE_WITH_PREVIOUS_SK_CANVAS_SAVELAYERREC_FLAGS = (#const INITIALIZE_WITH_PREVIOUS_SK_CANVAS_SAVELAYERREC_FLAGS)

-- | C enum @"sk_canvas_savelayerrec_flags_t"@ value (4/4): @"F16_COLOR_TYPE_SK_CANVAS_SAVELAYERREC_FLAGS"@
pattern F16_COLOR_TYPE_SK_CANVAS_SAVELAYERREC_FLAGS :: Sk_canvas_savelayerrec_flags
pattern F16_COLOR_TYPE_SK_CANVAS_SAVELAYERREC_FLAGS = (#const F16_COLOR_TYPE_SK_CANVAS_SAVELAYERREC_FLAGS)

{- | C struct: @"sk_canvas_savelayerrec_t"@

@
typedef struct 
{
  sk_rect_t *fBounds;
  sk_paint_t *fPaint;
  sk_imagefilter_t *fBackdrop;
  sk_canvas_savelayerrec_flags_t fFlags;
} sk_canvas_savelayerrec_t
@
-}
data Sk_canvas_savelayerrec = Sk_canvas_savelayerrec
  { fBounds :: Ptr (Sk_rect) -- ^ C field: @"sk_rect_t *fBounds"@
  , fPaint :: Ptr (Sk_paint) -- ^ C field: @"sk_paint_t *fPaint"@
  , fBackdrop :: Ptr (Sk_imagefilter) -- ^ C field: @"sk_imagefilter_t *fBackdrop"@
  , fFlags :: Sk_canvas_savelayerrec_flags -- ^ C field: @"sk_canvas_savelayerrec_flags_t fFlags"@
  }
instance Foreign.Storable.Offset.Offset "fBounds" Sk_canvas_savelayerrec where
  rawOffset = (#offset sk_canvas_savelayerrec_t, fBounds)
instance Foreign.Storable.Offset.Offset "fPaint" Sk_canvas_savelayerrec where
  rawOffset = (#offset sk_canvas_savelayerrec_t, fPaint)
instance Foreign.Storable.Offset.Offset "fBackdrop" Sk_canvas_savelayerrec where
  rawOffset = (#offset sk_canvas_savelayerrec_t, fBackdrop)
instance Foreign.Storable.Offset.Offset "fFlags" Sk_canvas_savelayerrec where
  rawOffset = (#offset sk_canvas_savelayerrec_t, fFlags)
instance Foreign.Storable.Storable Sk_canvas_savelayerrec where
  sizeOf _ = (#size sk_canvas_savelayerrec_t)
  alignment _ = (#alignment sk_canvas_savelayerrec_t)
  peek p' = do
    fBounds <- (#peek sk_canvas_savelayerrec_t, fBounds) p'
    fPaint <- (#peek sk_canvas_savelayerrec_t, fPaint) p'
    fBackdrop <- (#peek sk_canvas_savelayerrec_t, fBackdrop) p'
    fFlags <- (#peek sk_canvas_savelayerrec_t, fFlags) p'
    pure Sk_canvas_savelayerrec{..}
  poke p' Sk_canvas_savelayerrec{..} = do
    (#poke sk_canvas_savelayerrec_t, fBounds) p' fBounds
    (#poke sk_canvas_savelayerrec_t, fPaint) p' fPaint
    (#poke sk_canvas_savelayerrec_t, fBackdrop) p' fBackdrop
    (#poke sk_canvas_savelayerrec_t, fFlags) p' fFlags

{- | Opaque C struct: @"skottie_animation_t"@
-}
data Skottie_animation = Skottie_animation

{- | Opaque C struct: @"skottie_animation_builder_t"@
-}
data Skottie_animation_builder = Skottie_animation_builder

{- | Opaque C struct: @"skottie_resource_provider_t"@
-}
data Skottie_resource_provider = Skottie_resource_provider

{- | Opaque C struct: @"skottie_property_observer_t"@
-}
data Skottie_property_observer = Skottie_property_observer

{- | Opaque C struct: @"skottie_logger_t"@
-}
data Skottie_logger = Skottie_logger

{- | Opaque C struct: @"skottie_marker_observer_t"@
-}
data Skottie_marker_observer = Skottie_marker_observer

{- | Opaque C struct: @"sksg_invalidation_controller_t"@
-}
data Sksg_invalidation_controller = Sksg_invalidation_controller

{- | C enum: @"skottie_animation_renderflags_t"@

@
typedef enum 
{
  SKIP_TOP_LEVEL_ISOLATION = 0x01,
  DISABLE_TOP_LEVEL_CLIPPING = 0x02
} skottie_animation_renderflags_t
@

-}
newtype Skottie_animation_renderflags = Skottie_animation_renderflags (#type skottie_animation_renderflags_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"skottie_animation_renderflags_t"@ value (1/2): @"SKIP_TOP_LEVEL_ISOLATION"@
pattern SKIP_TOP_LEVEL_ISOLATION :: Skottie_animation_renderflags
pattern SKIP_TOP_LEVEL_ISOLATION = (#const SKIP_TOP_LEVEL_ISOLATION)

-- | C enum @"skottie_animation_renderflags_t"@ value (2/2): @"DISABLE_TOP_LEVEL_CLIPPING"@
pattern DISABLE_TOP_LEVEL_CLIPPING :: Skottie_animation_renderflags
pattern DISABLE_TOP_LEVEL_CLIPPING = (#const DISABLE_TOP_LEVEL_CLIPPING)

{- | C enum: @"skottie_animation_builder_flags_t"@

@
typedef enum 
{
  NONE_SKOTTIE_ANIMATION_BUILDER_FLAGS = 0,
  DEFER_IMAGE_LOADING_SKOTTIE_ANIMATION_BUILDER_FLAGS = 0x01,
  PREFER_EMBEDDED_FONTS_SKOTTIE_ANIMATION_BUILDER_FLAGS = 0x02
} skottie_animation_builder_flags_t
@

-}
newtype Skottie_animation_builder_flags = Skottie_animation_builder_flags (#type skottie_animation_builder_flags_t)
  deriving stock (Show, Eq, Ord)
  deriving newtype (Num, Bits, Storable)

-- | C enum @"skottie_animation_builder_flags_t"@ value (1/3): @"NONE_SKOTTIE_ANIMATION_BUILDER_FLAGS"@
pattern NONE_SKOTTIE_ANIMATION_BUILDER_FLAGS :: Skottie_animation_builder_flags
pattern NONE_SKOTTIE_ANIMATION_BUILDER_FLAGS = (#const NONE_SKOTTIE_ANIMATION_BUILDER_FLAGS)

-- | C enum @"skottie_animation_builder_flags_t"@ value (2/3): @"DEFER_IMAGE_LOADING_SKOTTIE_ANIMATION_BUILDER_FLAGS"@
pattern DEFER_IMAGE_LOADING_SKOTTIE_ANIMATION_BUILDER_FLAGS :: Skottie_animation_builder_flags
pattern DEFER_IMAGE_LOADING_SKOTTIE_ANIMATION_BUILDER_FLAGS = (#const DEFER_IMAGE_LOADING_SKOTTIE_ANIMATION_BUILDER_FLAGS)

-- | C enum @"skottie_animation_builder_flags_t"@ value (3/3): @"PREFER_EMBEDDED_FONTS_SKOTTIE_ANIMATION_BUILDER_FLAGS"@
pattern PREFER_EMBEDDED_FONTS_SKOTTIE_ANIMATION_BUILDER_FLAGS :: Skottie_animation_builder_flags
pattern PREFER_EMBEDDED_FONTS_SKOTTIE_ANIMATION_BUILDER_FLAGS = (#const PREFER_EMBEDDED_FONTS_SKOTTIE_ANIMATION_BUILDER_FLAGS)

{- | C struct: @"skottie_animation_builder_stats_t"@

@
typedef struct 
{
  float fTotalLoadTimeMS;
  float fJsonParseTimeMS;
  float fSceneParseTimeMS;
  size_t fJsonSize;
  size_t fAnimatorCount;
} skottie_animation_builder_stats_t
@
-}
data Skottie_animation_builder_stats = Skottie_animation_builder_stats
  { fTotalLoadTimeMS :: CFloat -- ^ C field: @"float fTotalLoadTimeMS"@
  , fJsonParseTimeMS :: CFloat -- ^ C field: @"float fJsonParseTimeMS"@
  , fSceneParseTimeMS :: CFloat -- ^ C field: @"float fSceneParseTimeMS"@
  , fJsonSize :: CSize -- ^ C field: @"size_t fJsonSize"@
  , fAnimatorCount :: CSize -- ^ C field: @"size_t fAnimatorCount"@
  }
instance Foreign.Storable.Offset.Offset "fTotalLoadTimeMS" Skottie_animation_builder_stats where
  rawOffset = (#offset skottie_animation_builder_stats_t, fTotalLoadTimeMS)
instance Foreign.Storable.Offset.Offset "fJsonParseTimeMS" Skottie_animation_builder_stats where
  rawOffset = (#offset skottie_animation_builder_stats_t, fJsonParseTimeMS)
instance Foreign.Storable.Offset.Offset "fSceneParseTimeMS" Skottie_animation_builder_stats where
  rawOffset = (#offset skottie_animation_builder_stats_t, fSceneParseTimeMS)
instance Foreign.Storable.Offset.Offset "fJsonSize" Skottie_animation_builder_stats where
  rawOffset = (#offset skottie_animation_builder_stats_t, fJsonSize)
instance Foreign.Storable.Offset.Offset "fAnimatorCount" Skottie_animation_builder_stats where
  rawOffset = (#offset skottie_animation_builder_stats_t, fAnimatorCount)
instance Foreign.Storable.Storable Skottie_animation_builder_stats where
  sizeOf _ = (#size skottie_animation_builder_stats_t)
  alignment _ = (#alignment skottie_animation_builder_stats_t)
  peek p' = do
    fTotalLoadTimeMS <- (#peek skottie_animation_builder_stats_t, fTotalLoadTimeMS) p'
    fJsonParseTimeMS <- (#peek skottie_animation_builder_stats_t, fJsonParseTimeMS) p'
    fSceneParseTimeMS <- (#peek skottie_animation_builder_stats_t, fSceneParseTimeMS) p'
    fJsonSize <- (#peek skottie_animation_builder_stats_t, fJsonSize) p'
    fAnimatorCount <- (#peek skottie_animation_builder_stats_t, fAnimatorCount) p'
    pure Skottie_animation_builder_stats{..}
  poke p' Skottie_animation_builder_stats{..} = do
    (#poke skottie_animation_builder_stats_t, fTotalLoadTimeMS) p' fTotalLoadTimeMS
    (#poke skottie_animation_builder_stats_t, fJsonParseTimeMS) p' fJsonParseTimeMS
    (#poke skottie_animation_builder_stats_t, fSceneParseTimeMS) p' fSceneParseTimeMS
    (#poke skottie_animation_builder_stats_t, fJsonSize) p' fJsonSize
    (#poke skottie_animation_builder_stats_t, fAnimatorCount) p' fAnimatorCount

{- | Opaque C struct: @"skresources_image_asset_t"@
-}
data Skresources_image_asset = Skresources_image_asset

{- | Opaque C struct: @"skresources_multi_frame_image_asset_t"@
-}
data Skresources_multi_frame_image_asset = Skresources_multi_frame_image_asset

{- | Opaque C struct: @"skresources_external_track_asset_t"@
-}
data Skresources_external_track_asset = Skresources_external_track_asset

{- | Opaque C struct: @"skresources_resource_provider_t"@
-}
data Skresources_resource_provider = Skresources_resource_provider

{- | Opaque C struct: @"d3d_dxgi_adapter_t"@
-}
data D3d_dxgi_adapter = D3d_dxgi_adapter

{- | Opaque C struct: @"d3d_d12_device_t"@
-}
data D3d_d12_device = D3d_d12_device

{- | Opaque C struct: @"d3d_d12_command_queue_t"@
-}
data D3d_d12_command_queue = D3d_d12_command_queue

{- | Opaque C struct: @"gr_d3d_memory_allocator_t"@
-}
data Gr_d3d_memory_allocator = Gr_d3d_memory_allocator

{- | C struct: @"gr_d3d_backendcontext_t"@

@
typedef struct 
{
  d3d_dxgi_adapter_t *fAdapter;
  d3d_d12_device_t *fDevice;
  d3d_d12_command_queue_t *fQueue;
  gr_d3d_memory_allocator_t *fMemoryAllocator;
  _Bool fProtectedContext;
} gr_d3d_backendcontext_t
@
-}
data Gr_d3d_backendcontext = Gr_d3d_backendcontext
  { fAdapter :: Ptr (D3d_dxgi_adapter) -- ^ C field: @"d3d_dxgi_adapter_t *fAdapter"@
  , fDevice :: Ptr (D3d_d12_device) -- ^ C field: @"d3d_d12_device_t *fDevice"@
  , fQueue :: Ptr (D3d_d12_command_queue) -- ^ C field: @"d3d_d12_command_queue_t *fQueue"@
  , fMemoryAllocator :: Ptr (Gr_d3d_memory_allocator) -- ^ C field: @"gr_d3d_memory_allocator_t *fMemoryAllocator"@
  , fProtectedContext :: CBool -- ^ C field: @"_Bool fProtectedContext"@
  }
instance Foreign.Storable.Offset.Offset "fAdapter" Gr_d3d_backendcontext where
  rawOffset = (#offset gr_d3d_backendcontext_t, fAdapter)
instance Foreign.Storable.Offset.Offset "fDevice" Gr_d3d_backendcontext where
  rawOffset = (#offset gr_d3d_backendcontext_t, fDevice)
instance Foreign.Storable.Offset.Offset "fQueue" Gr_d3d_backendcontext where
  rawOffset = (#offset gr_d3d_backendcontext_t, fQueue)
instance Foreign.Storable.Offset.Offset "fMemoryAllocator" Gr_d3d_backendcontext where
  rawOffset = (#offset gr_d3d_backendcontext_t, fMemoryAllocator)
instance Foreign.Storable.Offset.Offset "fProtectedContext" Gr_d3d_backendcontext where
  rawOffset = (#offset gr_d3d_backendcontext_t, fProtectedContext)
instance Foreign.Storable.Storable Gr_d3d_backendcontext where
  sizeOf _ = (#size gr_d3d_backendcontext_t)
  alignment _ = (#alignment gr_d3d_backendcontext_t)
  peek p' = do
    fAdapter <- (#peek gr_d3d_backendcontext_t, fAdapter) p'
    fDevice <- (#peek gr_d3d_backendcontext_t, fDevice) p'
    fQueue <- (#peek gr_d3d_backendcontext_t, fQueue) p'
    fMemoryAllocator <- (#peek gr_d3d_backendcontext_t, fMemoryAllocator) p'
    fProtectedContext <- (#peek gr_d3d_backendcontext_t, fProtectedContext) p'
    pure Gr_d3d_backendcontext{..}
  poke p' Gr_d3d_backendcontext{..} = do
    (#poke gr_d3d_backendcontext_t, fAdapter) p' fAdapter
    (#poke gr_d3d_backendcontext_t, fDevice) p' fDevice
    (#poke gr_d3d_backendcontext_t, fQueue) p' fQueue
    (#poke gr_d3d_backendcontext_t, fMemoryAllocator) p' fMemoryAllocator
    (#poke gr_d3d_backendcontext_t, fProtectedContext) p' fProtectedContext

{- | Opaque C struct: @"d3d_d12_resource_t"@
-}
data D3d_d12_resource = D3d_d12_resource

{- | Opaque C struct: @"d3d_alloc_t"@
-}
data D3d_alloc = D3d_alloc

{- | C struct: @"gr_d3d_textureresourceinfo_t"@

@
typedef struct 
{
  d3d_d12_resource_t *fResource;
  d3d_alloc_t *fAlloc;
  uint32_t fResourceState;
  uint32_t fFormat;
  uint32_t fSampleCount;
  uint32_t fLevelCount;
  unsigned int fSampleQualityPattern;
  _Bool fProtected;
} gr_d3d_textureresourceinfo_t
@
-}
data Gr_d3d_textureresourceinfo = Gr_d3d_textureresourceinfo
  { fResource :: Ptr (D3d_d12_resource) -- ^ C field: @"d3d_d12_resource_t *fResource"@
  , fAlloc :: Ptr (D3d_alloc) -- ^ C field: @"d3d_alloc_t *fAlloc"@
  , fResourceState :: Word32 -- ^ C field: @"uint32_t fResourceState"@
  , fFormat :: Word32 -- ^ C field: @"uint32_t fFormat"@
  , fSampleCount :: Word32 -- ^ C field: @"uint32_t fSampleCount"@
  , fLevelCount :: Word32 -- ^ C field: @"uint32_t fLevelCount"@
  , fSampleQualityPattern :: CUInt -- ^ C field: @"unsigned int fSampleQualityPattern"@
  , fProtected :: CBool -- ^ C field: @"_Bool fProtected"@
  }
instance Foreign.Storable.Offset.Offset "fResource" Gr_d3d_textureresourceinfo where
  rawOffset = (#offset gr_d3d_textureresourceinfo_t, fResource)
instance Foreign.Storable.Offset.Offset "fAlloc" Gr_d3d_textureresourceinfo where
  rawOffset = (#offset gr_d3d_textureresourceinfo_t, fAlloc)
instance Foreign.Storable.Offset.Offset "fResourceState" Gr_d3d_textureresourceinfo where
  rawOffset = (#offset gr_d3d_textureresourceinfo_t, fResourceState)
instance Foreign.Storable.Offset.Offset "fFormat" Gr_d3d_textureresourceinfo where
  rawOffset = (#offset gr_d3d_textureresourceinfo_t, fFormat)
instance Foreign.Storable.Offset.Offset "fSampleCount" Gr_d3d_textureresourceinfo where
  rawOffset = (#offset gr_d3d_textureresourceinfo_t, fSampleCount)
instance Foreign.Storable.Offset.Offset "fLevelCount" Gr_d3d_textureresourceinfo where
  rawOffset = (#offset gr_d3d_textureresourceinfo_t, fLevelCount)
instance Foreign.Storable.Offset.Offset "fSampleQualityPattern" Gr_d3d_textureresourceinfo where
  rawOffset = (#offset gr_d3d_textureresourceinfo_t, fSampleQualityPattern)
instance Foreign.Storable.Offset.Offset "fProtected" Gr_d3d_textureresourceinfo where
  rawOffset = (#offset gr_d3d_textureresourceinfo_t, fProtected)
instance Foreign.Storable.Storable Gr_d3d_textureresourceinfo where
  sizeOf _ = (#size gr_d3d_textureresourceinfo_t)
  alignment _ = (#alignment gr_d3d_textureresourceinfo_t)
  peek p' = do
    fResource <- (#peek gr_d3d_textureresourceinfo_t, fResource) p'
    fAlloc <- (#peek gr_d3d_textureresourceinfo_t, fAlloc) p'
    fResourceState <- (#peek gr_d3d_textureresourceinfo_t, fResourceState) p'
    fFormat <- (#peek gr_d3d_textureresourceinfo_t, fFormat) p'
    fSampleCount <- (#peek gr_d3d_textureresourceinfo_t, fSampleCount) p'
    fLevelCount <- (#peek gr_d3d_textureresourceinfo_t, fLevelCount) p'
    fSampleQualityPattern <- (#peek gr_d3d_textureresourceinfo_t, fSampleQualityPattern) p'
    fProtected <- (#peek gr_d3d_textureresourceinfo_t, fProtected) p'
    pure Gr_d3d_textureresourceinfo{..}
  poke p' Gr_d3d_textureresourceinfo{..} = do
    (#poke gr_d3d_textureresourceinfo_t, fResource) p' fResource
    (#poke gr_d3d_textureresourceinfo_t, fAlloc) p' fAlloc
    (#poke gr_d3d_textureresourceinfo_t, fResourceState) p' fResourceState
    (#poke gr_d3d_textureresourceinfo_t, fFormat) p' fFormat
    (#poke gr_d3d_textureresourceinfo_t, fSampleCount) p' fSampleCount
    (#poke gr_d3d_textureresourceinfo_t, fLevelCount) p' fLevelCount
    (#poke gr_d3d_textureresourceinfo_t, fSampleQualityPattern) p' fSampleQualityPattern
    (#poke gr_d3d_textureresourceinfo_t, fProtected) p' fProtected

{- | C function signature:

@
void sk_colorfilter_unref(sk_colorfilter_t *filter)
@
-}
foreign import ccall "sk_colorfilter_unref" sk_colorfilter_unref ::
  Ptr (Sk_colorfilter) -- ^ C argument @"sk_colorfilter_t * filter"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_colorfilter_unref'
foreign import ccall "&sk_colorfilter_unref" p'sk_colorfilter_unref ::
  FunPtr (Ptr (Sk_colorfilter) -> IO (()))

{- | C function signature:

@
sk_colorfilter_t *sk_colorfilter_new_mode(sk_color_t c, sk_blendmode_t mode)
@
-}
foreign import ccall "sk_colorfilter_new_mode" sk_colorfilter_new_mode ::
  Sk_color -- ^ C argument @"sk_color_t c"@
  -> Sk_blendmode -- ^ C argument @"sk_blendmode_t mode"@
  -> IO (Ptr (Sk_colorfilter)) -- ^ C return type: @"sk_colorfilter_t *"@

-- | Function pointer to 'sk_colorfilter_new_mode'
foreign import ccall "&sk_colorfilter_new_mode" p'sk_colorfilter_new_mode ::
  FunPtr (Sk_color -> Sk_blendmode -> IO (Ptr (Sk_colorfilter)))

{- | C function signature:

@
sk_colorfilter_t *sk_colorfilter_new_lighting(sk_color_t mul, sk_color_t add)
@
-}
foreign import ccall "sk_colorfilter_new_lighting" sk_colorfilter_new_lighting ::
  Sk_color -- ^ C argument @"sk_color_t mul"@
  -> Sk_color -- ^ C argument @"sk_color_t add"@
  -> IO (Ptr (Sk_colorfilter)) -- ^ C return type: @"sk_colorfilter_t *"@

-- | Function pointer to 'sk_colorfilter_new_lighting'
foreign import ccall "&sk_colorfilter_new_lighting" p'sk_colorfilter_new_lighting ::
  FunPtr (Sk_color -> Sk_color -> IO (Ptr (Sk_colorfilter)))

{- | C function signature:

@
sk_colorfilter_t *sk_colorfilter_new_compose(sk_colorfilter_t *outer, sk_colorfilter_t *inner)
@
-}
foreign import ccall "sk_colorfilter_new_compose" sk_colorfilter_new_compose ::
  Ptr (Sk_colorfilter) -- ^ C argument @"sk_colorfilter_t * outer"@
  -> Ptr (Sk_colorfilter) -- ^ C argument @"sk_colorfilter_t * inner"@
  -> IO (Ptr (Sk_colorfilter)) -- ^ C return type: @"sk_colorfilter_t *"@

-- | Function pointer to 'sk_colorfilter_new_compose'
foreign import ccall "&sk_colorfilter_new_compose" p'sk_colorfilter_new_compose ::
  FunPtr (Ptr (Sk_colorfilter) -> Ptr (Sk_colorfilter) -> IO (Ptr (Sk_colorfilter)))

{- | C function signature:

@
sk_colorfilter_t *sk_colorfilter_new_color_matrix(const float array[20])
@
-}
foreign import ccall "sk_colorfilter_new_color_matrix" sk_colorfilter_new_color_matrix ::
  Ptr (CFloat) -- ^ C argument @"const float [20] array"@
  -> IO (Ptr (Sk_colorfilter)) -- ^ C return type: @"sk_colorfilter_t *"@

-- | Function pointer to 'sk_colorfilter_new_color_matrix'
foreign import ccall "&sk_colorfilter_new_color_matrix" p'sk_colorfilter_new_color_matrix ::
  FunPtr (Ptr (CFloat) -> IO (Ptr (Sk_colorfilter)))

{- | C function signature:

@
sk_colorfilter_t *sk_colorfilter_new_hsla_matrix(const float array[20])
@
-}
foreign import ccall "sk_colorfilter_new_hsla_matrix" sk_colorfilter_new_hsla_matrix ::
  Ptr (CFloat) -- ^ C argument @"const float [20] array"@
  -> IO (Ptr (Sk_colorfilter)) -- ^ C return type: @"sk_colorfilter_t *"@

-- | Function pointer to 'sk_colorfilter_new_hsla_matrix'
foreign import ccall "&sk_colorfilter_new_hsla_matrix" p'sk_colorfilter_new_hsla_matrix ::
  FunPtr (Ptr (CFloat) -> IO (Ptr (Sk_colorfilter)))

{- | C function signature:

@
sk_colorfilter_t *sk_colorfilter_new_linear_to_srgb_gamma(void)
@
-}
foreign import ccall "sk_colorfilter_new_linear_to_srgb_gamma" sk_colorfilter_new_linear_to_srgb_gamma ::
  IO (Ptr (Sk_colorfilter)) -- ^ C return type: @"sk_colorfilter_t *"@

-- | Function pointer to 'sk_colorfilter_new_linear_to_srgb_gamma'
foreign import ccall "&sk_colorfilter_new_linear_to_srgb_gamma" p'sk_colorfilter_new_linear_to_srgb_gamma ::
  FunPtr (IO (Ptr (Sk_colorfilter)))

{- | C function signature:

@
sk_colorfilter_t *sk_colorfilter_new_srgb_to_linear_gamma(void)
@
-}
foreign import ccall "sk_colorfilter_new_srgb_to_linear_gamma" sk_colorfilter_new_srgb_to_linear_gamma ::
  IO (Ptr (Sk_colorfilter)) -- ^ C return type: @"sk_colorfilter_t *"@

-- | Function pointer to 'sk_colorfilter_new_srgb_to_linear_gamma'
foreign import ccall "&sk_colorfilter_new_srgb_to_linear_gamma" p'sk_colorfilter_new_srgb_to_linear_gamma ::
  FunPtr (IO (Ptr (Sk_colorfilter)))

{- | C function signature:

@
sk_colorfilter_t *sk_colorfilter_new_lerp(float weight, sk_colorfilter_t *filter0, sk_colorfilter_t *filter1)
@
-}
foreign import ccall "sk_colorfilter_new_lerp" sk_colorfilter_new_lerp ::
  CFloat -- ^ C argument @"float weight"@
  -> Ptr (Sk_colorfilter) -- ^ C argument @"sk_colorfilter_t * filter0"@
  -> Ptr (Sk_colorfilter) -- ^ C argument @"sk_colorfilter_t * filter1"@
  -> IO (Ptr (Sk_colorfilter)) -- ^ C return type: @"sk_colorfilter_t *"@

-- | Function pointer to 'sk_colorfilter_new_lerp'
foreign import ccall "&sk_colorfilter_new_lerp" p'sk_colorfilter_new_lerp ::
  FunPtr (CFloat -> Ptr (Sk_colorfilter) -> Ptr (Sk_colorfilter) -> IO (Ptr (Sk_colorfilter)))

{- | C function signature:

@
sk_colorfilter_t *sk_colorfilter_new_luma_color(void)
@
-}
foreign import ccall "sk_colorfilter_new_luma_color" sk_colorfilter_new_luma_color ::
  IO (Ptr (Sk_colorfilter)) -- ^ C return type: @"sk_colorfilter_t *"@

-- | Function pointer to 'sk_colorfilter_new_luma_color'
foreign import ccall "&sk_colorfilter_new_luma_color" p'sk_colorfilter_new_luma_color ::
  FunPtr (IO (Ptr (Sk_colorfilter)))

{- | C function signature:

@
sk_colorfilter_t *sk_colorfilter_new_high_contrast(const sk_highcontrastconfig_t *config)
@
-}
foreign import ccall "sk_colorfilter_new_high_contrast" sk_colorfilter_new_high_contrast ::
  Ptr (Sk_highcontrastconfig) -- ^ C argument @"const sk_highcontrastconfig_t * config"@
  -> IO (Ptr (Sk_colorfilter)) -- ^ C return type: @"sk_colorfilter_t *"@

-- | Function pointer to 'sk_colorfilter_new_high_contrast'
foreign import ccall "&sk_colorfilter_new_high_contrast" p'sk_colorfilter_new_high_contrast ::
  FunPtr (Ptr (Sk_highcontrastconfig) -> IO (Ptr (Sk_colorfilter)))

{- | C function signature:

@
sk_colorfilter_t *sk_colorfilter_new_table(const uint8_t table[256])
@
-}
foreign import ccall "sk_colorfilter_new_table" sk_colorfilter_new_table ::
  Ptr (Word8) -- ^ C argument @"const uint8_t [256] table"@
  -> IO (Ptr (Sk_colorfilter)) -- ^ C return type: @"sk_colorfilter_t *"@

-- | Function pointer to 'sk_colorfilter_new_table'
foreign import ccall "&sk_colorfilter_new_table" p'sk_colorfilter_new_table ::
  FunPtr (Ptr (Word8) -> IO (Ptr (Sk_colorfilter)))

{- | C function signature:

@
sk_colorfilter_t *sk_colorfilter_new_table_argb(const uint8_t tableA[256], const uint8_t tableR[256], const uint8_t tableG[256], const uint8_t tableB[256])
@
-}
foreign import ccall "sk_colorfilter_new_table_argb" sk_colorfilter_new_table_argb ::
  Ptr (Word8) -- ^ C argument @"const uint8_t [256] tableA"@
  -> Ptr (Word8) -- ^ C argument @"const uint8_t [256] tableR"@
  -> Ptr (Word8) -- ^ C argument @"const uint8_t [256] tableG"@
  -> Ptr (Word8) -- ^ C argument @"const uint8_t [256] tableB"@
  -> IO (Ptr (Sk_colorfilter)) -- ^ C return type: @"sk_colorfilter_t *"@

-- | Function pointer to 'sk_colorfilter_new_table_argb'
foreign import ccall "&sk_colorfilter_new_table_argb" p'sk_colorfilter_new_table_argb ::
  FunPtr (Ptr (Word8) -> Ptr (Word8) -> Ptr (Word8) -> Ptr (Word8) -> IO (Ptr (Sk_colorfilter)))

{- | C function signature:

@
void sk_typeface_unref(sk_typeface_t *typeface)
@
-}
foreign import ccall "sk_typeface_unref" sk_typeface_unref ::
  Ptr (Sk_typeface) -- ^ C argument @"sk_typeface_t * typeface"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_typeface_unref'
foreign import ccall "&sk_typeface_unref" p'sk_typeface_unref ::
  FunPtr (Ptr (Sk_typeface) -> IO (()))

{- | C function signature:

@
sk_fontstyle_t *sk_typeface_get_fontstyle(const sk_typeface_t *typeface)
@
-}
foreign import ccall "sk_typeface_get_fontstyle" sk_typeface_get_fontstyle ::
  Ptr (Sk_typeface) -- ^ C argument @"const sk_typeface_t * typeface"@
  -> IO (Ptr (Sk_fontstyle)) -- ^ C return type: @"sk_fontstyle_t *"@

-- | Function pointer to 'sk_typeface_get_fontstyle'
foreign import ccall "&sk_typeface_get_fontstyle" p'sk_typeface_get_fontstyle ::
  FunPtr (Ptr (Sk_typeface) -> IO (Ptr (Sk_fontstyle)))

{- | C function signature:

@
int sk_typeface_get_font_weight(const sk_typeface_t *typeface)
@
-}
foreign import ccall "sk_typeface_get_font_weight" sk_typeface_get_font_weight ::
  Ptr (Sk_typeface) -- ^ C argument @"const sk_typeface_t * typeface"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_typeface_get_font_weight'
foreign import ccall "&sk_typeface_get_font_weight" p'sk_typeface_get_font_weight ::
  FunPtr (Ptr (Sk_typeface) -> IO (CInt))

{- | C function signature:

@
int sk_typeface_get_font_width(const sk_typeface_t *typeface)
@
-}
foreign import ccall "sk_typeface_get_font_width" sk_typeface_get_font_width ::
  Ptr (Sk_typeface) -- ^ C argument @"const sk_typeface_t * typeface"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_typeface_get_font_width'
foreign import ccall "&sk_typeface_get_font_width" p'sk_typeface_get_font_width ::
  FunPtr (Ptr (Sk_typeface) -> IO (CInt))

{- | C function signature:

@
sk_font_style_slant_t sk_typeface_get_font_slant(const sk_typeface_t *typeface)
@
-}
foreign import ccall "sk_typeface_get_font_slant" sk_typeface_get_font_slant ::
  Ptr (Sk_typeface) -- ^ C argument @"const sk_typeface_t * typeface"@
  -> IO (Sk_font_style_slant) -- ^ C return type: @"sk_font_style_slant_t"@

-- | Function pointer to 'sk_typeface_get_font_slant'
foreign import ccall "&sk_typeface_get_font_slant" p'sk_typeface_get_font_slant ::
  FunPtr (Ptr (Sk_typeface) -> IO (Sk_font_style_slant))

{- | C function signature:

@
_Bool sk_typeface_is_fixed_pitch(const sk_typeface_t *typeface)
@
-}
foreign import ccall "sk_typeface_is_fixed_pitch" sk_typeface_is_fixed_pitch ::
  Ptr (Sk_typeface) -- ^ C argument @"const sk_typeface_t * typeface"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_typeface_is_fixed_pitch'
foreign import ccall "&sk_typeface_is_fixed_pitch" p'sk_typeface_is_fixed_pitch ::
  FunPtr (Ptr (Sk_typeface) -> IO (CBool))

{- | C function signature:

@
sk_typeface_t *sk_typeface_create_default(void)
@
-}
foreign import ccall "sk_typeface_create_default" sk_typeface_create_default ::
  IO (Ptr (Sk_typeface)) -- ^ C return type: @"sk_typeface_t *"@

-- | Function pointer to 'sk_typeface_create_default'
foreign import ccall "&sk_typeface_create_default" p'sk_typeface_create_default ::
  FunPtr (IO (Ptr (Sk_typeface)))

{- | C function signature:

@
sk_typeface_t *sk_typeface_ref_default(void)
@
-}
foreign import ccall "sk_typeface_ref_default" sk_typeface_ref_default ::
  IO (Ptr (Sk_typeface)) -- ^ C return type: @"sk_typeface_t *"@

-- | Function pointer to 'sk_typeface_ref_default'
foreign import ccall "&sk_typeface_ref_default" p'sk_typeface_ref_default ::
  FunPtr (IO (Ptr (Sk_typeface)))

{- | C function signature:

@
sk_typeface_t *sk_typeface_create_from_name(const char *familyName, const sk_fontstyle_t *style)
@
-}
foreign import ccall "sk_typeface_create_from_name" sk_typeface_create_from_name ::
  Ptr (CChar) -- ^ C argument @"const char * familyName"@
  -> Ptr (Sk_fontstyle) -- ^ C argument @"const sk_fontstyle_t * style"@
  -> IO (Ptr (Sk_typeface)) -- ^ C return type: @"sk_typeface_t *"@

-- | Function pointer to 'sk_typeface_create_from_name'
foreign import ccall "&sk_typeface_create_from_name" p'sk_typeface_create_from_name ::
  FunPtr (Ptr (CChar) -> Ptr (Sk_fontstyle) -> IO (Ptr (Sk_typeface)))

{- | C function signature:

@
sk_typeface_t *sk_typeface_create_from_file(const char *path, int index)
@
-}
foreign import ccall "sk_typeface_create_from_file" sk_typeface_create_from_file ::
  Ptr (CChar) -- ^ C argument @"const char * path"@
  -> CInt -- ^ C argument @"int index"@
  -> IO (Ptr (Sk_typeface)) -- ^ C return type: @"sk_typeface_t *"@

-- | Function pointer to 'sk_typeface_create_from_file'
foreign import ccall "&sk_typeface_create_from_file" p'sk_typeface_create_from_file ::
  FunPtr (Ptr (CChar) -> CInt -> IO (Ptr (Sk_typeface)))

{- | C function signature:

@
sk_typeface_t *sk_typeface_create_from_stream(sk_stream_asset_t *stream, int index)
@
-}
foreign import ccall "sk_typeface_create_from_stream" sk_typeface_create_from_stream ::
  Ptr (Sk_stream_asset) -- ^ C argument @"sk_stream_asset_t * stream"@
  -> CInt -- ^ C argument @"int index"@
  -> IO (Ptr (Sk_typeface)) -- ^ C return type: @"sk_typeface_t *"@

-- | Function pointer to 'sk_typeface_create_from_stream'
foreign import ccall "&sk_typeface_create_from_stream" p'sk_typeface_create_from_stream ::
  FunPtr (Ptr (Sk_stream_asset) -> CInt -> IO (Ptr (Sk_typeface)))

{- | C function signature:

@
sk_typeface_t *sk_typeface_create_from_data(sk_data_t *data, int index)
@
-}
foreign import ccall "sk_typeface_create_from_data" sk_typeface_create_from_data ::
  Ptr (Sk_data) -- ^ C argument @"sk_data_t * data"@
  -> CInt -- ^ C argument @"int index"@
  -> IO (Ptr (Sk_typeface)) -- ^ C return type: @"sk_typeface_t *"@

-- | Function pointer to 'sk_typeface_create_from_data'
foreign import ccall "&sk_typeface_create_from_data" p'sk_typeface_create_from_data ::
  FunPtr (Ptr (Sk_data) -> CInt -> IO (Ptr (Sk_typeface)))

{- | C function signature:

@
void sk_typeface_unichars_to_glyphs(const sk_typeface_t *typeface, const int32_t unichars[], int count, uint16_t glyphs[])
@
-}
foreign import ccall "sk_typeface_unichars_to_glyphs" sk_typeface_unichars_to_glyphs ::
  Ptr (Sk_typeface) -- ^ C argument @"const sk_typeface_t * typeface"@
  -> Ptr (Int32) -- ^ C argument @"const int32_t [] unichars"@
  -> CInt -- ^ C argument @"int count"@
  -> Ptr (Word16) -- ^ C argument @"uint16_t [] glyphs"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_typeface_unichars_to_glyphs'
foreign import ccall "&sk_typeface_unichars_to_glyphs" p'sk_typeface_unichars_to_glyphs ::
  FunPtr (Ptr (Sk_typeface) -> Ptr (Int32) -> CInt -> Ptr (Word16) -> IO (()))

{- | C function signature:

@
uint16_t sk_typeface_unichar_to_glyph(const sk_typeface_t *typeface, const int32_t unichar)
@
-}
foreign import ccall "sk_typeface_unichar_to_glyph" sk_typeface_unichar_to_glyph ::
  Ptr (Sk_typeface) -- ^ C argument @"const sk_typeface_t * typeface"@
  -> Int32 -- ^ C argument @"const int32_t unichar"@
  -> IO (Word16) -- ^ C return type: @"uint16_t"@

-- | Function pointer to 'sk_typeface_unichar_to_glyph'
foreign import ccall "&sk_typeface_unichar_to_glyph" p'sk_typeface_unichar_to_glyph ::
  FunPtr (Ptr (Sk_typeface) -> Int32 -> IO (Word16))

{- | C function signature:

@
int sk_typeface_count_glyphs(const sk_typeface_t *typeface)
@
-}
foreign import ccall "sk_typeface_count_glyphs" sk_typeface_count_glyphs ::
  Ptr (Sk_typeface) -- ^ C argument @"const sk_typeface_t * typeface"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_typeface_count_glyphs'
foreign import ccall "&sk_typeface_count_glyphs" p'sk_typeface_count_glyphs ::
  FunPtr (Ptr (Sk_typeface) -> IO (CInt))

{- | C function signature:

@
int sk_typeface_count_tables(const sk_typeface_t *typeface)
@
-}
foreign import ccall "sk_typeface_count_tables" sk_typeface_count_tables ::
  Ptr (Sk_typeface) -- ^ C argument @"const sk_typeface_t * typeface"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_typeface_count_tables'
foreign import ccall "&sk_typeface_count_tables" p'sk_typeface_count_tables ::
  FunPtr (Ptr (Sk_typeface) -> IO (CInt))

{- | C function signature:

@
int sk_typeface_get_table_tags(const sk_typeface_t *typeface, sk_font_table_tag_t tags[])
@
-}
foreign import ccall "sk_typeface_get_table_tags" sk_typeface_get_table_tags ::
  Ptr (Sk_typeface) -- ^ C argument @"const sk_typeface_t * typeface"@
  -> Ptr (Sk_font_table_tag) -- ^ C argument @"sk_font_table_tag_t [] tags"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_typeface_get_table_tags'
foreign import ccall "&sk_typeface_get_table_tags" p'sk_typeface_get_table_tags ::
  FunPtr (Ptr (Sk_typeface) -> Ptr (Sk_font_table_tag) -> IO (CInt))

{- | C function signature:

@
size_t sk_typeface_get_table_size(const sk_typeface_t *typeface, sk_font_table_tag_t tag)
@
-}
foreign import ccall "sk_typeface_get_table_size" sk_typeface_get_table_size ::
  Ptr (Sk_typeface) -- ^ C argument @"const sk_typeface_t * typeface"@
  -> Sk_font_table_tag -- ^ C argument @"sk_font_table_tag_t tag"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_typeface_get_table_size'
foreign import ccall "&sk_typeface_get_table_size" p'sk_typeface_get_table_size ::
  FunPtr (Ptr (Sk_typeface) -> Sk_font_table_tag -> IO (CSize))

{- | C function signature:

@
size_t sk_typeface_get_table_data(const sk_typeface_t *typeface, sk_font_table_tag_t tag, size_t offset, size_t length, void *data)
@
-}
foreign import ccall "sk_typeface_get_table_data" sk_typeface_get_table_data ::
  Ptr (Sk_typeface) -- ^ C argument @"const sk_typeface_t * typeface"@
  -> Sk_font_table_tag -- ^ C argument @"sk_font_table_tag_t tag"@
  -> CSize -- ^ C argument @"size_t offset"@
  -> CSize -- ^ C argument @"size_t length"@
  -> Ptr (()) -- ^ C argument @"void * data"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_typeface_get_table_data'
foreign import ccall "&sk_typeface_get_table_data" p'sk_typeface_get_table_data ::
  FunPtr (Ptr (Sk_typeface) -> Sk_font_table_tag -> CSize -> CSize -> Ptr (()) -> IO (CSize))

{- | C function signature:

@
sk_data_t *sk_typeface_copy_table_data(const sk_typeface_t *typeface, sk_font_table_tag_t tag)
@
-}
foreign import ccall "sk_typeface_copy_table_data" sk_typeface_copy_table_data ::
  Ptr (Sk_typeface) -- ^ C argument @"const sk_typeface_t * typeface"@
  -> Sk_font_table_tag -- ^ C argument @"sk_font_table_tag_t tag"@
  -> IO (Ptr (Sk_data)) -- ^ C return type: @"sk_data_t *"@

-- | Function pointer to 'sk_typeface_copy_table_data'
foreign import ccall "&sk_typeface_copy_table_data" p'sk_typeface_copy_table_data ::
  FunPtr (Ptr (Sk_typeface) -> Sk_font_table_tag -> IO (Ptr (Sk_data)))

{- | C function signature:

@
int sk_typeface_get_units_per_em(const sk_typeface_t *typeface)
@
-}
foreign import ccall "sk_typeface_get_units_per_em" sk_typeface_get_units_per_em ::
  Ptr (Sk_typeface) -- ^ C argument @"const sk_typeface_t * typeface"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_typeface_get_units_per_em'
foreign import ccall "&sk_typeface_get_units_per_em" p'sk_typeface_get_units_per_em ::
  FunPtr (Ptr (Sk_typeface) -> IO (CInt))

{- | C function signature:

@
_Bool sk_typeface_get_kerning_pair_adjustments(const sk_typeface_t *typeface, const uint16_t glyphs[], int count, int32_t adjustments[])
@
-}
foreign import ccall "sk_typeface_get_kerning_pair_adjustments" sk_typeface_get_kerning_pair_adjustments ::
  Ptr (Sk_typeface) -- ^ C argument @"const sk_typeface_t * typeface"@
  -> Ptr (Word16) -- ^ C argument @"const uint16_t [] glyphs"@
  -> CInt -- ^ C argument @"int count"@
  -> Ptr (Int32) -- ^ C argument @"int32_t [] adjustments"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_typeface_get_kerning_pair_adjustments'
foreign import ccall "&sk_typeface_get_kerning_pair_adjustments" p'sk_typeface_get_kerning_pair_adjustments ::
  FunPtr (Ptr (Sk_typeface) -> Ptr (Word16) -> CInt -> Ptr (Int32) -> IO (CBool))

{- | C function signature:

@
sk_string_t *sk_typeface_get_family_name(const sk_typeface_t *typeface)
@
-}
foreign import ccall "sk_typeface_get_family_name" sk_typeface_get_family_name ::
  Ptr (Sk_typeface) -- ^ C argument @"const sk_typeface_t * typeface"@
  -> IO (Ptr (Sk_string)) -- ^ C return type: @"sk_string_t *"@

-- | Function pointer to 'sk_typeface_get_family_name'
foreign import ccall "&sk_typeface_get_family_name" p'sk_typeface_get_family_name ::
  FunPtr (Ptr (Sk_typeface) -> IO (Ptr (Sk_string)))

{- | C function signature:

@
sk_stream_asset_t *sk_typeface_open_stream(const sk_typeface_t *typeface, int *ttcIndex)
@
-}
foreign import ccall "sk_typeface_open_stream" sk_typeface_open_stream ::
  Ptr (Sk_typeface) -- ^ C argument @"const sk_typeface_t * typeface"@
  -> Ptr (CInt) -- ^ C argument @"int * ttcIndex"@
  -> IO (Ptr (Sk_stream_asset)) -- ^ C return type: @"sk_stream_asset_t *"@

-- | Function pointer to 'sk_typeface_open_stream'
foreign import ccall "&sk_typeface_open_stream" p'sk_typeface_open_stream ::
  FunPtr (Ptr (Sk_typeface) -> Ptr (CInt) -> IO (Ptr (Sk_stream_asset)))

{- | C function signature:

@
sk_fontmgr_t *sk_fontmgr_create_default(void)
@
-}
foreign import ccall "sk_fontmgr_create_default" sk_fontmgr_create_default ::
  IO (Ptr (Sk_fontmgr)) -- ^ C return type: @"sk_fontmgr_t *"@

-- | Function pointer to 'sk_fontmgr_create_default'
foreign import ccall "&sk_fontmgr_create_default" p'sk_fontmgr_create_default ::
  FunPtr (IO (Ptr (Sk_fontmgr)))

{- | C function signature:

@
sk_fontmgr_t *sk_fontmgr_ref_default(void)
@
-}
foreign import ccall "sk_fontmgr_ref_default" sk_fontmgr_ref_default ::
  IO (Ptr (Sk_fontmgr)) -- ^ C return type: @"sk_fontmgr_t *"@

-- | Function pointer to 'sk_fontmgr_ref_default'
foreign import ccall "&sk_fontmgr_ref_default" p'sk_fontmgr_ref_default ::
  FunPtr (IO (Ptr (Sk_fontmgr)))

{- | C function signature:

@
void sk_fontmgr_unref(sk_fontmgr_t *)
@
-}
foreign import ccall "sk_fontmgr_unref" sk_fontmgr_unref ::
  Ptr (Sk_fontmgr) -- ^ C argument type: @"sk_fontmgr_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_fontmgr_unref'
foreign import ccall "&sk_fontmgr_unref" p'sk_fontmgr_unref ::
  FunPtr (Ptr (Sk_fontmgr) -> IO (()))

{- | C function signature:

@
int sk_fontmgr_count_families(sk_fontmgr_t *)
@
-}
foreign import ccall "sk_fontmgr_count_families" sk_fontmgr_count_families ::
  Ptr (Sk_fontmgr) -- ^ C argument type: @"sk_fontmgr_t *"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_fontmgr_count_families'
foreign import ccall "&sk_fontmgr_count_families" p'sk_fontmgr_count_families ::
  FunPtr (Ptr (Sk_fontmgr) -> IO (CInt))

{- | C function signature:

@
void sk_fontmgr_get_family_name(sk_fontmgr_t *, int index, sk_string_t *familyName)
@
-}
foreign import ccall "sk_fontmgr_get_family_name" sk_fontmgr_get_family_name ::
  Ptr (Sk_fontmgr) -- ^ C argument type: @"sk_fontmgr_t *"@
  -> CInt -- ^ C argument @"int index"@
  -> Ptr (Sk_string) -- ^ C argument @"sk_string_t * familyName"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_fontmgr_get_family_name'
foreign import ccall "&sk_fontmgr_get_family_name" p'sk_fontmgr_get_family_name ::
  FunPtr (Ptr (Sk_fontmgr) -> CInt -> Ptr (Sk_string) -> IO (()))

{- | C function signature:

@
sk_fontstyleset_t *sk_fontmgr_create_styleset(sk_fontmgr_t *, int index)
@
-}
foreign import ccall "sk_fontmgr_create_styleset" sk_fontmgr_create_styleset ::
  Ptr (Sk_fontmgr) -- ^ C argument type: @"sk_fontmgr_t *"@
  -> CInt -- ^ C argument @"int index"@
  -> IO (Ptr (Sk_fontstyleset)) -- ^ C return type: @"sk_fontstyleset_t *"@

-- | Function pointer to 'sk_fontmgr_create_styleset'
foreign import ccall "&sk_fontmgr_create_styleset" p'sk_fontmgr_create_styleset ::
  FunPtr (Ptr (Sk_fontmgr) -> CInt -> IO (Ptr (Sk_fontstyleset)))

{- | C function signature:

@
sk_fontstyleset_t *sk_fontmgr_match_family(sk_fontmgr_t *, const char *familyName)
@
-}
foreign import ccall "sk_fontmgr_match_family" sk_fontmgr_match_family ::
  Ptr (Sk_fontmgr) -- ^ C argument type: @"sk_fontmgr_t *"@
  -> Ptr (CChar) -- ^ C argument @"const char * familyName"@
  -> IO (Ptr (Sk_fontstyleset)) -- ^ C return type: @"sk_fontstyleset_t *"@

-- | Function pointer to 'sk_fontmgr_match_family'
foreign import ccall "&sk_fontmgr_match_family" p'sk_fontmgr_match_family ::
  FunPtr (Ptr (Sk_fontmgr) -> Ptr (CChar) -> IO (Ptr (Sk_fontstyleset)))

{- | C function signature:

@
sk_typeface_t *sk_fontmgr_match_family_style(sk_fontmgr_t *, const char *familyName, sk_fontstyle_t *style)
@
-}
foreign import ccall "sk_fontmgr_match_family_style" sk_fontmgr_match_family_style ::
  Ptr (Sk_fontmgr) -- ^ C argument type: @"sk_fontmgr_t *"@
  -> Ptr (CChar) -- ^ C argument @"const char * familyName"@
  -> Ptr (Sk_fontstyle) -- ^ C argument @"sk_fontstyle_t * style"@
  -> IO (Ptr (Sk_typeface)) -- ^ C return type: @"sk_typeface_t *"@

-- | Function pointer to 'sk_fontmgr_match_family_style'
foreign import ccall "&sk_fontmgr_match_family_style" p'sk_fontmgr_match_family_style ::
  FunPtr (Ptr (Sk_fontmgr) -> Ptr (CChar) -> Ptr (Sk_fontstyle) -> IO (Ptr (Sk_typeface)))

{- | C function signature:

@
sk_typeface_t *sk_fontmgr_match_family_style_character(sk_fontmgr_t *, const char *familyName, sk_fontstyle_t *style, const char **bcp47, int bcp47Count, int32_t character)
@
-}
foreign import ccall "sk_fontmgr_match_family_style_character" sk_fontmgr_match_family_style_character ::
  Ptr (Sk_fontmgr) -- ^ C argument type: @"sk_fontmgr_t *"@
  -> Ptr (CChar) -- ^ C argument @"const char * familyName"@
  -> Ptr (Sk_fontstyle) -- ^ C argument @"sk_fontstyle_t * style"@
  -> Ptr (Ptr (CChar)) -- ^ C argument @"const char ** bcp47"@
  -> CInt -- ^ C argument @"int bcp47Count"@
  -> Int32 -- ^ C argument @"int32_t character"@
  -> IO (Ptr (Sk_typeface)) -- ^ C return type: @"sk_typeface_t *"@

-- | Function pointer to 'sk_fontmgr_match_family_style_character'
foreign import ccall "&sk_fontmgr_match_family_style_character" p'sk_fontmgr_match_family_style_character ::
  FunPtr (Ptr (Sk_fontmgr) -> Ptr (CChar) -> Ptr (Sk_fontstyle) -> Ptr (Ptr (CChar)) -> CInt -> Int32 -> IO (Ptr (Sk_typeface)))

{- | C function signature:

@
sk_typeface_t *sk_fontmgr_create_from_data(sk_fontmgr_t *, sk_data_t *data, int index)
@
-}
foreign import ccall "sk_fontmgr_create_from_data" sk_fontmgr_create_from_data ::
  Ptr (Sk_fontmgr) -- ^ C argument type: @"sk_fontmgr_t *"@
  -> Ptr (Sk_data) -- ^ C argument @"sk_data_t * data"@
  -> CInt -- ^ C argument @"int index"@
  -> IO (Ptr (Sk_typeface)) -- ^ C return type: @"sk_typeface_t *"@

-- | Function pointer to 'sk_fontmgr_create_from_data'
foreign import ccall "&sk_fontmgr_create_from_data" p'sk_fontmgr_create_from_data ::
  FunPtr (Ptr (Sk_fontmgr) -> Ptr (Sk_data) -> CInt -> IO (Ptr (Sk_typeface)))

{- | C function signature:

@
sk_typeface_t *sk_fontmgr_create_from_stream(sk_fontmgr_t *, sk_stream_asset_t *stream, int index)
@
-}
foreign import ccall "sk_fontmgr_create_from_stream" sk_fontmgr_create_from_stream ::
  Ptr (Sk_fontmgr) -- ^ C argument type: @"sk_fontmgr_t *"@
  -> Ptr (Sk_stream_asset) -- ^ C argument @"sk_stream_asset_t * stream"@
  -> CInt -- ^ C argument @"int index"@
  -> IO (Ptr (Sk_typeface)) -- ^ C return type: @"sk_typeface_t *"@

-- | Function pointer to 'sk_fontmgr_create_from_stream'
foreign import ccall "&sk_fontmgr_create_from_stream" p'sk_fontmgr_create_from_stream ::
  FunPtr (Ptr (Sk_fontmgr) -> Ptr (Sk_stream_asset) -> CInt -> IO (Ptr (Sk_typeface)))

{- | C function signature:

@
sk_typeface_t *sk_fontmgr_create_from_file(sk_fontmgr_t *, const char *path, int index)
@
-}
foreign import ccall "sk_fontmgr_create_from_file" sk_fontmgr_create_from_file ::
  Ptr (Sk_fontmgr) -- ^ C argument type: @"sk_fontmgr_t *"@
  -> Ptr (CChar) -- ^ C argument @"const char * path"@
  -> CInt -- ^ C argument @"int index"@
  -> IO (Ptr (Sk_typeface)) -- ^ C return type: @"sk_typeface_t *"@

-- | Function pointer to 'sk_fontmgr_create_from_file'
foreign import ccall "&sk_fontmgr_create_from_file" p'sk_fontmgr_create_from_file ::
  FunPtr (Ptr (Sk_fontmgr) -> Ptr (CChar) -> CInt -> IO (Ptr (Sk_typeface)))

{- | C function signature:

@
sk_fontstyle_t *sk_fontstyle_new(int weight, int width, sk_font_style_slant_t slant)
@
-}
foreign import ccall "sk_fontstyle_new" sk_fontstyle_new ::
  CInt -- ^ C argument @"int weight"@
  -> CInt -- ^ C argument @"int width"@
  -> Sk_font_style_slant -- ^ C argument @"sk_font_style_slant_t slant"@
  -> IO (Ptr (Sk_fontstyle)) -- ^ C return type: @"sk_fontstyle_t *"@

-- | Function pointer to 'sk_fontstyle_new'
foreign import ccall "&sk_fontstyle_new" p'sk_fontstyle_new ::
  FunPtr (CInt -> CInt -> Sk_font_style_slant -> IO (Ptr (Sk_fontstyle)))

{- | C function signature:

@
void sk_fontstyle_delete(sk_fontstyle_t *fs)
@
-}
foreign import ccall "sk_fontstyle_delete" sk_fontstyle_delete ::
  Ptr (Sk_fontstyle) -- ^ C argument @"sk_fontstyle_t * fs"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_fontstyle_delete'
foreign import ccall "&sk_fontstyle_delete" p'sk_fontstyle_delete ::
  FunPtr (Ptr (Sk_fontstyle) -> IO (()))

{- | C function signature:

@
int sk_fontstyle_get_weight(const sk_fontstyle_t *fs)
@
-}
foreign import ccall "sk_fontstyle_get_weight" sk_fontstyle_get_weight ::
  Ptr (Sk_fontstyle) -- ^ C argument @"const sk_fontstyle_t * fs"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_fontstyle_get_weight'
foreign import ccall "&sk_fontstyle_get_weight" p'sk_fontstyle_get_weight ::
  FunPtr (Ptr (Sk_fontstyle) -> IO (CInt))

{- | C function signature:

@
int sk_fontstyle_get_width(const sk_fontstyle_t *fs)
@
-}
foreign import ccall "sk_fontstyle_get_width" sk_fontstyle_get_width ::
  Ptr (Sk_fontstyle) -- ^ C argument @"const sk_fontstyle_t * fs"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_fontstyle_get_width'
foreign import ccall "&sk_fontstyle_get_width" p'sk_fontstyle_get_width ::
  FunPtr (Ptr (Sk_fontstyle) -> IO (CInt))

{- | C function signature:

@
sk_font_style_slant_t sk_fontstyle_get_slant(const sk_fontstyle_t *fs)
@
-}
foreign import ccall "sk_fontstyle_get_slant" sk_fontstyle_get_slant ::
  Ptr (Sk_fontstyle) -- ^ C argument @"const sk_fontstyle_t * fs"@
  -> IO (Sk_font_style_slant) -- ^ C return type: @"sk_font_style_slant_t"@

-- | Function pointer to 'sk_fontstyle_get_slant'
foreign import ccall "&sk_fontstyle_get_slant" p'sk_fontstyle_get_slant ::
  FunPtr (Ptr (Sk_fontstyle) -> IO (Sk_font_style_slant))

{- | C function signature:

@
sk_fontstyleset_t *sk_fontstyleset_create_empty(void)
@
-}
foreign import ccall "sk_fontstyleset_create_empty" sk_fontstyleset_create_empty ::
  IO (Ptr (Sk_fontstyleset)) -- ^ C return type: @"sk_fontstyleset_t *"@

-- | Function pointer to 'sk_fontstyleset_create_empty'
foreign import ccall "&sk_fontstyleset_create_empty" p'sk_fontstyleset_create_empty ::
  FunPtr (IO (Ptr (Sk_fontstyleset)))

{- | C function signature:

@
void sk_fontstyleset_unref(sk_fontstyleset_t *fss)
@
-}
foreign import ccall "sk_fontstyleset_unref" sk_fontstyleset_unref ::
  Ptr (Sk_fontstyleset) -- ^ C argument @"sk_fontstyleset_t * fss"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_fontstyleset_unref'
foreign import ccall "&sk_fontstyleset_unref" p'sk_fontstyleset_unref ::
  FunPtr (Ptr (Sk_fontstyleset) -> IO (()))

{- | C function signature:

@
int sk_fontstyleset_get_count(sk_fontstyleset_t *fss)
@
-}
foreign import ccall "sk_fontstyleset_get_count" sk_fontstyleset_get_count ::
  Ptr (Sk_fontstyleset) -- ^ C argument @"sk_fontstyleset_t * fss"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_fontstyleset_get_count'
foreign import ccall "&sk_fontstyleset_get_count" p'sk_fontstyleset_get_count ::
  FunPtr (Ptr (Sk_fontstyleset) -> IO (CInt))

{- | C function signature:

@
void sk_fontstyleset_get_style(sk_fontstyleset_t *fss, int index, sk_fontstyle_t *fs, sk_string_t *style)
@
-}
foreign import ccall "sk_fontstyleset_get_style" sk_fontstyleset_get_style ::
  Ptr (Sk_fontstyleset) -- ^ C argument @"sk_fontstyleset_t * fss"@
  -> CInt -- ^ C argument @"int index"@
  -> Ptr (Sk_fontstyle) -- ^ C argument @"sk_fontstyle_t * fs"@
  -> Ptr (Sk_string) -- ^ C argument @"sk_string_t * style"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_fontstyleset_get_style'
foreign import ccall "&sk_fontstyleset_get_style" p'sk_fontstyleset_get_style ::
  FunPtr (Ptr (Sk_fontstyleset) -> CInt -> Ptr (Sk_fontstyle) -> Ptr (Sk_string) -> IO (()))

{- | C function signature:

@
sk_typeface_t *sk_fontstyleset_create_typeface(sk_fontstyleset_t *fss, int index)
@
-}
foreign import ccall "sk_fontstyleset_create_typeface" sk_fontstyleset_create_typeface ::
  Ptr (Sk_fontstyleset) -- ^ C argument @"sk_fontstyleset_t * fss"@
  -> CInt -- ^ C argument @"int index"@
  -> IO (Ptr (Sk_typeface)) -- ^ C return type: @"sk_typeface_t *"@

-- | Function pointer to 'sk_fontstyleset_create_typeface'
foreign import ccall "&sk_fontstyleset_create_typeface" p'sk_fontstyleset_create_typeface ::
  FunPtr (Ptr (Sk_fontstyleset) -> CInt -> IO (Ptr (Sk_typeface)))

{- | C function signature:

@
sk_typeface_t *sk_fontstyleset_match_style(sk_fontstyleset_t *fss, sk_fontstyle_t *style)
@
-}
foreign import ccall "sk_fontstyleset_match_style" sk_fontstyleset_match_style ::
  Ptr (Sk_fontstyleset) -- ^ C argument @"sk_fontstyleset_t * fss"@
  -> Ptr (Sk_fontstyle) -- ^ C argument @"sk_fontstyle_t * style"@
  -> IO (Ptr (Sk_typeface)) -- ^ C return type: @"sk_typeface_t *"@

-- | Function pointer to 'sk_fontstyleset_match_style'
foreign import ccall "&sk_fontstyleset_match_style" p'sk_fontstyleset_match_style ::
  FunPtr (Ptr (Sk_fontstyleset) -> Ptr (Sk_fontstyle) -> IO (Ptr (Sk_typeface)))

{- | C function signature:

@
sk_picture_recorder_t *sk_picture_recorder_new(void)
@
-}
foreign import ccall "sk_picture_recorder_new" sk_picture_recorder_new ::
  IO (Ptr (Sk_picture_recorder)) -- ^ C return type: @"sk_picture_recorder_t *"@

-- | Function pointer to 'sk_picture_recorder_new'
foreign import ccall "&sk_picture_recorder_new" p'sk_picture_recorder_new ::
  FunPtr (IO (Ptr (Sk_picture_recorder)))

{- | C function signature:

@
void sk_picture_recorder_delete(sk_picture_recorder_t *)
@
-}
foreign import ccall "sk_picture_recorder_delete" sk_picture_recorder_delete ::
  Ptr (Sk_picture_recorder) -- ^ C argument type: @"sk_picture_recorder_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_picture_recorder_delete'
foreign import ccall "&sk_picture_recorder_delete" p'sk_picture_recorder_delete ::
  FunPtr (Ptr (Sk_picture_recorder) -> IO (()))

{- | C function signature:

@
sk_canvas_t *sk_picture_recorder_begin_recording(sk_picture_recorder_t *, const sk_rect_t *)
@
-}
foreign import ccall "sk_picture_recorder_begin_recording" sk_picture_recorder_begin_recording ::
  Ptr (Sk_picture_recorder) -- ^ C argument type: @"sk_picture_recorder_t *"@
  -> Ptr (Sk_rect) -- ^ C argument type: @"const sk_rect_t *"@
  -> IO (Ptr (Sk_canvas)) -- ^ C return type: @"sk_canvas_t *"@

-- | Function pointer to 'sk_picture_recorder_begin_recording'
foreign import ccall "&sk_picture_recorder_begin_recording" p'sk_picture_recorder_begin_recording ::
  FunPtr (Ptr (Sk_picture_recorder) -> Ptr (Sk_rect) -> IO (Ptr (Sk_canvas)))

{- | C function signature:

@
sk_canvas_t *sk_picture_recorder_begin_recording_with_bbh_factory(sk_picture_recorder_t *, const sk_rect_t *, sk_bbh_factory_t *)
@
-}
foreign import ccall "sk_picture_recorder_begin_recording_with_bbh_factory" sk_picture_recorder_begin_recording_with_bbh_factory ::
  Ptr (Sk_picture_recorder) -- ^ C argument type: @"sk_picture_recorder_t *"@
  -> Ptr (Sk_rect) -- ^ C argument type: @"const sk_rect_t *"@
  -> Ptr (Sk_bbh_factory) -- ^ C argument type: @"sk_bbh_factory_t *"@
  -> IO (Ptr (Sk_canvas)) -- ^ C return type: @"sk_canvas_t *"@

-- | Function pointer to 'sk_picture_recorder_begin_recording_with_bbh_factory'
foreign import ccall "&sk_picture_recorder_begin_recording_with_bbh_factory" p'sk_picture_recorder_begin_recording_with_bbh_factory ::
  FunPtr (Ptr (Sk_picture_recorder) -> Ptr (Sk_rect) -> Ptr (Sk_bbh_factory) -> IO (Ptr (Sk_canvas)))

{- | C function signature:

@
sk_picture_t *sk_picture_recorder_end_recording(sk_picture_recorder_t *)
@
-}
foreign import ccall "sk_picture_recorder_end_recording" sk_picture_recorder_end_recording ::
  Ptr (Sk_picture_recorder) -- ^ C argument type: @"sk_picture_recorder_t *"@
  -> IO (Ptr (Sk_picture)) -- ^ C return type: @"sk_picture_t *"@

-- | Function pointer to 'sk_picture_recorder_end_recording'
foreign import ccall "&sk_picture_recorder_end_recording" p'sk_picture_recorder_end_recording ::
  FunPtr (Ptr (Sk_picture_recorder) -> IO (Ptr (Sk_picture)))

{- | C function signature:

@
sk_drawable_t *sk_picture_recorder_end_recording_as_drawable(sk_picture_recorder_t *)
@
-}
foreign import ccall "sk_picture_recorder_end_recording_as_drawable" sk_picture_recorder_end_recording_as_drawable ::
  Ptr (Sk_picture_recorder) -- ^ C argument type: @"sk_picture_recorder_t *"@
  -> IO (Ptr (Sk_drawable)) -- ^ C return type: @"sk_drawable_t *"@

-- | Function pointer to 'sk_picture_recorder_end_recording_as_drawable'
foreign import ccall "&sk_picture_recorder_end_recording_as_drawable" p'sk_picture_recorder_end_recording_as_drawable ::
  FunPtr (Ptr (Sk_picture_recorder) -> IO (Ptr (Sk_drawable)))

{- | C function signature:

@
sk_canvas_t *sk_picture_get_recording_canvas(sk_picture_recorder_t *crec)
@
-}
foreign import ccall "sk_picture_get_recording_canvas" sk_picture_get_recording_canvas ::
  Ptr (Sk_picture_recorder) -- ^ C argument @"sk_picture_recorder_t * crec"@
  -> IO (Ptr (Sk_canvas)) -- ^ C return type: @"sk_canvas_t *"@

-- | Function pointer to 'sk_picture_get_recording_canvas'
foreign import ccall "&sk_picture_get_recording_canvas" p'sk_picture_get_recording_canvas ::
  FunPtr (Ptr (Sk_picture_recorder) -> IO (Ptr (Sk_canvas)))

{- | C function signature:

@
void sk_picture_ref(sk_picture_t *)
@
-}
foreign import ccall "sk_picture_ref" sk_picture_ref ::
  Ptr (Sk_picture) -- ^ C argument type: @"sk_picture_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_picture_ref'
foreign import ccall "&sk_picture_ref" p'sk_picture_ref ::
  FunPtr (Ptr (Sk_picture) -> IO (()))

{- | C function signature:

@
void sk_picture_unref(sk_picture_t *)
@
-}
foreign import ccall "sk_picture_unref" sk_picture_unref ::
  Ptr (Sk_picture) -- ^ C argument type: @"sk_picture_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_picture_unref'
foreign import ccall "&sk_picture_unref" p'sk_picture_unref ::
  FunPtr (Ptr (Sk_picture) -> IO (()))

{- | C function signature:

@
uint32_t sk_picture_get_unique_id(sk_picture_t *)
@
-}
foreign import ccall "sk_picture_get_unique_id" sk_picture_get_unique_id ::
  Ptr (Sk_picture) -- ^ C argument type: @"sk_picture_t *"@
  -> IO (Word32) -- ^ C return type: @"uint32_t"@

-- | Function pointer to 'sk_picture_get_unique_id'
foreign import ccall "&sk_picture_get_unique_id" p'sk_picture_get_unique_id ::
  FunPtr (Ptr (Sk_picture) -> IO (Word32))

{- | C function signature:

@
void sk_picture_get_cull_rect(sk_picture_t *, sk_rect_t *)
@
-}
foreign import ccall "sk_picture_get_cull_rect" sk_picture_get_cull_rect ::
  Ptr (Sk_picture) -- ^ C argument type: @"sk_picture_t *"@
  -> Ptr (Sk_rect) -- ^ C argument type: @"sk_rect_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_picture_get_cull_rect'
foreign import ccall "&sk_picture_get_cull_rect" p'sk_picture_get_cull_rect ::
  FunPtr (Ptr (Sk_picture) -> Ptr (Sk_rect) -> IO (()))

{- | C function signature:

@
sk_shader_t *sk_picture_make_shader(sk_picture_t *src, sk_shader_tilemode_t tmx, sk_shader_tilemode_t tmy, sk_filter_mode_t mode, const sk_matrix_t *localMatrix, const sk_rect_t *tile)
@
-}
foreign import ccall "sk_picture_make_shader" sk_picture_make_shader ::
  Ptr (Sk_picture) -- ^ C argument @"sk_picture_t * src"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t tmx"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t tmy"@
  -> Sk_filter_mode -- ^ C argument @"sk_filter_mode_t mode"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * localMatrix"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * tile"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_picture_make_shader'
foreign import ccall "&sk_picture_make_shader" p'sk_picture_make_shader ::
  FunPtr (Ptr (Sk_picture) -> Sk_shader_tilemode -> Sk_shader_tilemode -> Sk_filter_mode -> Ptr (Sk_matrix) -> Ptr (Sk_rect) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_data_t *sk_picture_serialize_to_data(const sk_picture_t *picture)
@
-}
foreign import ccall "sk_picture_serialize_to_data" sk_picture_serialize_to_data ::
  Ptr (Sk_picture) -- ^ C argument @"const sk_picture_t * picture"@
  -> IO (Ptr (Sk_data)) -- ^ C return type: @"sk_data_t *"@

-- | Function pointer to 'sk_picture_serialize_to_data'
foreign import ccall "&sk_picture_serialize_to_data" p'sk_picture_serialize_to_data ::
  FunPtr (Ptr (Sk_picture) -> IO (Ptr (Sk_data)))

{- | C function signature:

@
void sk_picture_serialize_to_stream(const sk_picture_t *picture, sk_wstream_t *stream)
@
-}
foreign import ccall "sk_picture_serialize_to_stream" sk_picture_serialize_to_stream ::
  Ptr (Sk_picture) -- ^ C argument @"const sk_picture_t * picture"@
  -> Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * stream"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_picture_serialize_to_stream'
foreign import ccall "&sk_picture_serialize_to_stream" p'sk_picture_serialize_to_stream ::
  FunPtr (Ptr (Sk_picture) -> Ptr (Sk_wstream) -> IO (()))

{- | C function signature:

@
sk_picture_t *sk_picture_deserialize_from_stream(sk_stream_t *stream)
@
-}
foreign import ccall "sk_picture_deserialize_from_stream" sk_picture_deserialize_from_stream ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * stream"@
  -> IO (Ptr (Sk_picture)) -- ^ C return type: @"sk_picture_t *"@

-- | Function pointer to 'sk_picture_deserialize_from_stream'
foreign import ccall "&sk_picture_deserialize_from_stream" p'sk_picture_deserialize_from_stream ::
  FunPtr (Ptr (Sk_stream) -> IO (Ptr (Sk_picture)))

{- | C function signature:

@
sk_picture_t *sk_picture_deserialize_from_data(sk_data_t *data)
@
-}
foreign import ccall "sk_picture_deserialize_from_data" sk_picture_deserialize_from_data ::
  Ptr (Sk_data) -- ^ C argument @"sk_data_t * data"@
  -> IO (Ptr (Sk_picture)) -- ^ C return type: @"sk_picture_t *"@

-- | Function pointer to 'sk_picture_deserialize_from_data'
foreign import ccall "&sk_picture_deserialize_from_data" p'sk_picture_deserialize_from_data ::
  FunPtr (Ptr (Sk_data) -> IO (Ptr (Sk_picture)))

{- | C function signature:

@
sk_picture_t *sk_picture_deserialize_from_memory(void *buffer, size_t length)
@
-}
foreign import ccall "sk_picture_deserialize_from_memory" sk_picture_deserialize_from_memory ::
  Ptr (()) -- ^ C argument @"void * buffer"@
  -> CSize -- ^ C argument @"size_t length"@
  -> IO (Ptr (Sk_picture)) -- ^ C return type: @"sk_picture_t *"@

-- | Function pointer to 'sk_picture_deserialize_from_memory'
foreign import ccall "&sk_picture_deserialize_from_memory" p'sk_picture_deserialize_from_memory ::
  FunPtr (Ptr (()) -> CSize -> IO (Ptr (Sk_picture)))

{- | C function signature:

@
void sk_picture_playback(const sk_picture_t *picture, sk_canvas_t *canvas)
@
-}
foreign import ccall "sk_picture_playback" sk_picture_playback ::
  Ptr (Sk_picture) -- ^ C argument @"const sk_picture_t * picture"@
  -> Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * canvas"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_picture_playback'
foreign import ccall "&sk_picture_playback" p'sk_picture_playback ::
  FunPtr (Ptr (Sk_picture) -> Ptr (Sk_canvas) -> IO (()))

{- | C function signature:

@
int sk_picture_approximate_op_count(const sk_picture_t *picture, _Bool nested)
@
-}
foreign import ccall "sk_picture_approximate_op_count" sk_picture_approximate_op_count ::
  Ptr (Sk_picture) -- ^ C argument @"const sk_picture_t * picture"@
  -> CBool -- ^ C argument @"_Bool nested"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_picture_approximate_op_count'
foreign import ccall "&sk_picture_approximate_op_count" p'sk_picture_approximate_op_count ::
  FunPtr (Ptr (Sk_picture) -> CBool -> IO (CInt))

{- | C function signature:

@
size_t sk_picture_approximate_bytes_used(const sk_picture_t *picture)
@
-}
foreign import ccall "sk_picture_approximate_bytes_used" sk_picture_approximate_bytes_used ::
  Ptr (Sk_picture) -- ^ C argument @"const sk_picture_t * picture"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_picture_approximate_bytes_used'
foreign import ccall "&sk_picture_approximate_bytes_used" p'sk_picture_approximate_bytes_used ::
  FunPtr (Ptr (Sk_picture) -> IO (CSize))

{- | C function signature:

@
sk_rtree_factory_t *sk_rtree_factory_new(void)
@
-}
foreign import ccall "sk_rtree_factory_new" sk_rtree_factory_new ::
  IO (Ptr (Sk_rtree_factory)) -- ^ C return type: @"sk_rtree_factory_t *"@

-- | Function pointer to 'sk_rtree_factory_new'
foreign import ccall "&sk_rtree_factory_new" p'sk_rtree_factory_new ::
  FunPtr (IO (Ptr (Sk_rtree_factory)))

{- | C function signature:

@
void sk_rtree_factory_delete(sk_rtree_factory_t *)
@
-}
foreign import ccall "sk_rtree_factory_delete" sk_rtree_factory_delete ::
  Ptr (Sk_rtree_factory) -- ^ C argument type: @"sk_rtree_factory_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_rtree_factory_delete'
foreign import ccall "&sk_rtree_factory_delete" p'sk_rtree_factory_delete ::
  FunPtr (Ptr (Sk_rtree_factory) -> IO (()))

{- | C function signature:

@
sk_surface_t *sk_surface_new_null(int width, int height)
@
-}
foreign import ccall "sk_surface_new_null" sk_surface_new_null ::
  CInt -- ^ C argument @"int width"@
  -> CInt -- ^ C argument @"int height"@
  -> IO (Ptr (Sk_surface)) -- ^ C return type: @"sk_surface_t *"@

-- | Function pointer to 'sk_surface_new_null'
foreign import ccall "&sk_surface_new_null" p'sk_surface_new_null ::
  FunPtr (CInt -> CInt -> IO (Ptr (Sk_surface)))

{- | C function signature:

@
sk_surface_t *sk_surface_new_raster(const sk_imageinfo_t *, size_t rowBytes, const sk_surfaceprops_t *)
@
-}
foreign import ccall "sk_surface_new_raster" sk_surface_new_raster ::
  Ptr (Sk_imageinfo) -- ^ C argument type: @"const sk_imageinfo_t *"@
  -> CSize -- ^ C argument @"size_t rowBytes"@
  -> Ptr (Sk_surfaceprops) -- ^ C argument type: @"const sk_surfaceprops_t *"@
  -> IO (Ptr (Sk_surface)) -- ^ C return type: @"sk_surface_t *"@

-- | Function pointer to 'sk_surface_new_raster'
foreign import ccall "&sk_surface_new_raster" p'sk_surface_new_raster ::
  FunPtr (Ptr (Sk_imageinfo) -> CSize -> Ptr (Sk_surfaceprops) -> IO (Ptr (Sk_surface)))

{- | C function signature:

@
sk_surface_t *sk_surface_new_raster_direct(const sk_imageinfo_t *, void *pixels, size_t rowBytes, const sk_surface_raster_release_proc releaseProc, void *context, const sk_surfaceprops_t *props)
@
-}
foreign import ccall "sk_surface_new_raster_direct" sk_surface_new_raster_direct ::
  Ptr (Sk_imageinfo) -- ^ C argument type: @"const sk_imageinfo_t *"@
  -> Ptr (()) -- ^ C argument @"void * pixels"@
  -> CSize -- ^ C argument @"size_t rowBytes"@
  -> FunPtr Sk_surface_raster_release_proc -- ^ C argument @"const sk_surface_raster_release_proc releaseProc"@
  -> Ptr (()) -- ^ C argument @"void * context"@
  -> Ptr (Sk_surfaceprops) -- ^ C argument @"const sk_surfaceprops_t * props"@
  -> IO (Ptr (Sk_surface)) -- ^ C return type: @"sk_surface_t *"@

-- | Function pointer to 'sk_surface_new_raster_direct'
foreign import ccall "&sk_surface_new_raster_direct" p'sk_surface_new_raster_direct ::
  FunPtr (Ptr (Sk_imageinfo) -> Ptr (()) -> CSize -> FunPtr Sk_surface_raster_release_proc -> Ptr (()) -> Ptr (Sk_surfaceprops) -> IO (Ptr (Sk_surface)))

{- | C function signature:

@
sk_surface_t *sk_surface_new_backend_texture(gr_recording_context_t *context, const gr_backendtexture_t *texture, gr_surfaceorigin_t origin, int samples, sk_colortype_t colorType, sk_colorspace_t *colorspace, const sk_surfaceprops_t *props)
@
-}
foreign import ccall "sk_surface_new_backend_texture" sk_surface_new_backend_texture ::
  Ptr (Gr_recording_context) -- ^ C argument @"gr_recording_context_t * context"@
  -> Ptr (Gr_backendtexture) -- ^ C argument @"const gr_backendtexture_t * texture"@
  -> Gr_surfaceorigin -- ^ C argument @"gr_surfaceorigin_t origin"@
  -> CInt -- ^ C argument @"int samples"@
  -> Sk_colortype -- ^ C argument @"sk_colortype_t colorType"@
  -> Ptr (Sk_colorspace) -- ^ C argument @"sk_colorspace_t * colorspace"@
  -> Ptr (Sk_surfaceprops) -- ^ C argument @"const sk_surfaceprops_t * props"@
  -> IO (Ptr (Sk_surface)) -- ^ C return type: @"sk_surface_t *"@

-- | Function pointer to 'sk_surface_new_backend_texture'
foreign import ccall "&sk_surface_new_backend_texture" p'sk_surface_new_backend_texture ::
  FunPtr (Ptr (Gr_recording_context) -> Ptr (Gr_backendtexture) -> Gr_surfaceorigin -> CInt -> Sk_colortype -> Ptr (Sk_colorspace) -> Ptr (Sk_surfaceprops) -> IO (Ptr (Sk_surface)))

{- | C function signature:

@
sk_surface_t *sk_surface_new_backend_render_target(gr_recording_context_t *context, const gr_backendrendertarget_t *target, gr_surfaceorigin_t origin, sk_colortype_t colorType, sk_colorspace_t *colorspace, const sk_surfaceprops_t *props)
@
-}
foreign import ccall "sk_surface_new_backend_render_target" sk_surface_new_backend_render_target ::
  Ptr (Gr_recording_context) -- ^ C argument @"gr_recording_context_t * context"@
  -> Ptr (Gr_backendrendertarget) -- ^ C argument @"const gr_backendrendertarget_t * target"@
  -> Gr_surfaceorigin -- ^ C argument @"gr_surfaceorigin_t origin"@
  -> Sk_colortype -- ^ C argument @"sk_colortype_t colorType"@
  -> Ptr (Sk_colorspace) -- ^ C argument @"sk_colorspace_t * colorspace"@
  -> Ptr (Sk_surfaceprops) -- ^ C argument @"const sk_surfaceprops_t * props"@
  -> IO (Ptr (Sk_surface)) -- ^ C return type: @"sk_surface_t *"@

-- | Function pointer to 'sk_surface_new_backend_render_target'
foreign import ccall "&sk_surface_new_backend_render_target" p'sk_surface_new_backend_render_target ::
  FunPtr (Ptr (Gr_recording_context) -> Ptr (Gr_backendrendertarget) -> Gr_surfaceorigin -> Sk_colortype -> Ptr (Sk_colorspace) -> Ptr (Sk_surfaceprops) -> IO (Ptr (Sk_surface)))

{- | C function signature:

@
sk_surface_t *sk_surface_new_render_target(gr_recording_context_t *context, _Bool budgeted, const sk_imageinfo_t *cinfo, int sampleCount, gr_surfaceorigin_t origin, const sk_surfaceprops_t *props, _Bool shouldCreateWithMips)
@
-}
foreign import ccall "sk_surface_new_render_target" sk_surface_new_render_target ::
  Ptr (Gr_recording_context) -- ^ C argument @"gr_recording_context_t * context"@
  -> CBool -- ^ C argument @"_Bool budgeted"@
  -> Ptr (Sk_imageinfo) -- ^ C argument @"const sk_imageinfo_t * cinfo"@
  -> CInt -- ^ C argument @"int sampleCount"@
  -> Gr_surfaceorigin -- ^ C argument @"gr_surfaceorigin_t origin"@
  -> Ptr (Sk_surfaceprops) -- ^ C argument @"const sk_surfaceprops_t * props"@
  -> CBool -- ^ C argument @"_Bool shouldCreateWithMips"@
  -> IO (Ptr (Sk_surface)) -- ^ C return type: @"sk_surface_t *"@

-- | Function pointer to 'sk_surface_new_render_target'
foreign import ccall "&sk_surface_new_render_target" p'sk_surface_new_render_target ::
  FunPtr (Ptr (Gr_recording_context) -> CBool -> Ptr (Sk_imageinfo) -> CInt -> Gr_surfaceorigin -> Ptr (Sk_surfaceprops) -> CBool -> IO (Ptr (Sk_surface)))

{- | C function signature:

@
sk_surface_t *sk_surface_new_metal_layer(gr_recording_context_t *context, const void *layer, gr_surfaceorigin_t origin, int sampleCount, sk_colortype_t colorType, sk_colorspace_t *colorspace, const sk_surfaceprops_t *props, const void **drawable)
@
-}
foreign import ccall "sk_surface_new_metal_layer" sk_surface_new_metal_layer ::
  Ptr (Gr_recording_context) -- ^ C argument @"gr_recording_context_t * context"@
  -> Ptr (()) -- ^ C argument @"const void * layer"@
  -> Gr_surfaceorigin -- ^ C argument @"gr_surfaceorigin_t origin"@
  -> CInt -- ^ C argument @"int sampleCount"@
  -> Sk_colortype -- ^ C argument @"sk_colortype_t colorType"@
  -> Ptr (Sk_colorspace) -- ^ C argument @"sk_colorspace_t * colorspace"@
  -> Ptr (Sk_surfaceprops) -- ^ C argument @"const sk_surfaceprops_t * props"@
  -> Ptr (Ptr (())) -- ^ C argument @"const void ** drawable"@
  -> IO (Ptr (Sk_surface)) -- ^ C return type: @"sk_surface_t *"@

-- | Function pointer to 'sk_surface_new_metal_layer'
foreign import ccall "&sk_surface_new_metal_layer" p'sk_surface_new_metal_layer ::
  FunPtr (Ptr (Gr_recording_context) -> Ptr (()) -> Gr_surfaceorigin -> CInt -> Sk_colortype -> Ptr (Sk_colorspace) -> Ptr (Sk_surfaceprops) -> Ptr (Ptr (())) -> IO (Ptr (Sk_surface)))

{- | C function signature:

@
sk_surface_t *sk_surface_new_metal_view(gr_recording_context_t *context, const void *mtkView, gr_surfaceorigin_t origin, int sampleCount, sk_colortype_t colorType, sk_colorspace_t *colorspace, const sk_surfaceprops_t *props)
@
-}
foreign import ccall "sk_surface_new_metal_view" sk_surface_new_metal_view ::
  Ptr (Gr_recording_context) -- ^ C argument @"gr_recording_context_t * context"@
  -> Ptr (()) -- ^ C argument @"const void * mtkView"@
  -> Gr_surfaceorigin -- ^ C argument @"gr_surfaceorigin_t origin"@
  -> CInt -- ^ C argument @"int sampleCount"@
  -> Sk_colortype -- ^ C argument @"sk_colortype_t colorType"@
  -> Ptr (Sk_colorspace) -- ^ C argument @"sk_colorspace_t * colorspace"@
  -> Ptr (Sk_surfaceprops) -- ^ C argument @"const sk_surfaceprops_t * props"@
  -> IO (Ptr (Sk_surface)) -- ^ C return type: @"sk_surface_t *"@

-- | Function pointer to 'sk_surface_new_metal_view'
foreign import ccall "&sk_surface_new_metal_view" p'sk_surface_new_metal_view ::
  FunPtr (Ptr (Gr_recording_context) -> Ptr (()) -> Gr_surfaceorigin -> CInt -> Sk_colortype -> Ptr (Sk_colorspace) -> Ptr (Sk_surfaceprops) -> IO (Ptr (Sk_surface)))

{- | C function signature:

@
void sk_surface_unref(sk_surface_t *)
@
-}
foreign import ccall "sk_surface_unref" sk_surface_unref ::
  Ptr (Sk_surface) -- ^ C argument type: @"sk_surface_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_surface_unref'
foreign import ccall "&sk_surface_unref" p'sk_surface_unref ::
  FunPtr (Ptr (Sk_surface) -> IO (()))

{- | C function signature:

@
sk_canvas_t *sk_surface_get_canvas(sk_surface_t *)
@
-}
foreign import ccall "sk_surface_get_canvas" sk_surface_get_canvas ::
  Ptr (Sk_surface) -- ^ C argument type: @"sk_surface_t *"@
  -> IO (Ptr (Sk_canvas)) -- ^ C return type: @"sk_canvas_t *"@

-- | Function pointer to 'sk_surface_get_canvas'
foreign import ccall "&sk_surface_get_canvas" p'sk_surface_get_canvas ::
  FunPtr (Ptr (Sk_surface) -> IO (Ptr (Sk_canvas)))

{- | C function signature:

@
sk_image_t *sk_surface_new_image_snapshot(sk_surface_t *)
@
-}
foreign import ccall "sk_surface_new_image_snapshot" sk_surface_new_image_snapshot ::
  Ptr (Sk_surface) -- ^ C argument type: @"sk_surface_t *"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_surface_new_image_snapshot'
foreign import ccall "&sk_surface_new_image_snapshot" p'sk_surface_new_image_snapshot ::
  FunPtr (Ptr (Sk_surface) -> IO (Ptr (Sk_image)))

{- | C function signature:

@
sk_image_t *sk_surface_new_image_snapshot_with_crop(sk_surface_t *surface, const sk_irect_t *bounds)
@
-}
foreign import ccall "sk_surface_new_image_snapshot_with_crop" sk_surface_new_image_snapshot_with_crop ::
  Ptr (Sk_surface) -- ^ C argument @"sk_surface_t * surface"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * bounds"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_surface_new_image_snapshot_with_crop'
foreign import ccall "&sk_surface_new_image_snapshot_with_crop" p'sk_surface_new_image_snapshot_with_crop ::
  FunPtr (Ptr (Sk_surface) -> Ptr (Sk_irect) -> IO (Ptr (Sk_image)))

{- | C function signature:

@
void sk_surface_draw(sk_surface_t *surface, sk_canvas_t *canvas, float x, float y, const sk_paint_t *paint)
@
-}
foreign import ccall "sk_surface_draw" sk_surface_draw ::
  Ptr (Sk_surface) -- ^ C argument @"sk_surface_t * surface"@
  -> Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * canvas"@
  -> CFloat -- ^ C argument @"float x"@
  -> CFloat -- ^ C argument @"float y"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * paint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_surface_draw'
foreign import ccall "&sk_surface_draw" p'sk_surface_draw ::
  FunPtr (Ptr (Sk_surface) -> Ptr (Sk_canvas) -> CFloat -> CFloat -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
_Bool sk_surface_peek_pixels(sk_surface_t *surface, sk_pixmap_t *pixmap)
@
-}
foreign import ccall "sk_surface_peek_pixels" sk_surface_peek_pixels ::
  Ptr (Sk_surface) -- ^ C argument @"sk_surface_t * surface"@
  -> Ptr (Sk_pixmap) -- ^ C argument @"sk_pixmap_t * pixmap"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_surface_peek_pixels'
foreign import ccall "&sk_surface_peek_pixels" p'sk_surface_peek_pixels ::
  FunPtr (Ptr (Sk_surface) -> Ptr (Sk_pixmap) -> IO (CBool))

{- | C function signature:

@
_Bool sk_surface_read_pixels(sk_surface_t *surface, sk_imageinfo_t *dstInfo, void *dstPixels, size_t dstRowBytes, int srcX, int srcY)
@
-}
foreign import ccall "sk_surface_read_pixels" sk_surface_read_pixels ::
  Ptr (Sk_surface) -- ^ C argument @"sk_surface_t * surface"@
  -> Ptr (Sk_imageinfo) -- ^ C argument @"sk_imageinfo_t * dstInfo"@
  -> Ptr (()) -- ^ C argument @"void * dstPixels"@
  -> CSize -- ^ C argument @"size_t dstRowBytes"@
  -> CInt -- ^ C argument @"int srcX"@
  -> CInt -- ^ C argument @"int srcY"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_surface_read_pixels'
foreign import ccall "&sk_surface_read_pixels" p'sk_surface_read_pixels ::
  FunPtr (Ptr (Sk_surface) -> Ptr (Sk_imageinfo) -> Ptr (()) -> CSize -> CInt -> CInt -> IO (CBool))

{- | C function signature:

@
const sk_surfaceprops_t *sk_surface_get_props(sk_surface_t *surface)
@
-}
foreign import ccall "sk_surface_get_props" sk_surface_get_props ::
  Ptr (Sk_surface) -- ^ C argument @"sk_surface_t * surface"@
  -> IO (Ptr (Sk_surfaceprops)) -- ^ C return type: @"const sk_surfaceprops_t *"@

-- | Function pointer to 'sk_surface_get_props'
foreign import ccall "&sk_surface_get_props" p'sk_surface_get_props ::
  FunPtr (Ptr (Sk_surface) -> IO (Ptr (Sk_surfaceprops)))

{- | C function signature:

@
gr_recording_context_t *sk_surface_get_recording_context(sk_surface_t *surface)
@
-}
foreign import ccall "sk_surface_get_recording_context" sk_surface_get_recording_context ::
  Ptr (Sk_surface) -- ^ C argument @"sk_surface_t * surface"@
  -> IO (Ptr (Gr_recording_context)) -- ^ C return type: @"gr_recording_context_t *"@

-- | Function pointer to 'sk_surface_get_recording_context'
foreign import ccall "&sk_surface_get_recording_context" p'sk_surface_get_recording_context ::
  FunPtr (Ptr (Sk_surface) -> IO (Ptr (Gr_recording_context)))

{- | C function signature:

@
sk_surfaceprops_t *sk_surfaceprops_new(uint32_t flags, sk_pixelgeometry_t geometry)
@
-}
foreign import ccall "sk_surfaceprops_new" sk_surfaceprops_new ::
  Word32 -- ^ C argument @"uint32_t flags"@
  -> Sk_pixelgeometry -- ^ C argument @"sk_pixelgeometry_t geometry"@
  -> IO (Ptr (Sk_surfaceprops)) -- ^ C return type: @"sk_surfaceprops_t *"@

-- | Function pointer to 'sk_surfaceprops_new'
foreign import ccall "&sk_surfaceprops_new" p'sk_surfaceprops_new ::
  FunPtr (Word32 -> Sk_pixelgeometry -> IO (Ptr (Sk_surfaceprops)))

{- | C function signature:

@
void sk_surfaceprops_delete(sk_surfaceprops_t *props)
@
-}
foreign import ccall "sk_surfaceprops_delete" sk_surfaceprops_delete ::
  Ptr (Sk_surfaceprops) -- ^ C argument @"sk_surfaceprops_t * props"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_surfaceprops_delete'
foreign import ccall "&sk_surfaceprops_delete" p'sk_surfaceprops_delete ::
  FunPtr (Ptr (Sk_surfaceprops) -> IO (()))

{- | C function signature:

@
uint32_t sk_surfaceprops_get_flags(sk_surfaceprops_t *props)
@
-}
foreign import ccall "sk_surfaceprops_get_flags" sk_surfaceprops_get_flags ::
  Ptr (Sk_surfaceprops) -- ^ C argument @"sk_surfaceprops_t * props"@
  -> IO (Word32) -- ^ C return type: @"uint32_t"@

-- | Function pointer to 'sk_surfaceprops_get_flags'
foreign import ccall "&sk_surfaceprops_get_flags" p'sk_surfaceprops_get_flags ::
  FunPtr (Ptr (Sk_surfaceprops) -> IO (Word32))

{- | C function signature:

@
sk_pixelgeometry_t sk_surfaceprops_get_pixel_geometry(sk_surfaceprops_t *props)
@
-}
foreign import ccall "sk_surfaceprops_get_pixel_geometry" sk_surfaceprops_get_pixel_geometry ::
  Ptr (Sk_surfaceprops) -- ^ C argument @"sk_surfaceprops_t * props"@
  -> IO (Sk_pixelgeometry) -- ^ C return type: @"sk_pixelgeometry_t"@

-- | Function pointer to 'sk_surfaceprops_get_pixel_geometry'
foreign import ccall "&sk_surfaceprops_get_pixel_geometry" p'sk_surfaceprops_get_pixel_geometry ::
  FunPtr (Ptr (Sk_surfaceprops) -> IO (Sk_pixelgeometry))

{- | C function signature:

@
void sk_pixmap_destructor(sk_pixmap_t *cpixmap)
@
-}
foreign import ccall "sk_pixmap_destructor" sk_pixmap_destructor ::
  Ptr (Sk_pixmap) -- ^ C argument @"sk_pixmap_t * cpixmap"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_pixmap_destructor'
foreign import ccall "&sk_pixmap_destructor" p'sk_pixmap_destructor ::
  FunPtr (Ptr (Sk_pixmap) -> IO (()))

{- | C function signature:

@
sk_pixmap_t *sk_pixmap_new(void)
@
-}
foreign import ccall "sk_pixmap_new" sk_pixmap_new ::
  IO (Ptr (Sk_pixmap)) -- ^ C return type: @"sk_pixmap_t *"@

-- | Function pointer to 'sk_pixmap_new'
foreign import ccall "&sk_pixmap_new" p'sk_pixmap_new ::
  FunPtr (IO (Ptr (Sk_pixmap)))

{- | C function signature:

@
sk_pixmap_t *sk_pixmap_new_with_params(const sk_imageinfo_t *cinfo, const void *addr, size_t rowBytes)
@
-}
foreign import ccall "sk_pixmap_new_with_params" sk_pixmap_new_with_params ::
  Ptr (Sk_imageinfo) -- ^ C argument @"const sk_imageinfo_t * cinfo"@
  -> Ptr (()) -- ^ C argument @"const void * addr"@
  -> CSize -- ^ C argument @"size_t rowBytes"@
  -> IO (Ptr (Sk_pixmap)) -- ^ C return type: @"sk_pixmap_t *"@

-- | Function pointer to 'sk_pixmap_new_with_params'
foreign import ccall "&sk_pixmap_new_with_params" p'sk_pixmap_new_with_params ::
  FunPtr (Ptr (Sk_imageinfo) -> Ptr (()) -> CSize -> IO (Ptr (Sk_pixmap)))

{- | C function signature:

@
void sk_pixmap_reset(sk_pixmap_t *cpixmap)
@
-}
foreign import ccall "sk_pixmap_reset" sk_pixmap_reset ::
  Ptr (Sk_pixmap) -- ^ C argument @"sk_pixmap_t * cpixmap"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_pixmap_reset'
foreign import ccall "&sk_pixmap_reset" p'sk_pixmap_reset ::
  FunPtr (Ptr (Sk_pixmap) -> IO (()))

{- | C function signature:

@
void sk_pixmap_reset_with_params(sk_pixmap_t *cpixmap, const sk_imageinfo_t *cinfo, const void *addr, size_t rowBytes)
@
-}
foreign import ccall "sk_pixmap_reset_with_params" sk_pixmap_reset_with_params ::
  Ptr (Sk_pixmap) -- ^ C argument @"sk_pixmap_t * cpixmap"@
  -> Ptr (Sk_imageinfo) -- ^ C argument @"const sk_imageinfo_t * cinfo"@
  -> Ptr (()) -- ^ C argument @"const void * addr"@
  -> CSize -- ^ C argument @"size_t rowBytes"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_pixmap_reset_with_params'
foreign import ccall "&sk_pixmap_reset_with_params" p'sk_pixmap_reset_with_params ::
  FunPtr (Ptr (Sk_pixmap) -> Ptr (Sk_imageinfo) -> Ptr (()) -> CSize -> IO (()))

{- | C function signature:

@
void sk_pixmap_set_colorspace(sk_pixmap_t *cpixmap, sk_colorspace_t *colorspace)
@
-}
foreign import ccall "sk_pixmap_set_colorspace" sk_pixmap_set_colorspace ::
  Ptr (Sk_pixmap) -- ^ C argument @"sk_pixmap_t * cpixmap"@
  -> Ptr (Sk_colorspace) -- ^ C argument @"sk_colorspace_t * colorspace"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_pixmap_set_colorspace'
foreign import ccall "&sk_pixmap_set_colorspace" p'sk_pixmap_set_colorspace ::
  FunPtr (Ptr (Sk_pixmap) -> Ptr (Sk_colorspace) -> IO (()))

{- | C function signature:

@
_Bool sk_pixmap_extract_subset(const sk_pixmap_t *cpixmap, sk_pixmap_t *result, const sk_irect_t *subset)
@
-}
foreign import ccall "sk_pixmap_extract_subset" sk_pixmap_extract_subset ::
  Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * cpixmap"@
  -> Ptr (Sk_pixmap) -- ^ C argument @"sk_pixmap_t * result"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * subset"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_pixmap_extract_subset'
foreign import ccall "&sk_pixmap_extract_subset" p'sk_pixmap_extract_subset ::
  FunPtr (Ptr (Sk_pixmap) -> Ptr (Sk_pixmap) -> Ptr (Sk_irect) -> IO (CBool))

{- | C function signature:

@
void sk_pixmap_get_info(const sk_pixmap_t *cpixmap, sk_imageinfo_t *cinfo)
@
-}
foreign import ccall "sk_pixmap_get_info" sk_pixmap_get_info ::
  Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * cpixmap"@
  -> Ptr (Sk_imageinfo) -- ^ C argument @"sk_imageinfo_t * cinfo"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_pixmap_get_info'
foreign import ccall "&sk_pixmap_get_info" p'sk_pixmap_get_info ::
  FunPtr (Ptr (Sk_pixmap) -> Ptr (Sk_imageinfo) -> IO (()))

{- | C function signature:

@
size_t sk_pixmap_get_row_bytes(const sk_pixmap_t *cpixmap)
@
-}
foreign import ccall "sk_pixmap_get_row_bytes" sk_pixmap_get_row_bytes ::
  Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * cpixmap"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_pixmap_get_row_bytes'
foreign import ccall "&sk_pixmap_get_row_bytes" p'sk_pixmap_get_row_bytes ::
  FunPtr (Ptr (Sk_pixmap) -> IO (CSize))

{- | C function signature:

@
sk_colorspace_t *sk_pixmap_get_colorspace(const sk_pixmap_t *cpixmap)
@
-}
foreign import ccall "sk_pixmap_get_colorspace" sk_pixmap_get_colorspace ::
  Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * cpixmap"@
  -> IO (Ptr (Sk_colorspace)) -- ^ C return type: @"sk_colorspace_t *"@

-- | Function pointer to 'sk_pixmap_get_colorspace'
foreign import ccall "&sk_pixmap_get_colorspace" p'sk_pixmap_get_colorspace ::
  FunPtr (Ptr (Sk_pixmap) -> IO (Ptr (Sk_colorspace)))

{- | C function signature:

@
_Bool sk_pixmap_compute_is_opaque(const sk_pixmap_t *cpixmap)
@
-}
foreign import ccall "sk_pixmap_compute_is_opaque" sk_pixmap_compute_is_opaque ::
  Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * cpixmap"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_pixmap_compute_is_opaque'
foreign import ccall "&sk_pixmap_compute_is_opaque" p'sk_pixmap_compute_is_opaque ::
  FunPtr (Ptr (Sk_pixmap) -> IO (CBool))

{- | C function signature:

@
sk_color_t sk_pixmap_get_pixel_color(const sk_pixmap_t *cpixmap, int x, int y)
@
-}
foreign import ccall "sk_pixmap_get_pixel_color" sk_pixmap_get_pixel_color ::
  Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * cpixmap"@
  -> CInt -- ^ C argument @"int x"@
  -> CInt -- ^ C argument @"int y"@
  -> IO (Sk_color) -- ^ C return type: @"sk_color_t"@

-- | Function pointer to 'sk_pixmap_get_pixel_color'
foreign import ccall "&sk_pixmap_get_pixel_color" p'sk_pixmap_get_pixel_color ::
  FunPtr (Ptr (Sk_pixmap) -> CInt -> CInt -> IO (Sk_color))

{- | C function signature:

@
void sk_pixmap_get_pixel_color4f(const sk_pixmap_t *cpixmap, int x, int y, sk_color4f_t *color)
@
-}
foreign import ccall "sk_pixmap_get_pixel_color4f" sk_pixmap_get_pixel_color4f ::
  Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * cpixmap"@
  -> CInt -- ^ C argument @"int x"@
  -> CInt -- ^ C argument @"int y"@
  -> Ptr (Sk_color4f) -- ^ C argument @"sk_color4f_t * color"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_pixmap_get_pixel_color4f'
foreign import ccall "&sk_pixmap_get_pixel_color4f" p'sk_pixmap_get_pixel_color4f ::
  FunPtr (Ptr (Sk_pixmap) -> CInt -> CInt -> Ptr (Sk_color4f) -> IO (()))

{- | C function signature:

@
float sk_pixmap_get_pixel_alphaf(const sk_pixmap_t *cpixmap, int x, int y)
@
-}
foreign import ccall "sk_pixmap_get_pixel_alphaf" sk_pixmap_get_pixel_alphaf ::
  Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * cpixmap"@
  -> CInt -- ^ C argument @"int x"@
  -> CInt -- ^ C argument @"int y"@
  -> IO (CFloat) -- ^ C return type: @"float"@

-- | Function pointer to 'sk_pixmap_get_pixel_alphaf'
foreign import ccall "&sk_pixmap_get_pixel_alphaf" p'sk_pixmap_get_pixel_alphaf ::
  FunPtr (Ptr (Sk_pixmap) -> CInt -> CInt -> IO (CFloat))

{- | C function signature:

@
void *sk_pixmap_get_writable_addr(const sk_pixmap_t *cpixmap)
@
-}
foreign import ccall "sk_pixmap_get_writable_addr" sk_pixmap_get_writable_addr ::
  Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * cpixmap"@
  -> IO (Ptr (())) -- ^ C return type: @"void *"@

-- | Function pointer to 'sk_pixmap_get_writable_addr'
foreign import ccall "&sk_pixmap_get_writable_addr" p'sk_pixmap_get_writable_addr ::
  FunPtr (Ptr (Sk_pixmap) -> IO (Ptr (())))

{- | C function signature:

@
void *sk_pixmap_get_writeable_addr_with_xy(const sk_pixmap_t *cpixmap, int x, int y)
@
-}
foreign import ccall "sk_pixmap_get_writeable_addr_with_xy" sk_pixmap_get_writeable_addr_with_xy ::
  Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * cpixmap"@
  -> CInt -- ^ C argument @"int x"@
  -> CInt -- ^ C argument @"int y"@
  -> IO (Ptr (())) -- ^ C return type: @"void *"@

-- | Function pointer to 'sk_pixmap_get_writeable_addr_with_xy'
foreign import ccall "&sk_pixmap_get_writeable_addr_with_xy" p'sk_pixmap_get_writeable_addr_with_xy ::
  FunPtr (Ptr (Sk_pixmap) -> CInt -> CInt -> IO (Ptr (())))

{- | C function signature:

@
_Bool sk_pixmap_read_pixels(const sk_pixmap_t *cpixmap, const sk_imageinfo_t *dstInfo, void *dstPixels, size_t dstRowBytes, int srcX, int srcY)
@
-}
foreign import ccall "sk_pixmap_read_pixels" sk_pixmap_read_pixels ::
  Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * cpixmap"@
  -> Ptr (Sk_imageinfo) -- ^ C argument @"const sk_imageinfo_t * dstInfo"@
  -> Ptr (()) -- ^ C argument @"void * dstPixels"@
  -> CSize -- ^ C argument @"size_t dstRowBytes"@
  -> CInt -- ^ C argument @"int srcX"@
  -> CInt -- ^ C argument @"int srcY"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_pixmap_read_pixels'
foreign import ccall "&sk_pixmap_read_pixels" p'sk_pixmap_read_pixels ::
  FunPtr (Ptr (Sk_pixmap) -> Ptr (Sk_imageinfo) -> Ptr (()) -> CSize -> CInt -> CInt -> IO (CBool))

{- | C function signature:

@
_Bool sk_pixmap_scale_pixels(const sk_pixmap_t *cpixmap, const sk_pixmap_t *dst, const sk_sampling_options_t *sampling)
@
-}
foreign import ccall "sk_pixmap_scale_pixels" sk_pixmap_scale_pixels ::
  Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * cpixmap"@
  -> Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * dst"@
  -> Ptr (Sk_sampling_options) -- ^ C argument @"const sk_sampling_options_t * sampling"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_pixmap_scale_pixels'
foreign import ccall "&sk_pixmap_scale_pixels" p'sk_pixmap_scale_pixels ::
  FunPtr (Ptr (Sk_pixmap) -> Ptr (Sk_pixmap) -> Ptr (Sk_sampling_options) -> IO (CBool))

{- | C function signature:

@
_Bool sk_pixmap_erase_color(const sk_pixmap_t *cpixmap, sk_color_t color, const sk_irect_t *subset)
@
-}
foreign import ccall "sk_pixmap_erase_color" sk_pixmap_erase_color ::
  Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * cpixmap"@
  -> Sk_color -- ^ C argument @"sk_color_t color"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * subset"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_pixmap_erase_color'
foreign import ccall "&sk_pixmap_erase_color" p'sk_pixmap_erase_color ::
  FunPtr (Ptr (Sk_pixmap) -> Sk_color -> Ptr (Sk_irect) -> IO (CBool))

{- | C function signature:

@
_Bool sk_pixmap_erase_color4f(const sk_pixmap_t *cpixmap, const sk_color4f_t *color, const sk_irect_t *subset)
@
-}
foreign import ccall "sk_pixmap_erase_color4f" sk_pixmap_erase_color4f ::
  Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * cpixmap"@
  -> Ptr (Sk_color4f) -- ^ C argument @"const sk_color4f_t * color"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * subset"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_pixmap_erase_color4f'
foreign import ccall "&sk_pixmap_erase_color4f" p'sk_pixmap_erase_color4f ::
  FunPtr (Ptr (Sk_pixmap) -> Ptr (Sk_color4f) -> Ptr (Sk_irect) -> IO (CBool))

{- | C function signature:

@
_Bool sk_webpencoder_encode(sk_wstream_t *dst, const sk_pixmap_t *src, const sk_webpencoder_options_t *options)
@
-}
foreign import ccall "sk_webpencoder_encode" sk_webpencoder_encode ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * dst"@
  -> Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * src"@
  -> Ptr (Sk_webpencoder_options) -- ^ C argument @"const sk_webpencoder_options_t * options"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_webpencoder_encode'
foreign import ccall "&sk_webpencoder_encode" p'sk_webpencoder_encode ::
  FunPtr (Ptr (Sk_wstream) -> Ptr (Sk_pixmap) -> Ptr (Sk_webpencoder_options) -> IO (CBool))

{- | C function signature:

@
_Bool sk_jpegencoder_encode(sk_wstream_t *dst, const sk_pixmap_t *src, const sk_jpegencoder_options_t *options)
@
-}
foreign import ccall "sk_jpegencoder_encode" sk_jpegencoder_encode ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * dst"@
  -> Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * src"@
  -> Ptr (Sk_jpegencoder_options) -- ^ C argument @"const sk_jpegencoder_options_t * options"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_jpegencoder_encode'
foreign import ccall "&sk_jpegencoder_encode" p'sk_jpegencoder_encode ::
  FunPtr (Ptr (Sk_wstream) -> Ptr (Sk_pixmap) -> Ptr (Sk_jpegencoder_options) -> IO (CBool))

{- | C function signature:

@
_Bool sk_pngencoder_encode(sk_wstream_t *dst, const sk_pixmap_t *src, const sk_pngencoder_options_t *options)
@
-}
foreign import ccall "sk_pngencoder_encode" sk_pngencoder_encode ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * dst"@
  -> Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * src"@
  -> Ptr (Sk_pngencoder_options) -- ^ C argument @"const sk_pngencoder_options_t * options"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_pngencoder_encode'
foreign import ccall "&sk_pngencoder_encode" p'sk_pngencoder_encode ::
  FunPtr (Ptr (Sk_wstream) -> Ptr (Sk_pixmap) -> Ptr (Sk_pngencoder_options) -> IO (CBool))

{- | C function signature:

@
void sk_swizzle_swap_rb(uint32_t *dest, const uint32_t *src, int count)
@
-}
foreign import ccall "sk_swizzle_swap_rb" sk_swizzle_swap_rb ::
  Ptr (Word32) -- ^ C argument @"uint32_t * dest"@
  -> Ptr (Word32) -- ^ C argument @"const uint32_t * src"@
  -> CInt -- ^ C argument @"int count"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_swizzle_swap_rb'
foreign import ccall "&sk_swizzle_swap_rb" p'sk_swizzle_swap_rb ::
  FunPtr (Ptr (Word32) -> Ptr (Word32) -> CInt -> IO (()))

{- | C function signature:

@
sk_color_t sk_color_unpremultiply(const sk_pmcolor_t pmcolor)
@
-}
foreign import ccall "sk_color_unpremultiply" sk_color_unpremultiply ::
  Sk_pmcolor -- ^ C argument @"const sk_pmcolor_t pmcolor"@
  -> IO (Sk_color) -- ^ C return type: @"sk_color_t"@

-- | Function pointer to 'sk_color_unpremultiply'
foreign import ccall "&sk_color_unpremultiply" p'sk_color_unpremultiply ::
  FunPtr (Sk_pmcolor -> IO (Sk_color))

{- | C function signature:

@
sk_pmcolor_t sk_color_premultiply(const sk_color_t color)
@
-}
foreign import ccall "sk_color_premultiply" sk_color_premultiply ::
  Sk_color -- ^ C argument @"const sk_color_t color"@
  -> IO (Sk_pmcolor) -- ^ C return type: @"sk_pmcolor_t"@

-- | Function pointer to 'sk_color_premultiply'
foreign import ccall "&sk_color_premultiply" p'sk_color_premultiply ::
  FunPtr (Sk_color -> IO (Sk_pmcolor))

{- | C function signature:

@
void sk_color_unpremultiply_array(const sk_pmcolor_t *pmcolors, int size, sk_color_t *colors)
@
-}
foreign import ccall "sk_color_unpremultiply_array" sk_color_unpremultiply_array ::
  Ptr (Sk_pmcolor) -- ^ C argument @"const sk_pmcolor_t * pmcolors"@
  -> CInt -- ^ C argument @"int size"@
  -> Ptr (Sk_color) -- ^ C argument @"sk_color_t * colors"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_color_unpremultiply_array'
foreign import ccall "&sk_color_unpremultiply_array" p'sk_color_unpremultiply_array ::
  FunPtr (Ptr (Sk_pmcolor) -> CInt -> Ptr (Sk_color) -> IO (()))

{- | C function signature:

@
void sk_color_premultiply_array(const sk_color_t *colors, int size, sk_pmcolor_t *pmcolors)
@
-}
foreign import ccall "sk_color_premultiply_array" sk_color_premultiply_array ::
  Ptr (Sk_color) -- ^ C argument @"const sk_color_t * colors"@
  -> CInt -- ^ C argument @"int size"@
  -> Ptr (Sk_pmcolor) -- ^ C argument @"sk_pmcolor_t * pmcolors"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_color_premultiply_array'
foreign import ccall "&sk_color_premultiply_array" p'sk_color_premultiply_array ::
  FunPtr (Ptr (Sk_color) -> CInt -> Ptr (Sk_pmcolor) -> IO (()))

{- | C function signature:

@
void sk_color_get_bit_shift(int *a, int *r, int *g, int *b)
@
-}
foreign import ccall "sk_color_get_bit_shift" sk_color_get_bit_shift ::
  Ptr (CInt) -- ^ C argument @"int * a"@
  -> Ptr (CInt) -- ^ C argument @"int * r"@
  -> Ptr (CInt) -- ^ C argument @"int * g"@
  -> Ptr (CInt) -- ^ C argument @"int * b"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_color_get_bit_shift'
foreign import ccall "&sk_color_get_bit_shift" p'sk_color_get_bit_shift ::
  FunPtr (Ptr (CInt) -> Ptr (CInt) -> Ptr (CInt) -> Ptr (CInt) -> IO (()))

{- | C function signature:

@
sk_region_t *sk_region_new(void)
@
-}
foreign import ccall "sk_region_new" sk_region_new ::
  IO (Ptr (Sk_region)) -- ^ C return type: @"sk_region_t *"@

-- | Function pointer to 'sk_region_new'
foreign import ccall "&sk_region_new" p'sk_region_new ::
  FunPtr (IO (Ptr (Sk_region)))

{- | C function signature:

@
void sk_region_delete(sk_region_t *r)
@
-}
foreign import ccall "sk_region_delete" sk_region_delete ::
  Ptr (Sk_region) -- ^ C argument @"sk_region_t * r"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_region_delete'
foreign import ccall "&sk_region_delete" p'sk_region_delete ::
  FunPtr (Ptr (Sk_region) -> IO (()))

{- | C function signature:

@
_Bool sk_region_is_empty(const sk_region_t *r)
@
-}
foreign import ccall "sk_region_is_empty" sk_region_is_empty ::
  Ptr (Sk_region) -- ^ C argument @"const sk_region_t * r"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_is_empty'
foreign import ccall "&sk_region_is_empty" p'sk_region_is_empty ::
  FunPtr (Ptr (Sk_region) -> IO (CBool))

{- | C function signature:

@
_Bool sk_region_is_rect(const sk_region_t *r)
@
-}
foreign import ccall "sk_region_is_rect" sk_region_is_rect ::
  Ptr (Sk_region) -- ^ C argument @"const sk_region_t * r"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_is_rect'
foreign import ccall "&sk_region_is_rect" p'sk_region_is_rect ::
  FunPtr (Ptr (Sk_region) -> IO (CBool))

{- | C function signature:

@
_Bool sk_region_is_complex(const sk_region_t *r)
@
-}
foreign import ccall "sk_region_is_complex" sk_region_is_complex ::
  Ptr (Sk_region) -- ^ C argument @"const sk_region_t * r"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_is_complex'
foreign import ccall "&sk_region_is_complex" p'sk_region_is_complex ::
  FunPtr (Ptr (Sk_region) -> IO (CBool))

{- | C function signature:

@
void sk_region_get_bounds(const sk_region_t *r, sk_irect_t *rect)
@
-}
foreign import ccall "sk_region_get_bounds" sk_region_get_bounds ::
  Ptr (Sk_region) -- ^ C argument @"const sk_region_t * r"@
  -> Ptr (Sk_irect) -- ^ C argument @"sk_irect_t * rect"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_region_get_bounds'
foreign import ccall "&sk_region_get_bounds" p'sk_region_get_bounds ::
  FunPtr (Ptr (Sk_region) -> Ptr (Sk_irect) -> IO (()))

{- | C function signature:

@
_Bool sk_region_get_boundary_path(const sk_region_t *r, sk_path_t *path)
@
-}
foreign import ccall "sk_region_get_boundary_path" sk_region_get_boundary_path ::
  Ptr (Sk_region) -- ^ C argument @"const sk_region_t * r"@
  -> Ptr (Sk_path) -- ^ C argument @"sk_path_t * path"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_get_boundary_path'
foreign import ccall "&sk_region_get_boundary_path" p'sk_region_get_boundary_path ::
  FunPtr (Ptr (Sk_region) -> Ptr (Sk_path) -> IO (CBool))

{- | C function signature:

@
_Bool sk_region_set_empty(sk_region_t *r)
@
-}
foreign import ccall "sk_region_set_empty" sk_region_set_empty ::
  Ptr (Sk_region) -- ^ C argument @"sk_region_t * r"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_set_empty'
foreign import ccall "&sk_region_set_empty" p'sk_region_set_empty ::
  FunPtr (Ptr (Sk_region) -> IO (CBool))

{- | C function signature:

@
_Bool sk_region_set_rect(sk_region_t *r, const sk_irect_t *rect)
@
-}
foreign import ccall "sk_region_set_rect" sk_region_set_rect ::
  Ptr (Sk_region) -- ^ C argument @"sk_region_t * r"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * rect"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_set_rect'
foreign import ccall "&sk_region_set_rect" p'sk_region_set_rect ::
  FunPtr (Ptr (Sk_region) -> Ptr (Sk_irect) -> IO (CBool))

{- | C function signature:

@
_Bool sk_region_set_rects(sk_region_t *r, const sk_irect_t *rects, int count)
@
-}
foreign import ccall "sk_region_set_rects" sk_region_set_rects ::
  Ptr (Sk_region) -- ^ C argument @"sk_region_t * r"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * rects"@
  -> CInt -- ^ C argument @"int count"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_set_rects'
foreign import ccall "&sk_region_set_rects" p'sk_region_set_rects ::
  FunPtr (Ptr (Sk_region) -> Ptr (Sk_irect) -> CInt -> IO (CBool))

{- | C function signature:

@
_Bool sk_region_set_region(sk_region_t *r, const sk_region_t *region)
@
-}
foreign import ccall "sk_region_set_region" sk_region_set_region ::
  Ptr (Sk_region) -- ^ C argument @"sk_region_t * r"@
  -> Ptr (Sk_region) -- ^ C argument @"const sk_region_t * region"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_set_region'
foreign import ccall "&sk_region_set_region" p'sk_region_set_region ::
  FunPtr (Ptr (Sk_region) -> Ptr (Sk_region) -> IO (CBool))

{- | C function signature:

@
_Bool sk_region_set_path(sk_region_t *r, const sk_path_t *t, const sk_region_t *clip)
@
-}
foreign import ccall "sk_region_set_path" sk_region_set_path ::
  Ptr (Sk_region) -- ^ C argument @"sk_region_t * r"@
  -> Ptr (Sk_path) -- ^ C argument @"const sk_path_t * t"@
  -> Ptr (Sk_region) -- ^ C argument @"const sk_region_t * clip"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_set_path'
foreign import ccall "&sk_region_set_path" p'sk_region_set_path ::
  FunPtr (Ptr (Sk_region) -> Ptr (Sk_path) -> Ptr (Sk_region) -> IO (CBool))

{- | C function signature:

@
_Bool sk_region_intersects_rect(const sk_region_t *r, const sk_irect_t *rect)
@
-}
foreign import ccall "sk_region_intersects_rect" sk_region_intersects_rect ::
  Ptr (Sk_region) -- ^ C argument @"const sk_region_t * r"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * rect"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_intersects_rect'
foreign import ccall "&sk_region_intersects_rect" p'sk_region_intersects_rect ::
  FunPtr (Ptr (Sk_region) -> Ptr (Sk_irect) -> IO (CBool))

{- | C function signature:

@
_Bool sk_region_intersects(const sk_region_t *r, const sk_region_t *src)
@
-}
foreign import ccall "sk_region_intersects" sk_region_intersects ::
  Ptr (Sk_region) -- ^ C argument @"const sk_region_t * r"@
  -> Ptr (Sk_region) -- ^ C argument @"const sk_region_t * src"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_intersects'
foreign import ccall "&sk_region_intersects" p'sk_region_intersects ::
  FunPtr (Ptr (Sk_region) -> Ptr (Sk_region) -> IO (CBool))

{- | C function signature:

@
_Bool sk_region_contains_point(const sk_region_t *r, int x, int y)
@
-}
foreign import ccall "sk_region_contains_point" sk_region_contains_point ::
  Ptr (Sk_region) -- ^ C argument @"const sk_region_t * r"@
  -> CInt -- ^ C argument @"int x"@
  -> CInt -- ^ C argument @"int y"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_contains_point'
foreign import ccall "&sk_region_contains_point" p'sk_region_contains_point ::
  FunPtr (Ptr (Sk_region) -> CInt -> CInt -> IO (CBool))

{- | C function signature:

@
_Bool sk_region_contains_rect(const sk_region_t *r, const sk_irect_t *rect)
@
-}
foreign import ccall "sk_region_contains_rect" sk_region_contains_rect ::
  Ptr (Sk_region) -- ^ C argument @"const sk_region_t * r"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * rect"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_contains_rect'
foreign import ccall "&sk_region_contains_rect" p'sk_region_contains_rect ::
  FunPtr (Ptr (Sk_region) -> Ptr (Sk_irect) -> IO (CBool))

{- | C function signature:

@
_Bool sk_region_contains(const sk_region_t *r, const sk_region_t *region)
@
-}
foreign import ccall "sk_region_contains" sk_region_contains ::
  Ptr (Sk_region) -- ^ C argument @"const sk_region_t * r"@
  -> Ptr (Sk_region) -- ^ C argument @"const sk_region_t * region"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_contains'
foreign import ccall "&sk_region_contains" p'sk_region_contains ::
  FunPtr (Ptr (Sk_region) -> Ptr (Sk_region) -> IO (CBool))

{- | C function signature:

@
_Bool sk_region_quick_contains(const sk_region_t *r, const sk_irect_t *rect)
@
-}
foreign import ccall "sk_region_quick_contains" sk_region_quick_contains ::
  Ptr (Sk_region) -- ^ C argument @"const sk_region_t * r"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * rect"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_quick_contains'
foreign import ccall "&sk_region_quick_contains" p'sk_region_quick_contains ::
  FunPtr (Ptr (Sk_region) -> Ptr (Sk_irect) -> IO (CBool))

{- | C function signature:

@
_Bool sk_region_quick_reject_rect(const sk_region_t *r, const sk_irect_t *rect)
@
-}
foreign import ccall "sk_region_quick_reject_rect" sk_region_quick_reject_rect ::
  Ptr (Sk_region) -- ^ C argument @"const sk_region_t * r"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * rect"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_quick_reject_rect'
foreign import ccall "&sk_region_quick_reject_rect" p'sk_region_quick_reject_rect ::
  FunPtr (Ptr (Sk_region) -> Ptr (Sk_irect) -> IO (CBool))

{- | C function signature:

@
_Bool sk_region_quick_reject(const sk_region_t *r, const sk_region_t *region)
@
-}
foreign import ccall "sk_region_quick_reject" sk_region_quick_reject ::
  Ptr (Sk_region) -- ^ C argument @"const sk_region_t * r"@
  -> Ptr (Sk_region) -- ^ C argument @"const sk_region_t * region"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_quick_reject'
foreign import ccall "&sk_region_quick_reject" p'sk_region_quick_reject ::
  FunPtr (Ptr (Sk_region) -> Ptr (Sk_region) -> IO (CBool))

{- | C function signature:

@
void sk_region_translate(sk_region_t *r, int x, int y)
@
-}
foreign import ccall "sk_region_translate" sk_region_translate ::
  Ptr (Sk_region) -- ^ C argument @"sk_region_t * r"@
  -> CInt -- ^ C argument @"int x"@
  -> CInt -- ^ C argument @"int y"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_region_translate'
foreign import ccall "&sk_region_translate" p'sk_region_translate ::
  FunPtr (Ptr (Sk_region) -> CInt -> CInt -> IO (()))

{- | C function signature:

@
_Bool sk_region_op_rect(sk_region_t *r, const sk_irect_t *rect, sk_region_op_t op)
@
-}
foreign import ccall "sk_region_op_rect" sk_region_op_rect ::
  Ptr (Sk_region) -- ^ C argument @"sk_region_t * r"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * rect"@
  -> Sk_region_op -- ^ C argument @"sk_region_op_t op"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_op_rect'
foreign import ccall "&sk_region_op_rect" p'sk_region_op_rect ::
  FunPtr (Ptr (Sk_region) -> Ptr (Sk_irect) -> Sk_region_op -> IO (CBool))

{- | C function signature:

@
_Bool sk_region_op(sk_region_t *r, const sk_region_t *region, sk_region_op_t op)
@
-}
foreign import ccall "sk_region_op" sk_region_op ::
  Ptr (Sk_region) -- ^ C argument @"sk_region_t * r"@
  -> Ptr (Sk_region) -- ^ C argument @"const sk_region_t * region"@
  -> Sk_region_op -- ^ C argument @"sk_region_op_t op"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_op'
foreign import ccall "&sk_region_op" p'sk_region_op ::
  FunPtr (Ptr (Sk_region) -> Ptr (Sk_region) -> Sk_region_op -> IO (CBool))

{- | C function signature:

@
sk_region_iterator_t *sk_region_iterator_new(const sk_region_t *region)
@
-}
foreign import ccall "sk_region_iterator_new" sk_region_iterator_new ::
  Ptr (Sk_region) -- ^ C argument @"const sk_region_t * region"@
  -> IO (Ptr (Sk_region_iterator)) -- ^ C return type: @"sk_region_iterator_t *"@

-- | Function pointer to 'sk_region_iterator_new'
foreign import ccall "&sk_region_iterator_new" p'sk_region_iterator_new ::
  FunPtr (Ptr (Sk_region) -> IO (Ptr (Sk_region_iterator)))

{- | C function signature:

@
void sk_region_iterator_delete(sk_region_iterator_t *iter)
@
-}
foreign import ccall "sk_region_iterator_delete" sk_region_iterator_delete ::
  Ptr (Sk_region_iterator) -- ^ C argument @"sk_region_iterator_t * iter"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_region_iterator_delete'
foreign import ccall "&sk_region_iterator_delete" p'sk_region_iterator_delete ::
  FunPtr (Ptr (Sk_region_iterator) -> IO (()))

{- | C function signature:

@
_Bool sk_region_iterator_rewind(sk_region_iterator_t *iter)
@
-}
foreign import ccall "sk_region_iterator_rewind" sk_region_iterator_rewind ::
  Ptr (Sk_region_iterator) -- ^ C argument @"sk_region_iterator_t * iter"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_iterator_rewind'
foreign import ccall "&sk_region_iterator_rewind" p'sk_region_iterator_rewind ::
  FunPtr (Ptr (Sk_region_iterator) -> IO (CBool))

{- | C function signature:

@
_Bool sk_region_iterator_done(const sk_region_iterator_t *iter)
@
-}
foreign import ccall "sk_region_iterator_done" sk_region_iterator_done ::
  Ptr (Sk_region_iterator) -- ^ C argument @"const sk_region_iterator_t * iter"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_iterator_done'
foreign import ccall "&sk_region_iterator_done" p'sk_region_iterator_done ::
  FunPtr (Ptr (Sk_region_iterator) -> IO (CBool))

{- | C function signature:

@
void sk_region_iterator_next(sk_region_iterator_t *iter)
@
-}
foreign import ccall "sk_region_iterator_next" sk_region_iterator_next ::
  Ptr (Sk_region_iterator) -- ^ C argument @"sk_region_iterator_t * iter"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_region_iterator_next'
foreign import ccall "&sk_region_iterator_next" p'sk_region_iterator_next ::
  FunPtr (Ptr (Sk_region_iterator) -> IO (()))

{- | C function signature:

@
void sk_region_iterator_rect(const sk_region_iterator_t *iter, sk_irect_t *rect)
@
-}
foreign import ccall "sk_region_iterator_rect" sk_region_iterator_rect ::
  Ptr (Sk_region_iterator) -- ^ C argument @"const sk_region_iterator_t * iter"@
  -> Ptr (Sk_irect) -- ^ C argument @"sk_irect_t * rect"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_region_iterator_rect'
foreign import ccall "&sk_region_iterator_rect" p'sk_region_iterator_rect ::
  FunPtr (Ptr (Sk_region_iterator) -> Ptr (Sk_irect) -> IO (()))

{- | C function signature:

@
sk_region_cliperator_t *sk_region_cliperator_new(const sk_region_t *region, const sk_irect_t *clip)
@
-}
foreign import ccall "sk_region_cliperator_new" sk_region_cliperator_new ::
  Ptr (Sk_region) -- ^ C argument @"const sk_region_t * region"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * clip"@
  -> IO (Ptr (Sk_region_cliperator)) -- ^ C return type: @"sk_region_cliperator_t *"@

-- | Function pointer to 'sk_region_cliperator_new'
foreign import ccall "&sk_region_cliperator_new" p'sk_region_cliperator_new ::
  FunPtr (Ptr (Sk_region) -> Ptr (Sk_irect) -> IO (Ptr (Sk_region_cliperator)))

{- | C function signature:

@
void sk_region_cliperator_delete(sk_region_cliperator_t *iter)
@
-}
foreign import ccall "sk_region_cliperator_delete" sk_region_cliperator_delete ::
  Ptr (Sk_region_cliperator) -- ^ C argument @"sk_region_cliperator_t * iter"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_region_cliperator_delete'
foreign import ccall "&sk_region_cliperator_delete" p'sk_region_cliperator_delete ::
  FunPtr (Ptr (Sk_region_cliperator) -> IO (()))

{- | C function signature:

@
_Bool sk_region_cliperator_done(sk_region_cliperator_t *iter)
@
-}
foreign import ccall "sk_region_cliperator_done" sk_region_cliperator_done ::
  Ptr (Sk_region_cliperator) -- ^ C argument @"sk_region_cliperator_t * iter"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_cliperator_done'
foreign import ccall "&sk_region_cliperator_done" p'sk_region_cliperator_done ::
  FunPtr (Ptr (Sk_region_cliperator) -> IO (CBool))

{- | C function signature:

@
void sk_region_cliperator_next(sk_region_cliperator_t *iter)
@
-}
foreign import ccall "sk_region_cliperator_next" sk_region_cliperator_next ::
  Ptr (Sk_region_cliperator) -- ^ C argument @"sk_region_cliperator_t * iter"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_region_cliperator_next'
foreign import ccall "&sk_region_cliperator_next" p'sk_region_cliperator_next ::
  FunPtr (Ptr (Sk_region_cliperator) -> IO (()))

{- | C function signature:

@
void sk_region_cliperator_rect(const sk_region_cliperator_t *iter, sk_irect_t *rect)
@
-}
foreign import ccall "sk_region_cliperator_rect" sk_region_cliperator_rect ::
  Ptr (Sk_region_cliperator) -- ^ C argument @"const sk_region_cliperator_t * iter"@
  -> Ptr (Sk_irect) -- ^ C argument @"sk_irect_t * rect"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_region_cliperator_rect'
foreign import ccall "&sk_region_cliperator_rect" p'sk_region_cliperator_rect ::
  FunPtr (Ptr (Sk_region_cliperator) -> Ptr (Sk_irect) -> IO (()))

{- | C function signature:

@
sk_region_spanerator_t *sk_region_spanerator_new(const sk_region_t *region, int y, int left, int right)
@
-}
foreign import ccall "sk_region_spanerator_new" sk_region_spanerator_new ::
  Ptr (Sk_region) -- ^ C argument @"const sk_region_t * region"@
  -> CInt -- ^ C argument @"int y"@
  -> CInt -- ^ C argument @"int left"@
  -> CInt -- ^ C argument @"int right"@
  -> IO (Ptr (Sk_region_spanerator)) -- ^ C return type: @"sk_region_spanerator_t *"@

-- | Function pointer to 'sk_region_spanerator_new'
foreign import ccall "&sk_region_spanerator_new" p'sk_region_spanerator_new ::
  FunPtr (Ptr (Sk_region) -> CInt -> CInt -> CInt -> IO (Ptr (Sk_region_spanerator)))

{- | C function signature:

@
void sk_region_spanerator_delete(sk_region_spanerator_t *iter)
@
-}
foreign import ccall "sk_region_spanerator_delete" sk_region_spanerator_delete ::
  Ptr (Sk_region_spanerator) -- ^ C argument @"sk_region_spanerator_t * iter"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_region_spanerator_delete'
foreign import ccall "&sk_region_spanerator_delete" p'sk_region_spanerator_delete ::
  FunPtr (Ptr (Sk_region_spanerator) -> IO (()))

{- | C function signature:

@
_Bool sk_region_spanerator_next(sk_region_spanerator_t *iter, int *left, int *right)
@
-}
foreign import ccall "sk_region_spanerator_next" sk_region_spanerator_next ::
  Ptr (Sk_region_spanerator) -- ^ C argument @"sk_region_spanerator_t * iter"@
  -> Ptr (CInt) -- ^ C argument @"int * left"@
  -> Ptr (CInt) -- ^ C argument @"int * right"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_region_spanerator_next'
foreign import ccall "&sk_region_spanerator_next" p'sk_region_spanerator_next ::
  FunPtr (Ptr (Sk_region_spanerator) -> Ptr (CInt) -> Ptr (CInt) -> IO (CBool))

{- | C function signature:

@
void sk_canvas_destroy(sk_canvas_t *ccanvas)
@
-}
foreign import ccall "sk_canvas_destroy" sk_canvas_destroy ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_destroy'
foreign import ccall "&sk_canvas_destroy" p'sk_canvas_destroy ::
  FunPtr (Ptr (Sk_canvas) -> IO (()))

{- | C function signature:

@
void sk_canvas_clear(sk_canvas_t *ccanvas, sk_color_t color)
@
-}
foreign import ccall "sk_canvas_clear" sk_canvas_clear ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Sk_color -- ^ C argument @"sk_color_t color"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_clear'
foreign import ccall "&sk_canvas_clear" p'sk_canvas_clear ::
  FunPtr (Ptr (Sk_canvas) -> Sk_color -> IO (()))

{- | C function signature:

@
void sk_canvas_discard(sk_canvas_t *ccanvas)
@
-}
foreign import ccall "sk_canvas_discard" sk_canvas_discard ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_discard'
foreign import ccall "&sk_canvas_discard" p'sk_canvas_discard ::
  FunPtr (Ptr (Sk_canvas) -> IO (()))

{- | C function signature:

@
int sk_canvas_get_save_count(sk_canvas_t *ccanvas)
@
-}
foreign import ccall "sk_canvas_get_save_count" sk_canvas_get_save_count ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_canvas_get_save_count'
foreign import ccall "&sk_canvas_get_save_count" p'sk_canvas_get_save_count ::
  FunPtr (Ptr (Sk_canvas) -> IO (CInt))

{- | C function signature:

@
void sk_canvas_restore_to_count(sk_canvas_t *ccanvas, int saveCount)
@
-}
foreign import ccall "sk_canvas_restore_to_count" sk_canvas_restore_to_count ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> CInt -- ^ C argument @"int saveCount"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_restore_to_count'
foreign import ccall "&sk_canvas_restore_to_count" p'sk_canvas_restore_to_count ::
  FunPtr (Ptr (Sk_canvas) -> CInt -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_color(sk_canvas_t *ccanvas, sk_color_t color, sk_blendmode_t cmode)
@
-}
foreign import ccall "sk_canvas_draw_color" sk_canvas_draw_color ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Sk_color -- ^ C argument @"sk_color_t color"@
  -> Sk_blendmode -- ^ C argument @"sk_blendmode_t cmode"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_color'
foreign import ccall "&sk_canvas_draw_color" p'sk_canvas_draw_color ::
  FunPtr (Ptr (Sk_canvas) -> Sk_color -> Sk_blendmode -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_points(sk_canvas_t *ccanvas, sk_point_mode_t pointMode, size_t count, const sk_point_t points[], const sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_canvas_draw_points" sk_canvas_draw_points ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Sk_point_mode -- ^ C argument @"sk_point_mode_t pointMode"@
  -> CSize -- ^ C argument @"size_t count"@
  -> Ptr (Sk_point) -- ^ C argument @"const sk_point_t [] points"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * cpaint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_points'
foreign import ccall "&sk_canvas_draw_points" p'sk_canvas_draw_points ::
  FunPtr (Ptr (Sk_canvas) -> Sk_point_mode -> CSize -> Ptr (Sk_point) -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_point(sk_canvas_t *ccanvas, float x, float y, const sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_canvas_draw_point" sk_canvas_draw_point ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> CFloat -- ^ C argument @"float x"@
  -> CFloat -- ^ C argument @"float y"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * cpaint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_point'
foreign import ccall "&sk_canvas_draw_point" p'sk_canvas_draw_point ::
  FunPtr (Ptr (Sk_canvas) -> CFloat -> CFloat -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_line(sk_canvas_t *ccanvas, float x0, float y0, float x1, float y1, sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_canvas_draw_line" sk_canvas_draw_line ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> CFloat -- ^ C argument @"float x0"@
  -> CFloat -- ^ C argument @"float y0"@
  -> CFloat -- ^ C argument @"float x1"@
  -> CFloat -- ^ C argument @"float y1"@
  -> Ptr (Sk_paint) -- ^ C argument @"sk_paint_t * cpaint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_line'
foreign import ccall "&sk_canvas_draw_line" p'sk_canvas_draw_line ::
  FunPtr (Ptr (Sk_canvas) -> CFloat -> CFloat -> CFloat -> CFloat -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_simple_text(sk_canvas_t *ccanvas, const void *text, size_t byte_length, sk_text_encoding_t encoding, float x, float y, const sk_font_t *cfont, const sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_canvas_draw_simple_text" sk_canvas_draw_simple_text ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (()) -- ^ C argument @"const void * text"@
  -> CSize -- ^ C argument @"size_t byte_length"@
  -> Sk_text_encoding -- ^ C argument @"sk_text_encoding_t encoding"@
  -> CFloat -- ^ C argument @"float x"@
  -> CFloat -- ^ C argument @"float y"@
  -> Ptr (Sk_font) -- ^ C argument @"const sk_font_t * cfont"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * cpaint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_simple_text'
foreign import ccall "&sk_canvas_draw_simple_text" p'sk_canvas_draw_simple_text ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (()) -> CSize -> Sk_text_encoding -> CFloat -> CFloat -> Ptr (Sk_font) -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_text_blob(sk_canvas_t *ccanvas, sk_textblob_t *text, float x, float y, const sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_canvas_draw_text_blob" sk_canvas_draw_text_blob ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_textblob) -- ^ C argument @"sk_textblob_t * text"@
  -> CFloat -- ^ C argument @"float x"@
  -> CFloat -- ^ C argument @"float y"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * cpaint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_text_blob'
foreign import ccall "&sk_canvas_draw_text_blob" p'sk_canvas_draw_text_blob ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_textblob) -> CFloat -> CFloat -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_reset_matrix(sk_canvas_t *ccanvas)
@
-}
foreign import ccall "sk_canvas_reset_matrix" sk_canvas_reset_matrix ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_reset_matrix'
foreign import ccall "&sk_canvas_reset_matrix" p'sk_canvas_reset_matrix ::
  FunPtr (Ptr (Sk_canvas) -> IO (()))

{- | C function signature:

@
void sk_canvas_set_matrix(sk_canvas_t *ccanvas, const sk_matrix44_t *cmatrix)
@
-}
foreign import ccall "sk_canvas_set_matrix" sk_canvas_set_matrix ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_matrix44) -- ^ C argument @"const sk_matrix44_t * cmatrix"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_set_matrix'
foreign import ccall "&sk_canvas_set_matrix" p'sk_canvas_set_matrix ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_matrix44) -> IO (()))

{- | C function signature:

@
void sk_canvas_get_matrix(sk_canvas_t *ccanvas, sk_matrix44_t *cmatrix)
@
-}
foreign import ccall "sk_canvas_get_matrix" sk_canvas_get_matrix ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_matrix44) -- ^ C argument @"sk_matrix44_t * cmatrix"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_get_matrix'
foreign import ccall "&sk_canvas_get_matrix" p'sk_canvas_get_matrix ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_matrix44) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_round_rect(sk_canvas_t *ccanvas, const sk_rect_t *crect, float rx, float ry, const sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_canvas_draw_round_rect" sk_canvas_draw_round_rect ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * crect"@
  -> CFloat -- ^ C argument @"float rx"@
  -> CFloat -- ^ C argument @"float ry"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * cpaint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_round_rect'
foreign import ccall "&sk_canvas_draw_round_rect" p'sk_canvas_draw_round_rect ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_rect) -> CFloat -> CFloat -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_clip_rect_with_operation(sk_canvas_t *ccanvas, const sk_rect_t *crect, sk_clipop_t op, _Bool doAA)
@
-}
foreign import ccall "sk_canvas_clip_rect_with_operation" sk_canvas_clip_rect_with_operation ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * crect"@
  -> Sk_clipop -- ^ C argument @"sk_clipop_t op"@
  -> CBool -- ^ C argument @"_Bool doAA"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_clip_rect_with_operation'
foreign import ccall "&sk_canvas_clip_rect_with_operation" p'sk_canvas_clip_rect_with_operation ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_rect) -> Sk_clipop -> CBool -> IO (()))

{- | C function signature:

@
void sk_canvas_clip_path_with_operation(sk_canvas_t *ccanvas, const sk_path_t *cpath, sk_clipop_t op, _Bool doAA)
@
-}
foreign import ccall "sk_canvas_clip_path_with_operation" sk_canvas_clip_path_with_operation ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_path) -- ^ C argument @"const sk_path_t * cpath"@
  -> Sk_clipop -- ^ C argument @"sk_clipop_t op"@
  -> CBool -- ^ C argument @"_Bool doAA"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_clip_path_with_operation'
foreign import ccall "&sk_canvas_clip_path_with_operation" p'sk_canvas_clip_path_with_operation ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_path) -> Sk_clipop -> CBool -> IO (()))

{- | C function signature:

@
void sk_canvas_clip_rrect_with_operation(sk_canvas_t *ccanvas, const sk_rrect_t *crect, sk_clipop_t op, _Bool doAA)
@
-}
foreign import ccall "sk_canvas_clip_rrect_with_operation" sk_canvas_clip_rrect_with_operation ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_rrect) -- ^ C argument @"const sk_rrect_t * crect"@
  -> Sk_clipop -- ^ C argument @"sk_clipop_t op"@
  -> CBool -- ^ C argument @"_Bool doAA"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_clip_rrect_with_operation'
foreign import ccall "&sk_canvas_clip_rrect_with_operation" p'sk_canvas_clip_rrect_with_operation ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_rrect) -> Sk_clipop -> CBool -> IO (()))

{- | C function signature:

@
_Bool sk_canvas_get_local_clip_bounds(sk_canvas_t *ccanvas, sk_rect_t *cbounds)
@
-}
foreign import ccall "sk_canvas_get_local_clip_bounds" sk_canvas_get_local_clip_bounds ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_rect) -- ^ C argument @"sk_rect_t * cbounds"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_canvas_get_local_clip_bounds'
foreign import ccall "&sk_canvas_get_local_clip_bounds" p'sk_canvas_get_local_clip_bounds ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_rect) -> IO (CBool))

{- | C function signature:

@
_Bool sk_canvas_get_device_clip_bounds(sk_canvas_t *ccanvas, sk_irect_t *cbounds)
@
-}
foreign import ccall "sk_canvas_get_device_clip_bounds" sk_canvas_get_device_clip_bounds ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_irect) -- ^ C argument @"sk_irect_t * cbounds"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_canvas_get_device_clip_bounds'
foreign import ccall "&sk_canvas_get_device_clip_bounds" p'sk_canvas_get_device_clip_bounds ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_irect) -> IO (CBool))

{- | C function signature:

@
int sk_canvas_save(sk_canvas_t *ccanvas)
@
-}
foreign import ccall "sk_canvas_save" sk_canvas_save ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_canvas_save'
foreign import ccall "&sk_canvas_save" p'sk_canvas_save ::
  FunPtr (Ptr (Sk_canvas) -> IO (CInt))

{- | C function signature:

@
int sk_canvas_save_layer(sk_canvas_t *ccanvas, const sk_rect_t *crect, const sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_canvas_save_layer" sk_canvas_save_layer ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * crect"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * cpaint"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_canvas_save_layer'
foreign import ccall "&sk_canvas_save_layer" p'sk_canvas_save_layer ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_rect) -> Ptr (Sk_paint) -> IO (CInt))

{- | C function signature:

@
int sk_canvas_save_layer_rec(sk_canvas_t *ccanvas, const sk_canvas_savelayerrec_t *crec)
@
-}
foreign import ccall "sk_canvas_save_layer_rec" sk_canvas_save_layer_rec ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_canvas_savelayerrec) -- ^ C argument @"const sk_canvas_savelayerrec_t * crec"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_canvas_save_layer_rec'
foreign import ccall "&sk_canvas_save_layer_rec" p'sk_canvas_save_layer_rec ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_canvas_savelayerrec) -> IO (CInt))

{- | C function signature:

@
void sk_canvas_restore(sk_canvas_t *ccanvas)
@
-}
foreign import ccall "sk_canvas_restore" sk_canvas_restore ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_restore'
foreign import ccall "&sk_canvas_restore" p'sk_canvas_restore ::
  FunPtr (Ptr (Sk_canvas) -> IO (()))

{- | C function signature:

@
void sk_canvas_translate(sk_canvas_t *ccanvas, float dx, float dy)
@
-}
foreign import ccall "sk_canvas_translate" sk_canvas_translate ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> CFloat -- ^ C argument @"float dx"@
  -> CFloat -- ^ C argument @"float dy"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_translate'
foreign import ccall "&sk_canvas_translate" p'sk_canvas_translate ::
  FunPtr (Ptr (Sk_canvas) -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_canvas_scale(sk_canvas_t *ccanvas, float sx, float sy)
@
-}
foreign import ccall "sk_canvas_scale" sk_canvas_scale ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> CFloat -- ^ C argument @"float sx"@
  -> CFloat -- ^ C argument @"float sy"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_scale'
foreign import ccall "&sk_canvas_scale" p'sk_canvas_scale ::
  FunPtr (Ptr (Sk_canvas) -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_canvas_rotate_degrees(sk_canvas_t *ccanvas, float degrees)
@
-}
foreign import ccall "sk_canvas_rotate_degrees" sk_canvas_rotate_degrees ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> CFloat -- ^ C argument @"float degrees"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_rotate_degrees'
foreign import ccall "&sk_canvas_rotate_degrees" p'sk_canvas_rotate_degrees ::
  FunPtr (Ptr (Sk_canvas) -> CFloat -> IO (()))

{- | C function signature:

@
void sk_canvas_rotate_radians(sk_canvas_t *ccanvas, float radians)
@
-}
foreign import ccall "sk_canvas_rotate_radians" sk_canvas_rotate_radians ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> CFloat -- ^ C argument @"float radians"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_rotate_radians'
foreign import ccall "&sk_canvas_rotate_radians" p'sk_canvas_rotate_radians ::
  FunPtr (Ptr (Sk_canvas) -> CFloat -> IO (()))

{- | C function signature:

@
void sk_canvas_skew(sk_canvas_t *ccanvas, float sx, float sy)
@
-}
foreign import ccall "sk_canvas_skew" sk_canvas_skew ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> CFloat -- ^ C argument @"float sx"@
  -> CFloat -- ^ C argument @"float sy"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_skew'
foreign import ccall "&sk_canvas_skew" p'sk_canvas_skew ::
  FunPtr (Ptr (Sk_canvas) -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_canvas_concat(sk_canvas_t *ccanvas, const sk_matrix44_t *cmatrix)
@
-}
foreign import ccall "sk_canvas_concat" sk_canvas_concat ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_matrix44) -- ^ C argument @"const sk_matrix44_t * cmatrix"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_concat'
foreign import ccall "&sk_canvas_concat" p'sk_canvas_concat ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_matrix44) -> IO (()))

{- | C function signature:

@
_Bool sk_canvas_quick_reject(sk_canvas_t *ccanvas, const sk_rect_t *crect)
@
-}
foreign import ccall "sk_canvas_quick_reject" sk_canvas_quick_reject ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * crect"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_canvas_quick_reject'
foreign import ccall "&sk_canvas_quick_reject" p'sk_canvas_quick_reject ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_rect) -> IO (CBool))

{- | C function signature:

@
void sk_canvas_clip_region(sk_canvas_t *ccanvas, const sk_region_t *region, sk_clipop_t op)
@
-}
foreign import ccall "sk_canvas_clip_region" sk_canvas_clip_region ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_region) -- ^ C argument @"const sk_region_t * region"@
  -> Sk_clipop -- ^ C argument @"sk_clipop_t op"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_clip_region'
foreign import ccall "&sk_canvas_clip_region" p'sk_canvas_clip_region ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_region) -> Sk_clipop -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_paint(sk_canvas_t *ccanvas, const sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_canvas_draw_paint" sk_canvas_draw_paint ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * cpaint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_paint'
foreign import ccall "&sk_canvas_draw_paint" p'sk_canvas_draw_paint ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_region(sk_canvas_t *ccanvas, const sk_region_t *cregion, const sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_canvas_draw_region" sk_canvas_draw_region ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_region) -- ^ C argument @"const sk_region_t * cregion"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * cpaint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_region'
foreign import ccall "&sk_canvas_draw_region" p'sk_canvas_draw_region ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_region) -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_rect(sk_canvas_t *ccanvas, const sk_rect_t *crect, const sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_canvas_draw_rect" sk_canvas_draw_rect ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * crect"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * cpaint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_rect'
foreign import ccall "&sk_canvas_draw_rect" p'sk_canvas_draw_rect ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_rect) -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_rrect(sk_canvas_t *ccanvas, const sk_rrect_t *crect, const sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_canvas_draw_rrect" sk_canvas_draw_rrect ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_rrect) -- ^ C argument @"const sk_rrect_t * crect"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * cpaint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_rrect'
foreign import ccall "&sk_canvas_draw_rrect" p'sk_canvas_draw_rrect ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_rrect) -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_circle(sk_canvas_t *ccanvas, float cx, float cy, float rad, const sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_canvas_draw_circle" sk_canvas_draw_circle ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> CFloat -- ^ C argument @"float cx"@
  -> CFloat -- ^ C argument @"float cy"@
  -> CFloat -- ^ C argument @"float rad"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * cpaint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_circle'
foreign import ccall "&sk_canvas_draw_circle" p'sk_canvas_draw_circle ::
  FunPtr (Ptr (Sk_canvas) -> CFloat -> CFloat -> CFloat -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_oval(sk_canvas_t *ccanvas, const sk_rect_t *crect, const sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_canvas_draw_oval" sk_canvas_draw_oval ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * crect"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * cpaint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_oval'
foreign import ccall "&sk_canvas_draw_oval" p'sk_canvas_draw_oval ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_rect) -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_path(sk_canvas_t *ccanvas, const sk_path_t *cpath, const sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_canvas_draw_path" sk_canvas_draw_path ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_path) -- ^ C argument @"const sk_path_t * cpath"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * cpaint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_path'
foreign import ccall "&sk_canvas_draw_path" p'sk_canvas_draw_path ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_path) -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_image(sk_canvas_t *ccanvas, const sk_image_t *cimage, float x, float y, const sk_sampling_options_t *sampling, const sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_canvas_draw_image" sk_canvas_draw_image ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_image) -- ^ C argument @"const sk_image_t * cimage"@
  -> CFloat -- ^ C argument @"float x"@
  -> CFloat -- ^ C argument @"float y"@
  -> Ptr (Sk_sampling_options) -- ^ C argument @"const sk_sampling_options_t * sampling"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * cpaint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_image'
foreign import ccall "&sk_canvas_draw_image" p'sk_canvas_draw_image ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_image) -> CFloat -> CFloat -> Ptr (Sk_sampling_options) -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_image_rect(sk_canvas_t *ccanvas, const sk_image_t *cimage, const sk_rect_t *csrcR, const sk_rect_t *cdstR, const sk_sampling_options_t *sampling, const sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_canvas_draw_image_rect" sk_canvas_draw_image_rect ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_image) -- ^ C argument @"const sk_image_t * cimage"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * csrcR"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cdstR"@
  -> Ptr (Sk_sampling_options) -- ^ C argument @"const sk_sampling_options_t * sampling"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * cpaint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_image_rect'
foreign import ccall "&sk_canvas_draw_image_rect" p'sk_canvas_draw_image_rect ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_image) -> Ptr (Sk_rect) -> Ptr (Sk_rect) -> Ptr (Sk_sampling_options) -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_picture(sk_canvas_t *ccanvas, const sk_picture_t *cpicture, const sk_matrix_t *cmatrix, const sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_canvas_draw_picture" sk_canvas_draw_picture ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_picture) -- ^ C argument @"const sk_picture_t * cpicture"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * cmatrix"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * cpaint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_picture'
foreign import ccall "&sk_canvas_draw_picture" p'sk_canvas_draw_picture ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_picture) -> Ptr (Sk_matrix) -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_drawable(sk_canvas_t *ccanvas, sk_drawable_t *cdrawable, const sk_matrix_t *cmatrix)
@
-}
foreign import ccall "sk_canvas_draw_drawable" sk_canvas_draw_drawable ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_drawable) -- ^ C argument @"sk_drawable_t * cdrawable"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * cmatrix"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_drawable'
foreign import ccall "&sk_canvas_draw_drawable" p'sk_canvas_draw_drawable ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_drawable) -> Ptr (Sk_matrix) -> IO (()))

{- | C function signature:

@
sk_canvas_t *sk_canvas_new_from_bitmap(const sk_bitmap_t *bitmap)
@
-}
foreign import ccall "sk_canvas_new_from_bitmap" sk_canvas_new_from_bitmap ::
  Ptr (Sk_bitmap) -- ^ C argument @"const sk_bitmap_t * bitmap"@
  -> IO (Ptr (Sk_canvas)) -- ^ C return type: @"sk_canvas_t *"@

-- | Function pointer to 'sk_canvas_new_from_bitmap'
foreign import ccall "&sk_canvas_new_from_bitmap" p'sk_canvas_new_from_bitmap ::
  FunPtr (Ptr (Sk_bitmap) -> IO (Ptr (Sk_canvas)))

{- | C function signature:

@
sk_canvas_t *sk_canvas_new_from_raster(const sk_imageinfo_t *cinfo, void *pixels, size_t rowBytes, const sk_surfaceprops_t *props)
@
-}
foreign import ccall "sk_canvas_new_from_raster" sk_canvas_new_from_raster ::
  Ptr (Sk_imageinfo) -- ^ C argument @"const sk_imageinfo_t * cinfo"@
  -> Ptr (()) -- ^ C argument @"void * pixels"@
  -> CSize -- ^ C argument @"size_t rowBytes"@
  -> Ptr (Sk_surfaceprops) -- ^ C argument @"const sk_surfaceprops_t * props"@
  -> IO (Ptr (Sk_canvas)) -- ^ C return type: @"sk_canvas_t *"@

-- | Function pointer to 'sk_canvas_new_from_raster'
foreign import ccall "&sk_canvas_new_from_raster" p'sk_canvas_new_from_raster ::
  FunPtr (Ptr (Sk_imageinfo) -> Ptr (()) -> CSize -> Ptr (Sk_surfaceprops) -> IO (Ptr (Sk_canvas)))

{- | C function signature:

@
void sk_canvas_draw_annotation(sk_canvas_t *t, const sk_rect_t *rect, const char *key, sk_data_t *value)
@
-}
foreign import ccall "sk_canvas_draw_annotation" sk_canvas_draw_annotation ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * t"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * rect"@
  -> Ptr (CChar) -- ^ C argument @"const char * key"@
  -> Ptr (Sk_data) -- ^ C argument @"sk_data_t * value"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_annotation'
foreign import ccall "&sk_canvas_draw_annotation" p'sk_canvas_draw_annotation ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_rect) -> Ptr (CChar) -> Ptr (Sk_data) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_url_annotation(sk_canvas_t *t, const sk_rect_t *rect, sk_data_t *value)
@
-}
foreign import ccall "sk_canvas_draw_url_annotation" sk_canvas_draw_url_annotation ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * t"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * rect"@
  -> Ptr (Sk_data) -- ^ C argument @"sk_data_t * value"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_url_annotation'
foreign import ccall "&sk_canvas_draw_url_annotation" p'sk_canvas_draw_url_annotation ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_rect) -> Ptr (Sk_data) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_named_destination_annotation(sk_canvas_t *t, const sk_point_t *point, sk_data_t *value)
@
-}
foreign import ccall "sk_canvas_draw_named_destination_annotation" sk_canvas_draw_named_destination_annotation ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * t"@
  -> Ptr (Sk_point) -- ^ C argument @"const sk_point_t * point"@
  -> Ptr (Sk_data) -- ^ C argument @"sk_data_t * value"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_named_destination_annotation'
foreign import ccall "&sk_canvas_draw_named_destination_annotation" p'sk_canvas_draw_named_destination_annotation ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_point) -> Ptr (Sk_data) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_link_destination_annotation(sk_canvas_t *t, const sk_rect_t *rect, sk_data_t *value)
@
-}
foreign import ccall "sk_canvas_draw_link_destination_annotation" sk_canvas_draw_link_destination_annotation ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * t"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * rect"@
  -> Ptr (Sk_data) -- ^ C argument @"sk_data_t * value"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_link_destination_annotation'
foreign import ccall "&sk_canvas_draw_link_destination_annotation" p'sk_canvas_draw_link_destination_annotation ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_rect) -> Ptr (Sk_data) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_image_lattice(sk_canvas_t *ccanvas, const sk_image_t *image, const sk_lattice_t *lattice, const sk_rect_t *dst, sk_filter_mode_t mode, const sk_paint_t *paint)
@
-}
foreign import ccall "sk_canvas_draw_image_lattice" sk_canvas_draw_image_lattice ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_image) -- ^ C argument @"const sk_image_t * image"@
  -> Ptr (Sk_lattice) -- ^ C argument @"const sk_lattice_t * lattice"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * dst"@
  -> Sk_filter_mode -- ^ C argument @"sk_filter_mode_t mode"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * paint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_image_lattice'
foreign import ccall "&sk_canvas_draw_image_lattice" p'sk_canvas_draw_image_lattice ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_image) -> Ptr (Sk_lattice) -> Ptr (Sk_rect) -> Sk_filter_mode -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_image_nine(sk_canvas_t *ccanvas, const sk_image_t *image, const sk_irect_t *center, const sk_rect_t *dst, sk_filter_mode_t mode, const sk_paint_t *paint)
@
-}
foreign import ccall "sk_canvas_draw_image_nine" sk_canvas_draw_image_nine ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_image) -- ^ C argument @"const sk_image_t * image"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * center"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * dst"@
  -> Sk_filter_mode -- ^ C argument @"sk_filter_mode_t mode"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * paint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_image_nine'
foreign import ccall "&sk_canvas_draw_image_nine" p'sk_canvas_draw_image_nine ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_image) -> Ptr (Sk_irect) -> Ptr (Sk_rect) -> Sk_filter_mode -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_vertices(sk_canvas_t *ccanvas, const sk_vertices_t *vertices, sk_blendmode_t mode, const sk_paint_t *paint)
@
-}
foreign import ccall "sk_canvas_draw_vertices" sk_canvas_draw_vertices ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_vertices) -- ^ C argument @"const sk_vertices_t * vertices"@
  -> Sk_blendmode -- ^ C argument @"sk_blendmode_t mode"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * paint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_vertices'
foreign import ccall "&sk_canvas_draw_vertices" p'sk_canvas_draw_vertices ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_vertices) -> Sk_blendmode -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_arc(sk_canvas_t *ccanvas, const sk_rect_t *oval, float startAngle, float sweepAngle, _Bool useCenter, const sk_paint_t *paint)
@
-}
foreign import ccall "sk_canvas_draw_arc" sk_canvas_draw_arc ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * oval"@
  -> CFloat -- ^ C argument @"float startAngle"@
  -> CFloat -- ^ C argument @"float sweepAngle"@
  -> CBool -- ^ C argument @"_Bool useCenter"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * paint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_arc'
foreign import ccall "&sk_canvas_draw_arc" p'sk_canvas_draw_arc ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_rect) -> CFloat -> CFloat -> CBool -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_drrect(sk_canvas_t *ccanvas, const sk_rrect_t *outer, const sk_rrect_t *inner, const sk_paint_t *paint)
@
-}
foreign import ccall "sk_canvas_draw_drrect" sk_canvas_draw_drrect ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_rrect) -- ^ C argument @"const sk_rrect_t * outer"@
  -> Ptr (Sk_rrect) -- ^ C argument @"const sk_rrect_t * inner"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * paint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_drrect'
foreign import ccall "&sk_canvas_draw_drrect" p'sk_canvas_draw_drrect ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_rrect) -> Ptr (Sk_rrect) -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_atlas(sk_canvas_t *ccanvas, const sk_image_t *atlas, const sk_rsxform_t *xform, const sk_rect_t *tex, const sk_color_t *colors, int count, sk_blendmode_t mode, const sk_sampling_options_t *sampling, const sk_rect_t *cullRect, const sk_paint_t *paint)
@
-}
foreign import ccall "sk_canvas_draw_atlas" sk_canvas_draw_atlas ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_image) -- ^ C argument @"const sk_image_t * atlas"@
  -> Ptr (Sk_rsxform) -- ^ C argument @"const sk_rsxform_t * xform"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * tex"@
  -> Ptr (Sk_color) -- ^ C argument @"const sk_color_t * colors"@
  -> CInt -- ^ C argument @"int count"@
  -> Sk_blendmode -- ^ C argument @"sk_blendmode_t mode"@
  -> Ptr (Sk_sampling_options) -- ^ C argument @"const sk_sampling_options_t * sampling"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cullRect"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * paint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_atlas'
foreign import ccall "&sk_canvas_draw_atlas" p'sk_canvas_draw_atlas ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_image) -> Ptr (Sk_rsxform) -> Ptr (Sk_rect) -> Ptr (Sk_color) -> CInt -> Sk_blendmode -> Ptr (Sk_sampling_options) -> Ptr (Sk_rect) -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_canvas_draw_patch(sk_canvas_t *ccanvas, const sk_point_t *cubics, const sk_color_t *colors, const sk_point_t *texCoords, sk_blendmode_t mode, const sk_paint_t *paint)
@
-}
foreign import ccall "sk_canvas_draw_patch" sk_canvas_draw_patch ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> Ptr (Sk_point) -- ^ C argument @"const sk_point_t * cubics"@
  -> Ptr (Sk_color) -- ^ C argument @"const sk_color_t * colors"@
  -> Ptr (Sk_point) -- ^ C argument @"const sk_point_t * texCoords"@
  -> Sk_blendmode -- ^ C argument @"sk_blendmode_t mode"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * paint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_canvas_draw_patch'
foreign import ccall "&sk_canvas_draw_patch" p'sk_canvas_draw_patch ::
  FunPtr (Ptr (Sk_canvas) -> Ptr (Sk_point) -> Ptr (Sk_color) -> Ptr (Sk_point) -> Sk_blendmode -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
_Bool sk_canvas_is_clip_empty(sk_canvas_t *ccanvas)
@
-}
foreign import ccall "sk_canvas_is_clip_empty" sk_canvas_is_clip_empty ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_canvas_is_clip_empty'
foreign import ccall "&sk_canvas_is_clip_empty" p'sk_canvas_is_clip_empty ::
  FunPtr (Ptr (Sk_canvas) -> IO (CBool))

{- | C function signature:

@
_Bool sk_canvas_is_clip_rect(sk_canvas_t *ccanvas)
@
-}
foreign import ccall "sk_canvas_is_clip_rect" sk_canvas_is_clip_rect ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * ccanvas"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_canvas_is_clip_rect'
foreign import ccall "&sk_canvas_is_clip_rect" p'sk_canvas_is_clip_rect ::
  FunPtr (Ptr (Sk_canvas) -> IO (CBool))

{- | C function signature:

@
sk_nodraw_canvas_t *sk_nodraw_canvas_new(int width, int height)
@
-}
foreign import ccall "sk_nodraw_canvas_new" sk_nodraw_canvas_new ::
  CInt -- ^ C argument @"int width"@
  -> CInt -- ^ C argument @"int height"@
  -> IO (Ptr (Sk_nodraw_canvas)) -- ^ C return type: @"sk_nodraw_canvas_t *"@

-- | Function pointer to 'sk_nodraw_canvas_new'
foreign import ccall "&sk_nodraw_canvas_new" p'sk_nodraw_canvas_new ::
  FunPtr (CInt -> CInt -> IO (Ptr (Sk_nodraw_canvas)))

{- | C function signature:

@
void sk_nodraw_canvas_destroy(sk_nodraw_canvas_t *t)
@
-}
foreign import ccall "sk_nodraw_canvas_destroy" sk_nodraw_canvas_destroy ::
  Ptr (Sk_nodraw_canvas) -- ^ C argument @"sk_nodraw_canvas_t * t"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_nodraw_canvas_destroy'
foreign import ccall "&sk_nodraw_canvas_destroy" p'sk_nodraw_canvas_destroy ::
  FunPtr (Ptr (Sk_nodraw_canvas) -> IO (()))

{- | C function signature:

@
sk_nway_canvas_t *sk_nway_canvas_new(int width, int height)
@
-}
foreign import ccall "sk_nway_canvas_new" sk_nway_canvas_new ::
  CInt -- ^ C argument @"int width"@
  -> CInt -- ^ C argument @"int height"@
  -> IO (Ptr (Sk_nway_canvas)) -- ^ C return type: @"sk_nway_canvas_t *"@

-- | Function pointer to 'sk_nway_canvas_new'
foreign import ccall "&sk_nway_canvas_new" p'sk_nway_canvas_new ::
  FunPtr (CInt -> CInt -> IO (Ptr (Sk_nway_canvas)))

{- | C function signature:

@
void sk_nway_canvas_destroy(sk_nway_canvas_t *t)
@
-}
foreign import ccall "sk_nway_canvas_destroy" sk_nway_canvas_destroy ::
  Ptr (Sk_nway_canvas) -- ^ C argument @"sk_nway_canvas_t * t"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_nway_canvas_destroy'
foreign import ccall "&sk_nway_canvas_destroy" p'sk_nway_canvas_destroy ::
  FunPtr (Ptr (Sk_nway_canvas) -> IO (()))

{- | C function signature:

@
void sk_nway_canvas_add_canvas(sk_nway_canvas_t *t, sk_canvas_t *canvas)
@
-}
foreign import ccall "sk_nway_canvas_add_canvas" sk_nway_canvas_add_canvas ::
  Ptr (Sk_nway_canvas) -- ^ C argument @"sk_nway_canvas_t * t"@
  -> Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * canvas"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_nway_canvas_add_canvas'
foreign import ccall "&sk_nway_canvas_add_canvas" p'sk_nway_canvas_add_canvas ::
  FunPtr (Ptr (Sk_nway_canvas) -> Ptr (Sk_canvas) -> IO (()))

{- | C function signature:

@
void sk_nway_canvas_remove_canvas(sk_nway_canvas_t *t, sk_canvas_t *canvas)
@
-}
foreign import ccall "sk_nway_canvas_remove_canvas" sk_nway_canvas_remove_canvas ::
  Ptr (Sk_nway_canvas) -- ^ C argument @"sk_nway_canvas_t * t"@
  -> Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * canvas"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_nway_canvas_remove_canvas'
foreign import ccall "&sk_nway_canvas_remove_canvas" p'sk_nway_canvas_remove_canvas ::
  FunPtr (Ptr (Sk_nway_canvas) -> Ptr (Sk_canvas) -> IO (()))

{- | C function signature:

@
void sk_nway_canvas_remove_all(sk_nway_canvas_t *t)
@
-}
foreign import ccall "sk_nway_canvas_remove_all" sk_nway_canvas_remove_all ::
  Ptr (Sk_nway_canvas) -- ^ C argument @"sk_nway_canvas_t * t"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_nway_canvas_remove_all'
foreign import ccall "&sk_nway_canvas_remove_all" p'sk_nway_canvas_remove_all ::
  FunPtr (Ptr (Sk_nway_canvas) -> IO (()))

{- | C function signature:

@
sk_overdraw_canvas_t *sk_overdraw_canvas_new(sk_canvas_t *canvas)
@
-}
foreign import ccall "sk_overdraw_canvas_new" sk_overdraw_canvas_new ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * canvas"@
  -> IO (Ptr (Sk_overdraw_canvas)) -- ^ C return type: @"sk_overdraw_canvas_t *"@

-- | Function pointer to 'sk_overdraw_canvas_new'
foreign import ccall "&sk_overdraw_canvas_new" p'sk_overdraw_canvas_new ::
  FunPtr (Ptr (Sk_canvas) -> IO (Ptr (Sk_overdraw_canvas)))

{- | C function signature:

@
void sk_overdraw_canvas_destroy(sk_overdraw_canvas_t *canvas)
@
-}
foreign import ccall "sk_overdraw_canvas_destroy" sk_overdraw_canvas_destroy ::
  Ptr (Sk_overdraw_canvas) -- ^ C argument @"sk_overdraw_canvas_t * canvas"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_overdraw_canvas_destroy'
foreign import ccall "&sk_overdraw_canvas_destroy" p'sk_overdraw_canvas_destroy ::
  FunPtr (Ptr (Sk_overdraw_canvas) -> IO (()))

{- | C function signature:

@
gr_recording_context_t *sk_get_recording_context(sk_canvas_t *canvas)
@
-}
foreign import ccall "sk_get_recording_context" sk_get_recording_context ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * canvas"@
  -> IO (Ptr (Gr_recording_context)) -- ^ C return type: @"gr_recording_context_t *"@

-- | Function pointer to 'sk_get_recording_context'
foreign import ccall "&sk_get_recording_context" p'sk_get_recording_context ::
  FunPtr (Ptr (Sk_canvas) -> IO (Ptr (Gr_recording_context)))

{- | C function signature:

@
sk_surface_t *sk_get_surface(sk_canvas_t *canvas)
@
-}
foreign import ccall "sk_get_surface" sk_get_surface ::
  Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * canvas"@
  -> IO (Ptr (Sk_surface)) -- ^ C return type: @"sk_surface_t *"@

-- | Function pointer to 'sk_get_surface'
foreign import ccall "&sk_get_surface" p'sk_get_surface ::
  FunPtr (Ptr (Sk_canvas) -> IO (Ptr (Sk_surface)))

{- | C function signature:

@
void sk_textblob_ref(const sk_textblob_t *blob)
@
-}
foreign import ccall "sk_textblob_ref" sk_textblob_ref ::
  Ptr (Sk_textblob) -- ^ C argument @"const sk_textblob_t * blob"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_textblob_ref'
foreign import ccall "&sk_textblob_ref" p'sk_textblob_ref ::
  FunPtr (Ptr (Sk_textblob) -> IO (()))

{- | C function signature:

@
void sk_textblob_unref(const sk_textblob_t *blob)
@
-}
foreign import ccall "sk_textblob_unref" sk_textblob_unref ::
  Ptr (Sk_textblob) -- ^ C argument @"const sk_textblob_t * blob"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_textblob_unref'
foreign import ccall "&sk_textblob_unref" p'sk_textblob_unref ::
  FunPtr (Ptr (Sk_textblob) -> IO (()))

{- | C function signature:

@
uint32_t sk_textblob_get_unique_id(const sk_textblob_t *blob)
@
-}
foreign import ccall "sk_textblob_get_unique_id" sk_textblob_get_unique_id ::
  Ptr (Sk_textblob) -- ^ C argument @"const sk_textblob_t * blob"@
  -> IO (Word32) -- ^ C return type: @"uint32_t"@

-- | Function pointer to 'sk_textblob_get_unique_id'
foreign import ccall "&sk_textblob_get_unique_id" p'sk_textblob_get_unique_id ::
  FunPtr (Ptr (Sk_textblob) -> IO (Word32))

{- | C function signature:

@
void sk_textblob_get_bounds(const sk_textblob_t *blob, sk_rect_t *bounds)
@
-}
foreign import ccall "sk_textblob_get_bounds" sk_textblob_get_bounds ::
  Ptr (Sk_textblob) -- ^ C argument @"const sk_textblob_t * blob"@
  -> Ptr (Sk_rect) -- ^ C argument @"sk_rect_t * bounds"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_textblob_get_bounds'
foreign import ccall "&sk_textblob_get_bounds" p'sk_textblob_get_bounds ::
  FunPtr (Ptr (Sk_textblob) -> Ptr (Sk_rect) -> IO (()))

{- | C function signature:

@
int sk_textblob_get_intercepts(const sk_textblob_t *blob, const float bounds[2], float intervals[], const sk_paint_t *paint)
@
-}
foreign import ccall "sk_textblob_get_intercepts" sk_textblob_get_intercepts ::
  Ptr (Sk_textblob) -- ^ C argument @"const sk_textblob_t * blob"@
  -> Ptr (CFloat) -- ^ C argument @"const float [2] bounds"@
  -> Ptr (CFloat) -- ^ C argument @"float [] intervals"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * paint"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_textblob_get_intercepts'
foreign import ccall "&sk_textblob_get_intercepts" p'sk_textblob_get_intercepts ::
  FunPtr (Ptr (Sk_textblob) -> Ptr (CFloat) -> Ptr (CFloat) -> Ptr (Sk_paint) -> IO (CInt))

{- | C function signature:

@
sk_textblob_builder_t *sk_textblob_builder_new(void)
@
-}
foreign import ccall "sk_textblob_builder_new" sk_textblob_builder_new ::
  IO (Ptr (Sk_textblob_builder)) -- ^ C return type: @"sk_textblob_builder_t *"@

-- | Function pointer to 'sk_textblob_builder_new'
foreign import ccall "&sk_textblob_builder_new" p'sk_textblob_builder_new ::
  FunPtr (IO (Ptr (Sk_textblob_builder)))

{- | C function signature:

@
void sk_textblob_builder_delete(sk_textblob_builder_t *builder)
@
-}
foreign import ccall "sk_textblob_builder_delete" sk_textblob_builder_delete ::
  Ptr (Sk_textblob_builder) -- ^ C argument @"sk_textblob_builder_t * builder"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_textblob_builder_delete'
foreign import ccall "&sk_textblob_builder_delete" p'sk_textblob_builder_delete ::
  FunPtr (Ptr (Sk_textblob_builder) -> IO (()))

{- | C function signature:

@
sk_textblob_t *sk_textblob_builder_make(sk_textblob_builder_t *builder)
@
-}
foreign import ccall "sk_textblob_builder_make" sk_textblob_builder_make ::
  Ptr (Sk_textblob_builder) -- ^ C argument @"sk_textblob_builder_t * builder"@
  -> IO (Ptr (Sk_textblob)) -- ^ C return type: @"sk_textblob_t *"@

-- | Function pointer to 'sk_textblob_builder_make'
foreign import ccall "&sk_textblob_builder_make" p'sk_textblob_builder_make ::
  FunPtr (Ptr (Sk_textblob_builder) -> IO (Ptr (Sk_textblob)))

{- | C function signature:

@
void sk_textblob_builder_alloc_run(sk_textblob_builder_t *builder, const sk_font_t *font, int count, float x, float y, const sk_rect_t *bounds, sk_textblob_builder_runbuffer_t *runbuffer)
@
-}
foreign import ccall "sk_textblob_builder_alloc_run" sk_textblob_builder_alloc_run ::
  Ptr (Sk_textblob_builder) -- ^ C argument @"sk_textblob_builder_t * builder"@
  -> Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> CInt -- ^ C argument @"int count"@
  -> CFloat -- ^ C argument @"float x"@
  -> CFloat -- ^ C argument @"float y"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * bounds"@
  -> Ptr (Sk_textblob_builder_runbuffer) -- ^ C argument @"sk_textblob_builder_runbuffer_t * runbuffer"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_textblob_builder_alloc_run'
foreign import ccall "&sk_textblob_builder_alloc_run" p'sk_textblob_builder_alloc_run ::
  FunPtr (Ptr (Sk_textblob_builder) -> Ptr (Sk_font) -> CInt -> CFloat -> CFloat -> Ptr (Sk_rect) -> Ptr (Sk_textblob_builder_runbuffer) -> IO (()))

{- | C function signature:

@
void sk_textblob_builder_alloc_run_pos_h(sk_textblob_builder_t *builder, const sk_font_t *font, int count, float y, const sk_rect_t *bounds, sk_textblob_builder_runbuffer_t *runbuffer)
@
-}
foreign import ccall "sk_textblob_builder_alloc_run_pos_h" sk_textblob_builder_alloc_run_pos_h ::
  Ptr (Sk_textblob_builder) -- ^ C argument @"sk_textblob_builder_t * builder"@
  -> Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> CInt -- ^ C argument @"int count"@
  -> CFloat -- ^ C argument @"float y"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * bounds"@
  -> Ptr (Sk_textblob_builder_runbuffer) -- ^ C argument @"sk_textblob_builder_runbuffer_t * runbuffer"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_textblob_builder_alloc_run_pos_h'
foreign import ccall "&sk_textblob_builder_alloc_run_pos_h" p'sk_textblob_builder_alloc_run_pos_h ::
  FunPtr (Ptr (Sk_textblob_builder) -> Ptr (Sk_font) -> CInt -> CFloat -> Ptr (Sk_rect) -> Ptr (Sk_textblob_builder_runbuffer) -> IO (()))

{- | C function signature:

@
void sk_textblob_builder_alloc_run_pos(sk_textblob_builder_t *builder, const sk_font_t *font, int count, const sk_rect_t *bounds, sk_textblob_builder_runbuffer_t *runbuffer)
@
-}
foreign import ccall "sk_textblob_builder_alloc_run_pos" sk_textblob_builder_alloc_run_pos ::
  Ptr (Sk_textblob_builder) -- ^ C argument @"sk_textblob_builder_t * builder"@
  -> Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> CInt -- ^ C argument @"int count"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * bounds"@
  -> Ptr (Sk_textblob_builder_runbuffer) -- ^ C argument @"sk_textblob_builder_runbuffer_t * runbuffer"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_textblob_builder_alloc_run_pos'
foreign import ccall "&sk_textblob_builder_alloc_run_pos" p'sk_textblob_builder_alloc_run_pos ::
  FunPtr (Ptr (Sk_textblob_builder) -> Ptr (Sk_font) -> CInt -> Ptr (Sk_rect) -> Ptr (Sk_textblob_builder_runbuffer) -> IO (()))

{- | C function signature:

@
void sk_textblob_builder_alloc_run_rsxform(sk_textblob_builder_t *builder, const sk_font_t *font, int count, const sk_rect_t *bounds, sk_textblob_builder_runbuffer_t *runbuffer)
@
-}
foreign import ccall "sk_textblob_builder_alloc_run_rsxform" sk_textblob_builder_alloc_run_rsxform ::
  Ptr (Sk_textblob_builder) -- ^ C argument @"sk_textblob_builder_t * builder"@
  -> Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> CInt -- ^ C argument @"int count"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * bounds"@
  -> Ptr (Sk_textblob_builder_runbuffer) -- ^ C argument @"sk_textblob_builder_runbuffer_t * runbuffer"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_textblob_builder_alloc_run_rsxform'
foreign import ccall "&sk_textblob_builder_alloc_run_rsxform" p'sk_textblob_builder_alloc_run_rsxform ::
  FunPtr (Ptr (Sk_textblob_builder) -> Ptr (Sk_font) -> CInt -> Ptr (Sk_rect) -> Ptr (Sk_textblob_builder_runbuffer) -> IO (()))

{- | C function signature:

@
void sk_textblob_builder_alloc_run_text(sk_textblob_builder_t *builder, const sk_font_t *font, int count, float x, float y, int textByteCount, const sk_rect_t *bounds, sk_textblob_builder_runbuffer_t *runbuffer)
@
-}
foreign import ccall "sk_textblob_builder_alloc_run_text" sk_textblob_builder_alloc_run_text ::
  Ptr (Sk_textblob_builder) -- ^ C argument @"sk_textblob_builder_t * builder"@
  -> Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> CInt -- ^ C argument @"int count"@
  -> CFloat -- ^ C argument @"float x"@
  -> CFloat -- ^ C argument @"float y"@
  -> CInt -- ^ C argument @"int textByteCount"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * bounds"@
  -> Ptr (Sk_textblob_builder_runbuffer) -- ^ C argument @"sk_textblob_builder_runbuffer_t * runbuffer"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_textblob_builder_alloc_run_text'
foreign import ccall "&sk_textblob_builder_alloc_run_text" p'sk_textblob_builder_alloc_run_text ::
  FunPtr (Ptr (Sk_textblob_builder) -> Ptr (Sk_font) -> CInt -> CFloat -> CFloat -> CInt -> Ptr (Sk_rect) -> Ptr (Sk_textblob_builder_runbuffer) -> IO (()))

{- | C function signature:

@
void sk_textblob_builder_alloc_run_text_pos_h(sk_textblob_builder_t *builder, const sk_font_t *font, int count, float y, int textByteCount, const sk_rect_t *bounds, sk_textblob_builder_runbuffer_t *runbuffer)
@
-}
foreign import ccall "sk_textblob_builder_alloc_run_text_pos_h" sk_textblob_builder_alloc_run_text_pos_h ::
  Ptr (Sk_textblob_builder) -- ^ C argument @"sk_textblob_builder_t * builder"@
  -> Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> CInt -- ^ C argument @"int count"@
  -> CFloat -- ^ C argument @"float y"@
  -> CInt -- ^ C argument @"int textByteCount"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * bounds"@
  -> Ptr (Sk_textblob_builder_runbuffer) -- ^ C argument @"sk_textblob_builder_runbuffer_t * runbuffer"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_textblob_builder_alloc_run_text_pos_h'
foreign import ccall "&sk_textblob_builder_alloc_run_text_pos_h" p'sk_textblob_builder_alloc_run_text_pos_h ::
  FunPtr (Ptr (Sk_textblob_builder) -> Ptr (Sk_font) -> CInt -> CFloat -> CInt -> Ptr (Sk_rect) -> Ptr (Sk_textblob_builder_runbuffer) -> IO (()))

{- | C function signature:

@
void sk_textblob_builder_alloc_run_text_pos(sk_textblob_builder_t *builder, const sk_font_t *font, int count, int textByteCount, const sk_rect_t *bounds, sk_textblob_builder_runbuffer_t *runbuffer)
@
-}
foreign import ccall "sk_textblob_builder_alloc_run_text_pos" sk_textblob_builder_alloc_run_text_pos ::
  Ptr (Sk_textblob_builder) -- ^ C argument @"sk_textblob_builder_t * builder"@
  -> Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> CInt -- ^ C argument @"int count"@
  -> CInt -- ^ C argument @"int textByteCount"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * bounds"@
  -> Ptr (Sk_textblob_builder_runbuffer) -- ^ C argument @"sk_textblob_builder_runbuffer_t * runbuffer"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_textblob_builder_alloc_run_text_pos'
foreign import ccall "&sk_textblob_builder_alloc_run_text_pos" p'sk_textblob_builder_alloc_run_text_pos ::
  FunPtr (Ptr (Sk_textblob_builder) -> Ptr (Sk_font) -> CInt -> CInt -> Ptr (Sk_rect) -> Ptr (Sk_textblob_builder_runbuffer) -> IO (()))

{- | C function signature:

@
void sk_textblob_builder_alloc_run_text_rsxform(sk_textblob_builder_t *builder, const sk_font_t *font, int count, int textByteCount, const sk_rect_t *bounds, sk_textblob_builder_runbuffer_t *runbuffer)
@
-}
foreign import ccall "sk_textblob_builder_alloc_run_text_rsxform" sk_textblob_builder_alloc_run_text_rsxform ::
  Ptr (Sk_textblob_builder) -- ^ C argument @"sk_textblob_builder_t * builder"@
  -> Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> CInt -- ^ C argument @"int count"@
  -> CInt -- ^ C argument @"int textByteCount"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * bounds"@
  -> Ptr (Sk_textblob_builder_runbuffer) -- ^ C argument @"sk_textblob_builder_runbuffer_t * runbuffer"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_textblob_builder_alloc_run_text_rsxform'
foreign import ccall "&sk_textblob_builder_alloc_run_text_rsxform" p'sk_textblob_builder_alloc_run_text_rsxform ::
  FunPtr (Ptr (Sk_textblob_builder) -> Ptr (Sk_font) -> CInt -> CInt -> Ptr (Sk_rect) -> Ptr (Sk_textblob_builder_runbuffer) -> IO (()))

{- | C function signature:

@
void sk_maskfilter_ref(sk_maskfilter_t *)
@
-}
foreign import ccall "sk_maskfilter_ref" sk_maskfilter_ref ::
  Ptr (Sk_maskfilter) -- ^ C argument type: @"sk_maskfilter_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_maskfilter_ref'
foreign import ccall "&sk_maskfilter_ref" p'sk_maskfilter_ref ::
  FunPtr (Ptr (Sk_maskfilter) -> IO (()))

{- | C function signature:

@
void sk_maskfilter_unref(sk_maskfilter_t *)
@
-}
foreign import ccall "sk_maskfilter_unref" sk_maskfilter_unref ::
  Ptr (Sk_maskfilter) -- ^ C argument type: @"sk_maskfilter_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_maskfilter_unref'
foreign import ccall "&sk_maskfilter_unref" p'sk_maskfilter_unref ::
  FunPtr (Ptr (Sk_maskfilter) -> IO (()))

{- | C function signature:

@
sk_maskfilter_t *sk_maskfilter_new_blur(sk_blurstyle_t, float sigma)
@
-}
foreign import ccall "sk_maskfilter_new_blur" sk_maskfilter_new_blur ::
  Sk_blurstyle -- ^ C argument type: @"sk_blurstyle_t"@
  -> CFloat -- ^ C argument @"float sigma"@
  -> IO (Ptr (Sk_maskfilter)) -- ^ C return type: @"sk_maskfilter_t *"@

-- | Function pointer to 'sk_maskfilter_new_blur'
foreign import ccall "&sk_maskfilter_new_blur" p'sk_maskfilter_new_blur ::
  FunPtr (Sk_blurstyle -> CFloat -> IO (Ptr (Sk_maskfilter)))

{- | C function signature:

@
sk_maskfilter_t *sk_maskfilter_new_blur_with_flags(sk_blurstyle_t, float sigma, _Bool respectCTM)
@
-}
foreign import ccall "sk_maskfilter_new_blur_with_flags" sk_maskfilter_new_blur_with_flags ::
  Sk_blurstyle -- ^ C argument type: @"sk_blurstyle_t"@
  -> CFloat -- ^ C argument @"float sigma"@
  -> CBool -- ^ C argument @"_Bool respectCTM"@
  -> IO (Ptr (Sk_maskfilter)) -- ^ C return type: @"sk_maskfilter_t *"@

-- | Function pointer to 'sk_maskfilter_new_blur_with_flags'
foreign import ccall "&sk_maskfilter_new_blur_with_flags" p'sk_maskfilter_new_blur_with_flags ::
  FunPtr (Sk_blurstyle -> CFloat -> CBool -> IO (Ptr (Sk_maskfilter)))

{- | C function signature:

@
sk_maskfilter_t *sk_maskfilter_new_table(const uint8_t table[256])
@
-}
foreign import ccall "sk_maskfilter_new_table" sk_maskfilter_new_table ::
  Ptr (Word8) -- ^ C argument @"const uint8_t [256] table"@
  -> IO (Ptr (Sk_maskfilter)) -- ^ C return type: @"sk_maskfilter_t *"@

-- | Function pointer to 'sk_maskfilter_new_table'
foreign import ccall "&sk_maskfilter_new_table" p'sk_maskfilter_new_table ::
  FunPtr (Ptr (Word8) -> IO (Ptr (Sk_maskfilter)))

{- | C function signature:

@
sk_maskfilter_t *sk_maskfilter_new_gamma(float gamma)
@
-}
foreign import ccall "sk_maskfilter_new_gamma" sk_maskfilter_new_gamma ::
  CFloat -- ^ C argument @"float gamma"@
  -> IO (Ptr (Sk_maskfilter)) -- ^ C return type: @"sk_maskfilter_t *"@

-- | Function pointer to 'sk_maskfilter_new_gamma'
foreign import ccall "&sk_maskfilter_new_gamma" p'sk_maskfilter_new_gamma ::
  FunPtr (CFloat -> IO (Ptr (Sk_maskfilter)))

{- | C function signature:

@
sk_maskfilter_t *sk_maskfilter_new_clip(uint8_t min, uint8_t max)
@
-}
foreign import ccall "sk_maskfilter_new_clip" sk_maskfilter_new_clip ::
  Word8 -- ^ C argument @"uint8_t min"@
  -> Word8 -- ^ C argument @"uint8_t max"@
  -> IO (Ptr (Sk_maskfilter)) -- ^ C return type: @"sk_maskfilter_t *"@

-- | Function pointer to 'sk_maskfilter_new_clip'
foreign import ccall "&sk_maskfilter_new_clip" p'sk_maskfilter_new_clip ::
  FunPtr (Word8 -> Word8 -> IO (Ptr (Sk_maskfilter)))

{- | C function signature:

@
sk_maskfilter_t *sk_maskfilter_new_shader(sk_shader_t *cshader)
@
-}
foreign import ccall "sk_maskfilter_new_shader" sk_maskfilter_new_shader ::
  Ptr (Sk_shader) -- ^ C argument @"sk_shader_t * cshader"@
  -> IO (Ptr (Sk_maskfilter)) -- ^ C return type: @"sk_maskfilter_t *"@

-- | Function pointer to 'sk_maskfilter_new_shader'
foreign import ccall "&sk_maskfilter_new_shader" p'sk_maskfilter_new_shader ::
  FunPtr (Ptr (Sk_shader) -> IO (Ptr (Sk_maskfilter)))

{- | C function signature:

@
void sk_colorspace_ref(sk_colorspace_t *colorspace)
@
-}
foreign import ccall "sk_colorspace_ref" sk_colorspace_ref ::
  Ptr (Sk_colorspace) -- ^ C argument @"sk_colorspace_t * colorspace"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_colorspace_ref'
foreign import ccall "&sk_colorspace_ref" p'sk_colorspace_ref ::
  FunPtr (Ptr (Sk_colorspace) -> IO (()))

{- | C function signature:

@
void sk_colorspace_unref(sk_colorspace_t *colorspace)
@
-}
foreign import ccall "sk_colorspace_unref" sk_colorspace_unref ::
  Ptr (Sk_colorspace) -- ^ C argument @"sk_colorspace_t * colorspace"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_colorspace_unref'
foreign import ccall "&sk_colorspace_unref" p'sk_colorspace_unref ::
  FunPtr (Ptr (Sk_colorspace) -> IO (()))

{- | C function signature:

@
sk_colorspace_t *sk_colorspace_new_srgb(void)
@
-}
foreign import ccall "sk_colorspace_new_srgb" sk_colorspace_new_srgb ::
  IO (Ptr (Sk_colorspace)) -- ^ C return type: @"sk_colorspace_t *"@

-- | Function pointer to 'sk_colorspace_new_srgb'
foreign import ccall "&sk_colorspace_new_srgb" p'sk_colorspace_new_srgb ::
  FunPtr (IO (Ptr (Sk_colorspace)))

{- | C function signature:

@
sk_colorspace_t *sk_colorspace_new_srgb_linear(void)
@
-}
foreign import ccall "sk_colorspace_new_srgb_linear" sk_colorspace_new_srgb_linear ::
  IO (Ptr (Sk_colorspace)) -- ^ C return type: @"sk_colorspace_t *"@

-- | Function pointer to 'sk_colorspace_new_srgb_linear'
foreign import ccall "&sk_colorspace_new_srgb_linear" p'sk_colorspace_new_srgb_linear ::
  FunPtr (IO (Ptr (Sk_colorspace)))

{- | C function signature:

@
sk_colorspace_t *sk_colorspace_new_rgb(const sk_colorspace_transfer_fn_t *transferFn, const sk_colorspace_xyz_t *toXYZD50)
@
-}
foreign import ccall "sk_colorspace_new_rgb" sk_colorspace_new_rgb ::
  Ptr (Sk_colorspace_transfer_fn) -- ^ C argument @"const sk_colorspace_transfer_fn_t * transferFn"@
  -> Ptr (Sk_colorspace_xyz) -- ^ C argument @"const sk_colorspace_xyz_t * toXYZD50"@
  -> IO (Ptr (Sk_colorspace)) -- ^ C return type: @"sk_colorspace_t *"@

-- | Function pointer to 'sk_colorspace_new_rgb'
foreign import ccall "&sk_colorspace_new_rgb" p'sk_colorspace_new_rgb ::
  FunPtr (Ptr (Sk_colorspace_transfer_fn) -> Ptr (Sk_colorspace_xyz) -> IO (Ptr (Sk_colorspace)))

{- | C function signature:

@
sk_colorspace_t *sk_colorspace_new_icc(const sk_colorspace_icc_profile_t *profile)
@
-}
foreign import ccall "sk_colorspace_new_icc" sk_colorspace_new_icc ::
  Ptr (Sk_colorspace_icc_profile) -- ^ C argument @"const sk_colorspace_icc_profile_t * profile"@
  -> IO (Ptr (Sk_colorspace)) -- ^ C return type: @"sk_colorspace_t *"@

-- | Function pointer to 'sk_colorspace_new_icc'
foreign import ccall "&sk_colorspace_new_icc" p'sk_colorspace_new_icc ::
  FunPtr (Ptr (Sk_colorspace_icc_profile) -> IO (Ptr (Sk_colorspace)))

{- | C function signature:

@
void sk_colorspace_to_profile(const sk_colorspace_t *colorspace, sk_colorspace_icc_profile_t *profile)
@
-}
foreign import ccall "sk_colorspace_to_profile" sk_colorspace_to_profile ::
  Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * colorspace"@
  -> Ptr (Sk_colorspace_icc_profile) -- ^ C argument @"sk_colorspace_icc_profile_t * profile"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_colorspace_to_profile'
foreign import ccall "&sk_colorspace_to_profile" p'sk_colorspace_to_profile ::
  FunPtr (Ptr (Sk_colorspace) -> Ptr (Sk_colorspace_icc_profile) -> IO (()))

{- | C function signature:

@
_Bool sk_colorspace_gamma_close_to_srgb(const sk_colorspace_t *colorspace)
@
-}
foreign import ccall "sk_colorspace_gamma_close_to_srgb" sk_colorspace_gamma_close_to_srgb ::
  Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * colorspace"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_colorspace_gamma_close_to_srgb'
foreign import ccall "&sk_colorspace_gamma_close_to_srgb" p'sk_colorspace_gamma_close_to_srgb ::
  FunPtr (Ptr (Sk_colorspace) -> IO (CBool))

{- | C function signature:

@
_Bool sk_colorspace_gamma_is_linear(const sk_colorspace_t *colorspace)
@
-}
foreign import ccall "sk_colorspace_gamma_is_linear" sk_colorspace_gamma_is_linear ::
  Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * colorspace"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_colorspace_gamma_is_linear'
foreign import ccall "&sk_colorspace_gamma_is_linear" p'sk_colorspace_gamma_is_linear ::
  FunPtr (Ptr (Sk_colorspace) -> IO (CBool))

{- | C function signature:

@
_Bool sk_colorspace_is_numerical_transfer_fn(const sk_colorspace_t *colorspace, sk_colorspace_transfer_fn_t *transferFn)
@
-}
foreign import ccall "sk_colorspace_is_numerical_transfer_fn" sk_colorspace_is_numerical_transfer_fn ::
  Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * colorspace"@
  -> Ptr (Sk_colorspace_transfer_fn) -- ^ C argument @"sk_colorspace_transfer_fn_t * transferFn"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_colorspace_is_numerical_transfer_fn'
foreign import ccall "&sk_colorspace_is_numerical_transfer_fn" p'sk_colorspace_is_numerical_transfer_fn ::
  FunPtr (Ptr (Sk_colorspace) -> Ptr (Sk_colorspace_transfer_fn) -> IO (CBool))

{- | C function signature:

@
_Bool sk_colorspace_to_xyzd50(const sk_colorspace_t *colorspace, sk_colorspace_xyz_t *toXYZD50)
@
-}
foreign import ccall "sk_colorspace_to_xyzd50" sk_colorspace_to_xyzd50 ::
  Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * colorspace"@
  -> Ptr (Sk_colorspace_xyz) -- ^ C argument @"sk_colorspace_xyz_t * toXYZD50"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_colorspace_to_xyzd50'
foreign import ccall "&sk_colorspace_to_xyzd50" p'sk_colorspace_to_xyzd50 ::
  FunPtr (Ptr (Sk_colorspace) -> Ptr (Sk_colorspace_xyz) -> IO (CBool))

{- | C function signature:

@
sk_colorspace_t *sk_colorspace_make_linear_gamma(const sk_colorspace_t *colorspace)
@
-}
foreign import ccall "sk_colorspace_make_linear_gamma" sk_colorspace_make_linear_gamma ::
  Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * colorspace"@
  -> IO (Ptr (Sk_colorspace)) -- ^ C return type: @"sk_colorspace_t *"@

-- | Function pointer to 'sk_colorspace_make_linear_gamma'
foreign import ccall "&sk_colorspace_make_linear_gamma" p'sk_colorspace_make_linear_gamma ::
  FunPtr (Ptr (Sk_colorspace) -> IO (Ptr (Sk_colorspace)))

{- | C function signature:

@
sk_colorspace_t *sk_colorspace_make_srgb_gamma(const sk_colorspace_t *colorspace)
@
-}
foreign import ccall "sk_colorspace_make_srgb_gamma" sk_colorspace_make_srgb_gamma ::
  Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * colorspace"@
  -> IO (Ptr (Sk_colorspace)) -- ^ C return type: @"sk_colorspace_t *"@

-- | Function pointer to 'sk_colorspace_make_srgb_gamma'
foreign import ccall "&sk_colorspace_make_srgb_gamma" p'sk_colorspace_make_srgb_gamma ::
  FunPtr (Ptr (Sk_colorspace) -> IO (Ptr (Sk_colorspace)))

{- | C function signature:

@
_Bool sk_colorspace_is_srgb(const sk_colorspace_t *colorspace)
@
-}
foreign import ccall "sk_colorspace_is_srgb" sk_colorspace_is_srgb ::
  Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * colorspace"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_colorspace_is_srgb'
foreign import ccall "&sk_colorspace_is_srgb" p'sk_colorspace_is_srgb ::
  FunPtr (Ptr (Sk_colorspace) -> IO (CBool))

{- | C function signature:

@
_Bool sk_colorspace_equals(const sk_colorspace_t *src, const sk_colorspace_t *dst)
@
-}
foreign import ccall "sk_colorspace_equals" sk_colorspace_equals ::
  Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * src"@
  -> Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * dst"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_colorspace_equals'
foreign import ccall "&sk_colorspace_equals" p'sk_colorspace_equals ::
  FunPtr (Ptr (Sk_colorspace) -> Ptr (Sk_colorspace) -> IO (CBool))

{- | C function signature:

@
void sk_colorspace_transfer_fn_named_srgb(sk_colorspace_transfer_fn_t *transferFn)
@
-}
foreign import ccall "sk_colorspace_transfer_fn_named_srgb" sk_colorspace_transfer_fn_named_srgb ::
  Ptr (Sk_colorspace_transfer_fn) -- ^ C argument @"sk_colorspace_transfer_fn_t * transferFn"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_colorspace_transfer_fn_named_srgb'
foreign import ccall "&sk_colorspace_transfer_fn_named_srgb" p'sk_colorspace_transfer_fn_named_srgb ::
  FunPtr (Ptr (Sk_colorspace_transfer_fn) -> IO (()))

{- | C function signature:

@
void sk_colorspace_transfer_fn_named_2dot2(sk_colorspace_transfer_fn_t *transferFn)
@
-}
foreign import ccall "sk_colorspace_transfer_fn_named_2dot2" sk_colorspace_transfer_fn_named_2dot2 ::
  Ptr (Sk_colorspace_transfer_fn) -- ^ C argument @"sk_colorspace_transfer_fn_t * transferFn"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_colorspace_transfer_fn_named_2dot2'
foreign import ccall "&sk_colorspace_transfer_fn_named_2dot2" p'sk_colorspace_transfer_fn_named_2dot2 ::
  FunPtr (Ptr (Sk_colorspace_transfer_fn) -> IO (()))

{- | C function signature:

@
void sk_colorspace_transfer_fn_named_linear(sk_colorspace_transfer_fn_t *transferFn)
@
-}
foreign import ccall "sk_colorspace_transfer_fn_named_linear" sk_colorspace_transfer_fn_named_linear ::
  Ptr (Sk_colorspace_transfer_fn) -- ^ C argument @"sk_colorspace_transfer_fn_t * transferFn"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_colorspace_transfer_fn_named_linear'
foreign import ccall "&sk_colorspace_transfer_fn_named_linear" p'sk_colorspace_transfer_fn_named_linear ::
  FunPtr (Ptr (Sk_colorspace_transfer_fn) -> IO (()))

{- | C function signature:

@
void sk_colorspace_transfer_fn_named_rec2020(sk_colorspace_transfer_fn_t *transferFn)
@
-}
foreign import ccall "sk_colorspace_transfer_fn_named_rec2020" sk_colorspace_transfer_fn_named_rec2020 ::
  Ptr (Sk_colorspace_transfer_fn) -- ^ C argument @"sk_colorspace_transfer_fn_t * transferFn"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_colorspace_transfer_fn_named_rec2020'
foreign import ccall "&sk_colorspace_transfer_fn_named_rec2020" p'sk_colorspace_transfer_fn_named_rec2020 ::
  FunPtr (Ptr (Sk_colorspace_transfer_fn) -> IO (()))

{- | C function signature:

@
void sk_colorspace_transfer_fn_named_pq(sk_colorspace_transfer_fn_t *transferFn)
@
-}
foreign import ccall "sk_colorspace_transfer_fn_named_pq" sk_colorspace_transfer_fn_named_pq ::
  Ptr (Sk_colorspace_transfer_fn) -- ^ C argument @"sk_colorspace_transfer_fn_t * transferFn"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_colorspace_transfer_fn_named_pq'
foreign import ccall "&sk_colorspace_transfer_fn_named_pq" p'sk_colorspace_transfer_fn_named_pq ::
  FunPtr (Ptr (Sk_colorspace_transfer_fn) -> IO (()))

{- | C function signature:

@
void sk_colorspace_transfer_fn_named_hlg(sk_colorspace_transfer_fn_t *transferFn)
@
-}
foreign import ccall "sk_colorspace_transfer_fn_named_hlg" sk_colorspace_transfer_fn_named_hlg ::
  Ptr (Sk_colorspace_transfer_fn) -- ^ C argument @"sk_colorspace_transfer_fn_t * transferFn"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_colorspace_transfer_fn_named_hlg'
foreign import ccall "&sk_colorspace_transfer_fn_named_hlg" p'sk_colorspace_transfer_fn_named_hlg ::
  FunPtr (Ptr (Sk_colorspace_transfer_fn) -> IO (()))

{- | C function signature:

@
float sk_colorspace_transfer_fn_eval(const sk_colorspace_transfer_fn_t *transferFn, float x)
@
-}
foreign import ccall "sk_colorspace_transfer_fn_eval" sk_colorspace_transfer_fn_eval ::
  Ptr (Sk_colorspace_transfer_fn) -- ^ C argument @"const sk_colorspace_transfer_fn_t * transferFn"@
  -> CFloat -- ^ C argument @"float x"@
  -> IO (CFloat) -- ^ C return type: @"float"@

-- | Function pointer to 'sk_colorspace_transfer_fn_eval'
foreign import ccall "&sk_colorspace_transfer_fn_eval" p'sk_colorspace_transfer_fn_eval ::
  FunPtr (Ptr (Sk_colorspace_transfer_fn) -> CFloat -> IO (CFloat))

{- | C function signature:

@
_Bool sk_colorspace_transfer_fn_invert(const sk_colorspace_transfer_fn_t *src, sk_colorspace_transfer_fn_t *dst)
@
-}
foreign import ccall "sk_colorspace_transfer_fn_invert" sk_colorspace_transfer_fn_invert ::
  Ptr (Sk_colorspace_transfer_fn) -- ^ C argument @"const sk_colorspace_transfer_fn_t * src"@
  -> Ptr (Sk_colorspace_transfer_fn) -- ^ C argument @"sk_colorspace_transfer_fn_t * dst"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_colorspace_transfer_fn_invert'
foreign import ccall "&sk_colorspace_transfer_fn_invert" p'sk_colorspace_transfer_fn_invert ::
  FunPtr (Ptr (Sk_colorspace_transfer_fn) -> Ptr (Sk_colorspace_transfer_fn) -> IO (CBool))

{- | C function signature:

@
_Bool sk_colorspace_primaries_to_xyzd50(const sk_colorspace_primaries_t *primaries, sk_colorspace_xyz_t *toXYZD50)
@
-}
foreign import ccall "sk_colorspace_primaries_to_xyzd50" sk_colorspace_primaries_to_xyzd50 ::
  Ptr (Sk_colorspace_primaries) -- ^ C argument @"const sk_colorspace_primaries_t * primaries"@
  -> Ptr (Sk_colorspace_xyz) -- ^ C argument @"sk_colorspace_xyz_t * toXYZD50"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_colorspace_primaries_to_xyzd50'
foreign import ccall "&sk_colorspace_primaries_to_xyzd50" p'sk_colorspace_primaries_to_xyzd50 ::
  FunPtr (Ptr (Sk_colorspace_primaries) -> Ptr (Sk_colorspace_xyz) -> IO (CBool))

{- | C function signature:

@
void sk_colorspace_xyz_named_srgb(sk_colorspace_xyz_t *xyz)
@
-}
foreign import ccall "sk_colorspace_xyz_named_srgb" sk_colorspace_xyz_named_srgb ::
  Ptr (Sk_colorspace_xyz) -- ^ C argument @"sk_colorspace_xyz_t * xyz"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_colorspace_xyz_named_srgb'
foreign import ccall "&sk_colorspace_xyz_named_srgb" p'sk_colorspace_xyz_named_srgb ::
  FunPtr (Ptr (Sk_colorspace_xyz) -> IO (()))

{- | C function signature:

@
void sk_colorspace_xyz_named_adobe_rgb(sk_colorspace_xyz_t *xyz)
@
-}
foreign import ccall "sk_colorspace_xyz_named_adobe_rgb" sk_colorspace_xyz_named_adobe_rgb ::
  Ptr (Sk_colorspace_xyz) -- ^ C argument @"sk_colorspace_xyz_t * xyz"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_colorspace_xyz_named_adobe_rgb'
foreign import ccall "&sk_colorspace_xyz_named_adobe_rgb" p'sk_colorspace_xyz_named_adobe_rgb ::
  FunPtr (Ptr (Sk_colorspace_xyz) -> IO (()))

{- | C function signature:

@
void sk_colorspace_xyz_named_display_p3(sk_colorspace_xyz_t *xyz)
@
-}
foreign import ccall "sk_colorspace_xyz_named_display_p3" sk_colorspace_xyz_named_display_p3 ::
  Ptr (Sk_colorspace_xyz) -- ^ C argument @"sk_colorspace_xyz_t * xyz"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_colorspace_xyz_named_display_p3'
foreign import ccall "&sk_colorspace_xyz_named_display_p3" p'sk_colorspace_xyz_named_display_p3 ::
  FunPtr (Ptr (Sk_colorspace_xyz) -> IO (()))

{- | C function signature:

@
void sk_colorspace_xyz_named_rec2020(sk_colorspace_xyz_t *xyz)
@
-}
foreign import ccall "sk_colorspace_xyz_named_rec2020" sk_colorspace_xyz_named_rec2020 ::
  Ptr (Sk_colorspace_xyz) -- ^ C argument @"sk_colorspace_xyz_t * xyz"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_colorspace_xyz_named_rec2020'
foreign import ccall "&sk_colorspace_xyz_named_rec2020" p'sk_colorspace_xyz_named_rec2020 ::
  FunPtr (Ptr (Sk_colorspace_xyz) -> IO (()))

{- | C function signature:

@
void sk_colorspace_xyz_named_xyz(sk_colorspace_xyz_t *xyz)
@
-}
foreign import ccall "sk_colorspace_xyz_named_xyz" sk_colorspace_xyz_named_xyz ::
  Ptr (Sk_colorspace_xyz) -- ^ C argument @"sk_colorspace_xyz_t * xyz"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_colorspace_xyz_named_xyz'
foreign import ccall "&sk_colorspace_xyz_named_xyz" p'sk_colorspace_xyz_named_xyz ::
  FunPtr (Ptr (Sk_colorspace_xyz) -> IO (()))

{- | C function signature:

@
_Bool sk_colorspace_xyz_invert(const sk_colorspace_xyz_t *src, sk_colorspace_xyz_t *dst)
@
-}
foreign import ccall "sk_colorspace_xyz_invert" sk_colorspace_xyz_invert ::
  Ptr (Sk_colorspace_xyz) -- ^ C argument @"const sk_colorspace_xyz_t * src"@
  -> Ptr (Sk_colorspace_xyz) -- ^ C argument @"sk_colorspace_xyz_t * dst"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_colorspace_xyz_invert'
foreign import ccall "&sk_colorspace_xyz_invert" p'sk_colorspace_xyz_invert ::
  FunPtr (Ptr (Sk_colorspace_xyz) -> Ptr (Sk_colorspace_xyz) -> IO (CBool))

{- | C function signature:

@
void sk_colorspace_xyz_concat(const sk_colorspace_xyz_t *a, const sk_colorspace_xyz_t *b, sk_colorspace_xyz_t *result)
@
-}
foreign import ccall "sk_colorspace_xyz_concat" sk_colorspace_xyz_concat ::
  Ptr (Sk_colorspace_xyz) -- ^ C argument @"const sk_colorspace_xyz_t * a"@
  -> Ptr (Sk_colorspace_xyz) -- ^ C argument @"const sk_colorspace_xyz_t * b"@
  -> Ptr (Sk_colorspace_xyz) -- ^ C argument @"sk_colorspace_xyz_t * result"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_colorspace_xyz_concat'
foreign import ccall "&sk_colorspace_xyz_concat" p'sk_colorspace_xyz_concat ::
  FunPtr (Ptr (Sk_colorspace_xyz) -> Ptr (Sk_colorspace_xyz) -> Ptr (Sk_colorspace_xyz) -> IO (()))

{- | C function signature:

@
void sk_colorspace_icc_profile_delete(sk_colorspace_icc_profile_t *profile)
@
-}
foreign import ccall "sk_colorspace_icc_profile_delete" sk_colorspace_icc_profile_delete ::
  Ptr (Sk_colorspace_icc_profile) -- ^ C argument @"sk_colorspace_icc_profile_t * profile"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_colorspace_icc_profile_delete'
foreign import ccall "&sk_colorspace_icc_profile_delete" p'sk_colorspace_icc_profile_delete ::
  FunPtr (Ptr (Sk_colorspace_icc_profile) -> IO (()))

{- | C function signature:

@
sk_colorspace_icc_profile_t *sk_colorspace_icc_profile_new(void)
@
-}
foreign import ccall "sk_colorspace_icc_profile_new" sk_colorspace_icc_profile_new ::
  IO (Ptr (Sk_colorspace_icc_profile)) -- ^ C return type: @"sk_colorspace_icc_profile_t *"@

-- | Function pointer to 'sk_colorspace_icc_profile_new'
foreign import ccall "&sk_colorspace_icc_profile_new" p'sk_colorspace_icc_profile_new ::
  FunPtr (IO (Ptr (Sk_colorspace_icc_profile)))

{- | C function signature:

@
_Bool sk_colorspace_icc_profile_parse(const void *buffer, size_t length, sk_colorspace_icc_profile_t *profile)
@
-}
foreign import ccall "sk_colorspace_icc_profile_parse" sk_colorspace_icc_profile_parse ::
  Ptr (()) -- ^ C argument @"const void * buffer"@
  -> CSize -- ^ C argument @"size_t length"@
  -> Ptr (Sk_colorspace_icc_profile) -- ^ C argument @"sk_colorspace_icc_profile_t * profile"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_colorspace_icc_profile_parse'
foreign import ccall "&sk_colorspace_icc_profile_parse" p'sk_colorspace_icc_profile_parse ::
  FunPtr (Ptr (()) -> CSize -> Ptr (Sk_colorspace_icc_profile) -> IO (CBool))

{- | C function signature:

@
const uint8_t *sk_colorspace_icc_profile_get_buffer(const sk_colorspace_icc_profile_t *profile, uint32_t *size)
@
-}
foreign import ccall "sk_colorspace_icc_profile_get_buffer" sk_colorspace_icc_profile_get_buffer ::
  Ptr (Sk_colorspace_icc_profile) -- ^ C argument @"const sk_colorspace_icc_profile_t * profile"@
  -> Ptr (Word32) -- ^ C argument @"uint32_t * size"@
  -> IO (Ptr (Word8)) -- ^ C return type: @"const uint8_t *"@

-- | Function pointer to 'sk_colorspace_icc_profile_get_buffer'
foreign import ccall "&sk_colorspace_icc_profile_get_buffer" p'sk_colorspace_icc_profile_get_buffer ::
  FunPtr (Ptr (Sk_colorspace_icc_profile) -> Ptr (Word32) -> IO (Ptr (Word8)))

{- | C function signature:

@
_Bool sk_colorspace_icc_profile_get_to_xyzd50(const sk_colorspace_icc_profile_t *profile, sk_colorspace_xyz_t *toXYZD50)
@
-}
foreign import ccall "sk_colorspace_icc_profile_get_to_xyzd50" sk_colorspace_icc_profile_get_to_xyzd50 ::
  Ptr (Sk_colorspace_icc_profile) -- ^ C argument @"const sk_colorspace_icc_profile_t * profile"@
  -> Ptr (Sk_colorspace_xyz) -- ^ C argument @"sk_colorspace_xyz_t * toXYZD50"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_colorspace_icc_profile_get_to_xyzd50'
foreign import ccall "&sk_colorspace_icc_profile_get_to_xyzd50" p'sk_colorspace_icc_profile_get_to_xyzd50 ::
  FunPtr (Ptr (Sk_colorspace_icc_profile) -> Ptr (Sk_colorspace_xyz) -> IO (CBool))

{- | C function signature:

@
sk_color_t sk_color4f_to_color(const sk_color4f_t *color4f)
@
-}
foreign import ccall "sk_color4f_to_color" sk_color4f_to_color ::
  Ptr (Sk_color4f) -- ^ C argument @"const sk_color4f_t * color4f"@
  -> IO (Sk_color) -- ^ C return type: @"sk_color_t"@

-- | Function pointer to 'sk_color4f_to_color'
foreign import ccall "&sk_color4f_to_color" p'sk_color4f_to_color ::
  FunPtr (Ptr (Sk_color4f) -> IO (Sk_color))

{- | C function signature:

@
void sk_color4f_from_color(sk_color_t color, sk_color4f_t *color4f)
@
-}
foreign import ccall "sk_color4f_from_color" sk_color4f_from_color ::
  Sk_color -- ^ C argument @"sk_color_t color"@
  -> Ptr (Sk_color4f) -- ^ C argument @"sk_color4f_t * color4f"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_color4f_from_color'
foreign import ccall "&sk_color4f_from_color" p'sk_color4f_from_color ::
  FunPtr (Sk_color -> Ptr (Sk_color4f) -> IO (()))

{- | C function signature:

@
void sk_imagefilter_unref(sk_imagefilter_t *cfilter)
@
-}
foreign import ccall "sk_imagefilter_unref" sk_imagefilter_unref ::
  Ptr (Sk_imagefilter) -- ^ C argument @"sk_imagefilter_t * cfilter"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_imagefilter_unref'
foreign import ccall "&sk_imagefilter_unref" p'sk_imagefilter_unref ::
  FunPtr (Ptr (Sk_imagefilter) -> IO (()))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_arithmetic(float k1, float k2, float k3, float k4, _Bool enforcePMColor, const sk_imagefilter_t *background, const sk_imagefilter_t *foreground, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_arithmetic" sk_imagefilter_new_arithmetic ::
  CFloat -- ^ C argument @"float k1"@
  -> CFloat -- ^ C argument @"float k2"@
  -> CFloat -- ^ C argument @"float k3"@
  -> CFloat -- ^ C argument @"float k4"@
  -> CBool -- ^ C argument @"_Bool enforcePMColor"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * background"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * foreground"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_arithmetic'
foreign import ccall "&sk_imagefilter_new_arithmetic" p'sk_imagefilter_new_arithmetic ::
  FunPtr (CFloat -> CFloat -> CFloat -> CFloat -> CBool -> Ptr (Sk_imagefilter) -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_blend(sk_blendmode_t mode, const sk_imagefilter_t *background, const sk_imagefilter_t *foreground, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_blend" sk_imagefilter_new_blend ::
  Sk_blendmode -- ^ C argument @"sk_blendmode_t mode"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * background"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * foreground"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_blend'
foreign import ccall "&sk_imagefilter_new_blend" p'sk_imagefilter_new_blend ::
  FunPtr (Sk_blendmode -> Ptr (Sk_imagefilter) -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_blender(sk_blender_t *blender, const sk_imagefilter_t *background, const sk_imagefilter_t *foreground, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_blender" sk_imagefilter_new_blender ::
  Ptr (Sk_blender) -- ^ C argument @"sk_blender_t * blender"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * background"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * foreground"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_blender'
foreign import ccall "&sk_imagefilter_new_blender" p'sk_imagefilter_new_blender ::
  FunPtr (Ptr (Sk_blender) -> Ptr (Sk_imagefilter) -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_blur(float sigmaX, float sigmaY, sk_shader_tilemode_t tileMode, const sk_imagefilter_t *input, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_blur" sk_imagefilter_new_blur ::
  CFloat -- ^ C argument @"float sigmaX"@
  -> CFloat -- ^ C argument @"float sigmaY"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t tileMode"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * input"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_blur'
foreign import ccall "&sk_imagefilter_new_blur" p'sk_imagefilter_new_blur ::
  FunPtr (CFloat -> CFloat -> Sk_shader_tilemode -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_color_filter(sk_colorfilter_t *cf, const sk_imagefilter_t *input, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_color_filter" sk_imagefilter_new_color_filter ::
  Ptr (Sk_colorfilter) -- ^ C argument @"sk_colorfilter_t * cf"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * input"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_color_filter'
foreign import ccall "&sk_imagefilter_new_color_filter" p'sk_imagefilter_new_color_filter ::
  FunPtr (Ptr (Sk_colorfilter) -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_compose(const sk_imagefilter_t *outer, const sk_imagefilter_t *inner)
@
-}
foreign import ccall "sk_imagefilter_new_compose" sk_imagefilter_new_compose ::
  Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * outer"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * inner"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_compose'
foreign import ccall "&sk_imagefilter_new_compose" p'sk_imagefilter_new_compose ::
  FunPtr (Ptr (Sk_imagefilter) -> Ptr (Sk_imagefilter) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_displacement_map_effect(sk_color_channel_t xChannelSelector, sk_color_channel_t yChannelSelector, float scale, const sk_imagefilter_t *displacement, const sk_imagefilter_t *color, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_displacement_map_effect" sk_imagefilter_new_displacement_map_effect ::
  Sk_color_channel -- ^ C argument @"sk_color_channel_t xChannelSelector"@
  -> Sk_color_channel -- ^ C argument @"sk_color_channel_t yChannelSelector"@
  -> CFloat -- ^ C argument @"float scale"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * displacement"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * color"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_displacement_map_effect'
foreign import ccall "&sk_imagefilter_new_displacement_map_effect" p'sk_imagefilter_new_displacement_map_effect ::
  FunPtr (Sk_color_channel -> Sk_color_channel -> CFloat -> Ptr (Sk_imagefilter) -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_drop_shadow(float dx, float dy, float sigmaX, float sigmaY, sk_color_t color, const sk_imagefilter_t *input, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_drop_shadow" sk_imagefilter_new_drop_shadow ::
  CFloat -- ^ C argument @"float dx"@
  -> CFloat -- ^ C argument @"float dy"@
  -> CFloat -- ^ C argument @"float sigmaX"@
  -> CFloat -- ^ C argument @"float sigmaY"@
  -> Sk_color -- ^ C argument @"sk_color_t color"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * input"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_drop_shadow'
foreign import ccall "&sk_imagefilter_new_drop_shadow" p'sk_imagefilter_new_drop_shadow ::
  FunPtr (CFloat -> CFloat -> CFloat -> CFloat -> Sk_color -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_drop_shadow_only(float dx, float dy, float sigmaX, float sigmaY, sk_color_t color, const sk_imagefilter_t *input, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_drop_shadow_only" sk_imagefilter_new_drop_shadow_only ::
  CFloat -- ^ C argument @"float dx"@
  -> CFloat -- ^ C argument @"float dy"@
  -> CFloat -- ^ C argument @"float sigmaX"@
  -> CFloat -- ^ C argument @"float sigmaY"@
  -> Sk_color -- ^ C argument @"sk_color_t color"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * input"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_drop_shadow_only'
foreign import ccall "&sk_imagefilter_new_drop_shadow_only" p'sk_imagefilter_new_drop_shadow_only ::
  FunPtr (CFloat -> CFloat -> CFloat -> CFloat -> Sk_color -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_image(sk_image_t *image, const sk_rect_t *srcRect, const sk_rect_t *dstRect, const sk_sampling_options_t *sampling)
@
-}
foreign import ccall "sk_imagefilter_new_image" sk_imagefilter_new_image ::
  Ptr (Sk_image) -- ^ C argument @"sk_image_t * image"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * srcRect"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * dstRect"@
  -> Ptr (Sk_sampling_options) -- ^ C argument @"const sk_sampling_options_t * sampling"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_image'
foreign import ccall "&sk_imagefilter_new_image" p'sk_imagefilter_new_image ::
  FunPtr (Ptr (Sk_image) -> Ptr (Sk_rect) -> Ptr (Sk_rect) -> Ptr (Sk_sampling_options) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_image_simple(sk_image_t *image, const sk_sampling_options_t *sampling)
@
-}
foreign import ccall "sk_imagefilter_new_image_simple" sk_imagefilter_new_image_simple ::
  Ptr (Sk_image) -- ^ C argument @"sk_image_t * image"@
  -> Ptr (Sk_sampling_options) -- ^ C argument @"const sk_sampling_options_t * sampling"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_image_simple'
foreign import ccall "&sk_imagefilter_new_image_simple" p'sk_imagefilter_new_image_simple ::
  FunPtr (Ptr (Sk_image) -> Ptr (Sk_sampling_options) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_magnifier(const sk_rect_t *lensBounds, float zoomAmount, float inset, const sk_sampling_options_t *sampling, const sk_imagefilter_t *input, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_magnifier" sk_imagefilter_new_magnifier ::
  Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * lensBounds"@
  -> CFloat -- ^ C argument @"float zoomAmount"@
  -> CFloat -- ^ C argument @"float inset"@
  -> Ptr (Sk_sampling_options) -- ^ C argument @"const sk_sampling_options_t * sampling"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * input"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_magnifier'
foreign import ccall "&sk_imagefilter_new_magnifier" p'sk_imagefilter_new_magnifier ::
  FunPtr (Ptr (Sk_rect) -> CFloat -> CFloat -> Ptr (Sk_sampling_options) -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_matrix_convolution(const sk_isize_t *kernelSize, const float kernel[], float gain, float bias, const sk_ipoint_t *kernelOffset, sk_shader_tilemode_t ctileMode, _Bool convolveAlpha, const sk_imagefilter_t *input, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_matrix_convolution" sk_imagefilter_new_matrix_convolution ::
  Ptr (Sk_isize) -- ^ C argument @"const sk_isize_t * kernelSize"@
  -> Ptr (CFloat) -- ^ C argument @"const float [] kernel"@
  -> CFloat -- ^ C argument @"float gain"@
  -> CFloat -- ^ C argument @"float bias"@
  -> Ptr (Sk_ipoint) -- ^ C argument @"const sk_ipoint_t * kernelOffset"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t ctileMode"@
  -> CBool -- ^ C argument @"_Bool convolveAlpha"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * input"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_matrix_convolution'
foreign import ccall "&sk_imagefilter_new_matrix_convolution" p'sk_imagefilter_new_matrix_convolution ::
  FunPtr (Ptr (Sk_isize) -> Ptr (CFloat) -> CFloat -> CFloat -> Ptr (Sk_ipoint) -> Sk_shader_tilemode -> CBool -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_matrix_transform(const sk_matrix_t *cmatrix, const sk_sampling_options_t *sampling, const sk_imagefilter_t *input)
@
-}
foreign import ccall "sk_imagefilter_new_matrix_transform" sk_imagefilter_new_matrix_transform ::
  Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * cmatrix"@
  -> Ptr (Sk_sampling_options) -- ^ C argument @"const sk_sampling_options_t * sampling"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * input"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_matrix_transform'
foreign import ccall "&sk_imagefilter_new_matrix_transform" p'sk_imagefilter_new_matrix_transform ::
  FunPtr (Ptr (Sk_matrix) -> Ptr (Sk_sampling_options) -> Ptr (Sk_imagefilter) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_merge(const sk_imagefilter_t *cfilters[], int count, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_merge" sk_imagefilter_new_merge ::
  Ptr (Ptr (Sk_imagefilter)) -- ^ C argument @"const sk_imagefilter_t *[] cfilters"@
  -> CInt -- ^ C argument @"int count"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_merge'
foreign import ccall "&sk_imagefilter_new_merge" p'sk_imagefilter_new_merge ::
  FunPtr (Ptr (Ptr (Sk_imagefilter)) -> CInt -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_merge_simple(const sk_imagefilter_t *first, const sk_imagefilter_t *second, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_merge_simple" sk_imagefilter_new_merge_simple ::
  Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * first"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * second"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_merge_simple'
foreign import ccall "&sk_imagefilter_new_merge_simple" p'sk_imagefilter_new_merge_simple ::
  FunPtr (Ptr (Sk_imagefilter) -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_offset(float dx, float dy, const sk_imagefilter_t *input, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_offset" sk_imagefilter_new_offset ::
  CFloat -- ^ C argument @"float dx"@
  -> CFloat -- ^ C argument @"float dy"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * input"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_offset'
foreign import ccall "&sk_imagefilter_new_offset" p'sk_imagefilter_new_offset ::
  FunPtr (CFloat -> CFloat -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_picture(const sk_picture_t *picture)
@
-}
foreign import ccall "sk_imagefilter_new_picture" sk_imagefilter_new_picture ::
  Ptr (Sk_picture) -- ^ C argument @"const sk_picture_t * picture"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_picture'
foreign import ccall "&sk_imagefilter_new_picture" p'sk_imagefilter_new_picture ::
  FunPtr (Ptr (Sk_picture) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_picture_with_rect(const sk_picture_t *picture, const sk_rect_t *targetRect)
@
-}
foreign import ccall "sk_imagefilter_new_picture_with_rect" sk_imagefilter_new_picture_with_rect ::
  Ptr (Sk_picture) -- ^ C argument @"const sk_picture_t * picture"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * targetRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_picture_with_rect'
foreign import ccall "&sk_imagefilter_new_picture_with_rect" p'sk_imagefilter_new_picture_with_rect ::
  FunPtr (Ptr (Sk_picture) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_shader(const sk_shader_t *shader, _Bool dither, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_shader" sk_imagefilter_new_shader ::
  Ptr (Sk_shader) -- ^ C argument @"const sk_shader_t * shader"@
  -> CBool -- ^ C argument @"_Bool dither"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_shader'
foreign import ccall "&sk_imagefilter_new_shader" p'sk_imagefilter_new_shader ::
  FunPtr (Ptr (Sk_shader) -> CBool -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_tile(const sk_rect_t *src, const sk_rect_t *dst, const sk_imagefilter_t *input)
@
-}
foreign import ccall "sk_imagefilter_new_tile" sk_imagefilter_new_tile ::
  Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * src"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * dst"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * input"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_tile'
foreign import ccall "&sk_imagefilter_new_tile" p'sk_imagefilter_new_tile ::
  FunPtr (Ptr (Sk_rect) -> Ptr (Sk_rect) -> Ptr (Sk_imagefilter) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_dilate(float radiusX, float radiusY, const sk_imagefilter_t *input, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_dilate" sk_imagefilter_new_dilate ::
  CFloat -- ^ C argument @"float radiusX"@
  -> CFloat -- ^ C argument @"float radiusY"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * input"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_dilate'
foreign import ccall "&sk_imagefilter_new_dilate" p'sk_imagefilter_new_dilate ::
  FunPtr (CFloat -> CFloat -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_erode(float radiusX, float radiusY, const sk_imagefilter_t *input, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_erode" sk_imagefilter_new_erode ::
  CFloat -- ^ C argument @"float radiusX"@
  -> CFloat -- ^ C argument @"float radiusY"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * input"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_erode'
foreign import ccall "&sk_imagefilter_new_erode" p'sk_imagefilter_new_erode ::
  FunPtr (CFloat -> CFloat -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_distant_lit_diffuse(const sk_point3_t *direction, sk_color_t lightColor, float surfaceScale, float kd, const sk_imagefilter_t *input, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_distant_lit_diffuse" sk_imagefilter_new_distant_lit_diffuse ::
  Ptr (Sk_point3) -- ^ C argument @"const sk_point3_t * direction"@
  -> Sk_color -- ^ C argument @"sk_color_t lightColor"@
  -> CFloat -- ^ C argument @"float surfaceScale"@
  -> CFloat -- ^ C argument @"float kd"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * input"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_distant_lit_diffuse'
foreign import ccall "&sk_imagefilter_new_distant_lit_diffuse" p'sk_imagefilter_new_distant_lit_diffuse ::
  FunPtr (Ptr (Sk_point3) -> Sk_color -> CFloat -> CFloat -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_point_lit_diffuse(const sk_point3_t *location, sk_color_t lightColor, float surfaceScale, float kd, const sk_imagefilter_t *input, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_point_lit_diffuse" sk_imagefilter_new_point_lit_diffuse ::
  Ptr (Sk_point3) -- ^ C argument @"const sk_point3_t * location"@
  -> Sk_color -- ^ C argument @"sk_color_t lightColor"@
  -> CFloat -- ^ C argument @"float surfaceScale"@
  -> CFloat -- ^ C argument @"float kd"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * input"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_point_lit_diffuse'
foreign import ccall "&sk_imagefilter_new_point_lit_diffuse" p'sk_imagefilter_new_point_lit_diffuse ::
  FunPtr (Ptr (Sk_point3) -> Sk_color -> CFloat -> CFloat -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_spot_lit_diffuse(const sk_point3_t *location, const sk_point3_t *target, float specularExponent, float cutoffAngle, sk_color_t lightColor, float surfaceScale, float kd, const sk_imagefilter_t *input, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_spot_lit_diffuse" sk_imagefilter_new_spot_lit_diffuse ::
  Ptr (Sk_point3) -- ^ C argument @"const sk_point3_t * location"@
  -> Ptr (Sk_point3) -- ^ C argument @"const sk_point3_t * target"@
  -> CFloat -- ^ C argument @"float specularExponent"@
  -> CFloat -- ^ C argument @"float cutoffAngle"@
  -> Sk_color -- ^ C argument @"sk_color_t lightColor"@
  -> CFloat -- ^ C argument @"float surfaceScale"@
  -> CFloat -- ^ C argument @"float kd"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * input"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_spot_lit_diffuse'
foreign import ccall "&sk_imagefilter_new_spot_lit_diffuse" p'sk_imagefilter_new_spot_lit_diffuse ::
  FunPtr (Ptr (Sk_point3) -> Ptr (Sk_point3) -> CFloat -> CFloat -> Sk_color -> CFloat -> CFloat -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_distant_lit_specular(const sk_point3_t *direction, sk_color_t lightColor, float surfaceScale, float ks, float shininess, const sk_imagefilter_t *input, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_distant_lit_specular" sk_imagefilter_new_distant_lit_specular ::
  Ptr (Sk_point3) -- ^ C argument @"const sk_point3_t * direction"@
  -> Sk_color -- ^ C argument @"sk_color_t lightColor"@
  -> CFloat -- ^ C argument @"float surfaceScale"@
  -> CFloat -- ^ C argument @"float ks"@
  -> CFloat -- ^ C argument @"float shininess"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * input"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_distant_lit_specular'
foreign import ccall "&sk_imagefilter_new_distant_lit_specular" p'sk_imagefilter_new_distant_lit_specular ::
  FunPtr (Ptr (Sk_point3) -> Sk_color -> CFloat -> CFloat -> CFloat -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_point_lit_specular(const sk_point3_t *location, sk_color_t lightColor, float surfaceScale, float ks, float shininess, const sk_imagefilter_t *input, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_point_lit_specular" sk_imagefilter_new_point_lit_specular ::
  Ptr (Sk_point3) -- ^ C argument @"const sk_point3_t * location"@
  -> Sk_color -- ^ C argument @"sk_color_t lightColor"@
  -> CFloat -- ^ C argument @"float surfaceScale"@
  -> CFloat -- ^ C argument @"float ks"@
  -> CFloat -- ^ C argument @"float shininess"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * input"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_point_lit_specular'
foreign import ccall "&sk_imagefilter_new_point_lit_specular" p'sk_imagefilter_new_point_lit_specular ::
  FunPtr (Ptr (Sk_point3) -> Sk_color -> CFloat -> CFloat -> CFloat -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_imagefilter_t *sk_imagefilter_new_spot_lit_specular(const sk_point3_t *location, const sk_point3_t *target, float specularExponent, float cutoffAngle, sk_color_t lightColor, float surfaceScale, float ks, float shininess, const sk_imagefilter_t *input, const sk_rect_t *cropRect)
@
-}
foreign import ccall "sk_imagefilter_new_spot_lit_specular" sk_imagefilter_new_spot_lit_specular ::
  Ptr (Sk_point3) -- ^ C argument @"const sk_point3_t * location"@
  -> Ptr (Sk_point3) -- ^ C argument @"const sk_point3_t * target"@
  -> CFloat -- ^ C argument @"float specularExponent"@
  -> CFloat -- ^ C argument @"float cutoffAngle"@
  -> Sk_color -- ^ C argument @"sk_color_t lightColor"@
  -> CFloat -- ^ C argument @"float surfaceScale"@
  -> CFloat -- ^ C argument @"float ks"@
  -> CFloat -- ^ C argument @"float shininess"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * input"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cropRect"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_imagefilter_new_spot_lit_specular'
foreign import ccall "&sk_imagefilter_new_spot_lit_specular" p'sk_imagefilter_new_spot_lit_specular ::
  FunPtr (Ptr (Sk_point3) -> Ptr (Sk_point3) -> CFloat -> CFloat -> Sk_color -> CFloat -> CFloat -> CFloat -> Ptr (Sk_imagefilter) -> Ptr (Sk_rect) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
void sk_bitmap_destructor(sk_bitmap_t *cbitmap)
@
-}
foreign import ccall "sk_bitmap_destructor" sk_bitmap_destructor ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_bitmap_destructor'
foreign import ccall "&sk_bitmap_destructor" p'sk_bitmap_destructor ::
  FunPtr (Ptr (Sk_bitmap) -> IO (()))

{- | C function signature:

@
sk_bitmap_t *sk_bitmap_new(void)
@
-}
foreign import ccall "sk_bitmap_new" sk_bitmap_new ::
  IO (Ptr (Sk_bitmap)) -- ^ C return type: @"sk_bitmap_t *"@

-- | Function pointer to 'sk_bitmap_new'
foreign import ccall "&sk_bitmap_new" p'sk_bitmap_new ::
  FunPtr (IO (Ptr (Sk_bitmap)))

{- | C function signature:

@
void sk_bitmap_get_info(sk_bitmap_t *cbitmap, sk_imageinfo_t *info)
@
-}
foreign import ccall "sk_bitmap_get_info" sk_bitmap_get_info ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> Ptr (Sk_imageinfo) -- ^ C argument @"sk_imageinfo_t * info"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_bitmap_get_info'
foreign import ccall "&sk_bitmap_get_info" p'sk_bitmap_get_info ::
  FunPtr (Ptr (Sk_bitmap) -> Ptr (Sk_imageinfo) -> IO (()))

{- | C function signature:

@
void *sk_bitmap_get_pixels(sk_bitmap_t *cbitmap, size_t *length)
@
-}
foreign import ccall "sk_bitmap_get_pixels" sk_bitmap_get_pixels ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> Ptr (CSize) -- ^ C argument @"size_t * length"@
  -> IO (Ptr (())) -- ^ C return type: @"void *"@

-- | Function pointer to 'sk_bitmap_get_pixels'
foreign import ccall "&sk_bitmap_get_pixels" p'sk_bitmap_get_pixels ::
  FunPtr (Ptr (Sk_bitmap) -> Ptr (CSize) -> IO (Ptr (())))

{- | C function signature:

@
size_t sk_bitmap_get_row_bytes(sk_bitmap_t *cbitmap)
@
-}
foreign import ccall "sk_bitmap_get_row_bytes" sk_bitmap_get_row_bytes ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_bitmap_get_row_bytes'
foreign import ccall "&sk_bitmap_get_row_bytes" p'sk_bitmap_get_row_bytes ::
  FunPtr (Ptr (Sk_bitmap) -> IO (CSize))

{- | C function signature:

@
size_t sk_bitmap_get_byte_count(sk_bitmap_t *cbitmap)
@
-}
foreign import ccall "sk_bitmap_get_byte_count" sk_bitmap_get_byte_count ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_bitmap_get_byte_count'
foreign import ccall "&sk_bitmap_get_byte_count" p'sk_bitmap_get_byte_count ::
  FunPtr (Ptr (Sk_bitmap) -> IO (CSize))

{- | C function signature:

@
void sk_bitmap_reset(sk_bitmap_t *cbitmap)
@
-}
foreign import ccall "sk_bitmap_reset" sk_bitmap_reset ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_bitmap_reset'
foreign import ccall "&sk_bitmap_reset" p'sk_bitmap_reset ::
  FunPtr (Ptr (Sk_bitmap) -> IO (()))

{- | C function signature:

@
_Bool sk_bitmap_is_null(sk_bitmap_t *cbitmap)
@
-}
foreign import ccall "sk_bitmap_is_null" sk_bitmap_is_null ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_bitmap_is_null'
foreign import ccall "&sk_bitmap_is_null" p'sk_bitmap_is_null ::
  FunPtr (Ptr (Sk_bitmap) -> IO (CBool))

{- | C function signature:

@
_Bool sk_bitmap_is_immutable(sk_bitmap_t *cbitmap)
@
-}
foreign import ccall "sk_bitmap_is_immutable" sk_bitmap_is_immutable ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_bitmap_is_immutable'
foreign import ccall "&sk_bitmap_is_immutable" p'sk_bitmap_is_immutable ::
  FunPtr (Ptr (Sk_bitmap) -> IO (CBool))

{- | C function signature:

@
void sk_bitmap_set_immutable(sk_bitmap_t *cbitmap)
@
-}
foreign import ccall "sk_bitmap_set_immutable" sk_bitmap_set_immutable ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_bitmap_set_immutable'
foreign import ccall "&sk_bitmap_set_immutable" p'sk_bitmap_set_immutable ::
  FunPtr (Ptr (Sk_bitmap) -> IO (()))

{- | C function signature:

@
void sk_bitmap_erase(sk_bitmap_t *cbitmap, sk_color_t color)
@
-}
foreign import ccall "sk_bitmap_erase" sk_bitmap_erase ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> Sk_color -- ^ C argument @"sk_color_t color"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_bitmap_erase'
foreign import ccall "&sk_bitmap_erase" p'sk_bitmap_erase ::
  FunPtr (Ptr (Sk_bitmap) -> Sk_color -> IO (()))

{- | C function signature:

@
void sk_bitmap_erase_rect(sk_bitmap_t *cbitmap, sk_color_t color, sk_irect_t *rect)
@
-}
foreign import ccall "sk_bitmap_erase_rect" sk_bitmap_erase_rect ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> Sk_color -- ^ C argument @"sk_color_t color"@
  -> Ptr (Sk_irect) -- ^ C argument @"sk_irect_t * rect"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_bitmap_erase_rect'
foreign import ccall "&sk_bitmap_erase_rect" p'sk_bitmap_erase_rect ::
  FunPtr (Ptr (Sk_bitmap) -> Sk_color -> Ptr (Sk_irect) -> IO (()))

{- | C function signature:

@
uint8_t *sk_bitmap_get_addr_8(sk_bitmap_t *cbitmap, int x, int y)
@
-}
foreign import ccall "sk_bitmap_get_addr_8" sk_bitmap_get_addr_8 ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> CInt -- ^ C argument @"int x"@
  -> CInt -- ^ C argument @"int y"@
  -> IO (Ptr (Word8)) -- ^ C return type: @"uint8_t *"@

-- | Function pointer to 'sk_bitmap_get_addr_8'
foreign import ccall "&sk_bitmap_get_addr_8" p'sk_bitmap_get_addr_8 ::
  FunPtr (Ptr (Sk_bitmap) -> CInt -> CInt -> IO (Ptr (Word8)))

{- | C function signature:

@
uint16_t *sk_bitmap_get_addr_16(sk_bitmap_t *cbitmap, int x, int y)
@
-}
foreign import ccall "sk_bitmap_get_addr_16" sk_bitmap_get_addr_16 ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> CInt -- ^ C argument @"int x"@
  -> CInt -- ^ C argument @"int y"@
  -> IO (Ptr (Word16)) -- ^ C return type: @"uint16_t *"@

-- | Function pointer to 'sk_bitmap_get_addr_16'
foreign import ccall "&sk_bitmap_get_addr_16" p'sk_bitmap_get_addr_16 ::
  FunPtr (Ptr (Sk_bitmap) -> CInt -> CInt -> IO (Ptr (Word16)))

{- | C function signature:

@
uint32_t *sk_bitmap_get_addr_32(sk_bitmap_t *cbitmap, int x, int y)
@
-}
foreign import ccall "sk_bitmap_get_addr_32" sk_bitmap_get_addr_32 ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> CInt -- ^ C argument @"int x"@
  -> CInt -- ^ C argument @"int y"@
  -> IO (Ptr (Word32)) -- ^ C return type: @"uint32_t *"@

-- | Function pointer to 'sk_bitmap_get_addr_32'
foreign import ccall "&sk_bitmap_get_addr_32" p'sk_bitmap_get_addr_32 ::
  FunPtr (Ptr (Sk_bitmap) -> CInt -> CInt -> IO (Ptr (Word32)))

{- | C function signature:

@
void *sk_bitmap_get_addr(sk_bitmap_t *cbitmap, int x, int y)
@
-}
foreign import ccall "sk_bitmap_get_addr" sk_bitmap_get_addr ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> CInt -- ^ C argument @"int x"@
  -> CInt -- ^ C argument @"int y"@
  -> IO (Ptr (())) -- ^ C return type: @"void *"@

-- | Function pointer to 'sk_bitmap_get_addr'
foreign import ccall "&sk_bitmap_get_addr" p'sk_bitmap_get_addr ::
  FunPtr (Ptr (Sk_bitmap) -> CInt -> CInt -> IO (Ptr (())))

{- | C function signature:

@
sk_color_t sk_bitmap_get_pixel_color(sk_bitmap_t *cbitmap, int x, int y)
@
-}
foreign import ccall "sk_bitmap_get_pixel_color" sk_bitmap_get_pixel_color ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> CInt -- ^ C argument @"int x"@
  -> CInt -- ^ C argument @"int y"@
  -> IO (Sk_color) -- ^ C return type: @"sk_color_t"@

-- | Function pointer to 'sk_bitmap_get_pixel_color'
foreign import ccall "&sk_bitmap_get_pixel_color" p'sk_bitmap_get_pixel_color ::
  FunPtr (Ptr (Sk_bitmap) -> CInt -> CInt -> IO (Sk_color))

{- | C function signature:

@
_Bool sk_bitmap_ready_to_draw(sk_bitmap_t *cbitmap)
@
-}
foreign import ccall "sk_bitmap_ready_to_draw" sk_bitmap_ready_to_draw ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_bitmap_ready_to_draw'
foreign import ccall "&sk_bitmap_ready_to_draw" p'sk_bitmap_ready_to_draw ::
  FunPtr (Ptr (Sk_bitmap) -> IO (CBool))

{- | C function signature:

@
void sk_bitmap_get_pixel_colors(sk_bitmap_t *cbitmap, sk_color_t *colors)
@
-}
foreign import ccall "sk_bitmap_get_pixel_colors" sk_bitmap_get_pixel_colors ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> Ptr (Sk_color) -- ^ C argument @"sk_color_t * colors"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_bitmap_get_pixel_colors'
foreign import ccall "&sk_bitmap_get_pixel_colors" p'sk_bitmap_get_pixel_colors ::
  FunPtr (Ptr (Sk_bitmap) -> Ptr (Sk_color) -> IO (()))

{- | C function signature:

@
_Bool sk_bitmap_install_pixels(sk_bitmap_t *cbitmap, const sk_imageinfo_t *cinfo, void *pixels, size_t rowBytes, const sk_bitmap_release_proc releaseProc, void *context)
@
-}
foreign import ccall "sk_bitmap_install_pixels" sk_bitmap_install_pixels ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> Ptr (Sk_imageinfo) -- ^ C argument @"const sk_imageinfo_t * cinfo"@
  -> Ptr (()) -- ^ C argument @"void * pixels"@
  -> CSize -- ^ C argument @"size_t rowBytes"@
  -> FunPtr Sk_bitmap_release_proc -- ^ C argument @"const sk_bitmap_release_proc releaseProc"@
  -> Ptr (()) -- ^ C argument @"void * context"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_bitmap_install_pixels'
foreign import ccall "&sk_bitmap_install_pixels" p'sk_bitmap_install_pixels ::
  FunPtr (Ptr (Sk_bitmap) -> Ptr (Sk_imageinfo) -> Ptr (()) -> CSize -> FunPtr Sk_bitmap_release_proc -> Ptr (()) -> IO (CBool))

{- | C function signature:

@
_Bool sk_bitmap_install_pixels_with_pixmap(sk_bitmap_t *cbitmap, const sk_pixmap_t *cpixmap)
@
-}
foreign import ccall "sk_bitmap_install_pixels_with_pixmap" sk_bitmap_install_pixels_with_pixmap ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * cpixmap"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_bitmap_install_pixels_with_pixmap'
foreign import ccall "&sk_bitmap_install_pixels_with_pixmap" p'sk_bitmap_install_pixels_with_pixmap ::
  FunPtr (Ptr (Sk_bitmap) -> Ptr (Sk_pixmap) -> IO (CBool))

{- | C function signature:

@
_Bool sk_bitmap_try_alloc_pixels(sk_bitmap_t *cbitmap, const sk_imageinfo_t *requestedInfo, size_t rowBytes)
@
-}
foreign import ccall "sk_bitmap_try_alloc_pixels" sk_bitmap_try_alloc_pixels ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> Ptr (Sk_imageinfo) -- ^ C argument @"const sk_imageinfo_t * requestedInfo"@
  -> CSize -- ^ C argument @"size_t rowBytes"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_bitmap_try_alloc_pixels'
foreign import ccall "&sk_bitmap_try_alloc_pixels" p'sk_bitmap_try_alloc_pixels ::
  FunPtr (Ptr (Sk_bitmap) -> Ptr (Sk_imageinfo) -> CSize -> IO (CBool))

{- | C function signature:

@
_Bool sk_bitmap_try_alloc_pixels_with_flags(sk_bitmap_t *cbitmap, const sk_imageinfo_t *requestedInfo, uint32_t flags)
@
-}
foreign import ccall "sk_bitmap_try_alloc_pixels_with_flags" sk_bitmap_try_alloc_pixels_with_flags ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> Ptr (Sk_imageinfo) -- ^ C argument @"const sk_imageinfo_t * requestedInfo"@
  -> Word32 -- ^ C argument @"uint32_t flags"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_bitmap_try_alloc_pixels_with_flags'
foreign import ccall "&sk_bitmap_try_alloc_pixels_with_flags" p'sk_bitmap_try_alloc_pixels_with_flags ::
  FunPtr (Ptr (Sk_bitmap) -> Ptr (Sk_imageinfo) -> Word32 -> IO (CBool))

{- | C function signature:

@
void sk_bitmap_set_pixels(sk_bitmap_t *cbitmap, void *pixels)
@
-}
foreign import ccall "sk_bitmap_set_pixels" sk_bitmap_set_pixels ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> Ptr (()) -- ^ C argument @"void * pixels"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_bitmap_set_pixels'
foreign import ccall "&sk_bitmap_set_pixels" p'sk_bitmap_set_pixels ::
  FunPtr (Ptr (Sk_bitmap) -> Ptr (()) -> IO (()))

{- | C function signature:

@
_Bool sk_bitmap_peek_pixels(sk_bitmap_t *cbitmap, sk_pixmap_t *cpixmap)
@
-}
foreign import ccall "sk_bitmap_peek_pixels" sk_bitmap_peek_pixels ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> Ptr (Sk_pixmap) -- ^ C argument @"sk_pixmap_t * cpixmap"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_bitmap_peek_pixels'
foreign import ccall "&sk_bitmap_peek_pixels" p'sk_bitmap_peek_pixels ::
  FunPtr (Ptr (Sk_bitmap) -> Ptr (Sk_pixmap) -> IO (CBool))

{- | C function signature:

@
_Bool sk_bitmap_extract_subset(sk_bitmap_t *cbitmap, sk_bitmap_t *dst, sk_irect_t *subset)
@
-}
foreign import ccall "sk_bitmap_extract_subset" sk_bitmap_extract_subset ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * dst"@
  -> Ptr (Sk_irect) -- ^ C argument @"sk_irect_t * subset"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_bitmap_extract_subset'
foreign import ccall "&sk_bitmap_extract_subset" p'sk_bitmap_extract_subset ::
  FunPtr (Ptr (Sk_bitmap) -> Ptr (Sk_bitmap) -> Ptr (Sk_irect) -> IO (CBool))

{- | C function signature:

@
_Bool sk_bitmap_extract_alpha(sk_bitmap_t *cbitmap, sk_bitmap_t *dst, const sk_paint_t *paint, sk_ipoint_t *offset)
@
-}
foreign import ccall "sk_bitmap_extract_alpha" sk_bitmap_extract_alpha ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * dst"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * paint"@
  -> Ptr (Sk_ipoint) -- ^ C argument @"sk_ipoint_t * offset"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_bitmap_extract_alpha'
foreign import ccall "&sk_bitmap_extract_alpha" p'sk_bitmap_extract_alpha ::
  FunPtr (Ptr (Sk_bitmap) -> Ptr (Sk_bitmap) -> Ptr (Sk_paint) -> Ptr (Sk_ipoint) -> IO (CBool))

{- | C function signature:

@
void sk_bitmap_notify_pixels_changed(sk_bitmap_t *cbitmap)
@
-}
foreign import ccall "sk_bitmap_notify_pixels_changed" sk_bitmap_notify_pixels_changed ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_bitmap_notify_pixels_changed'
foreign import ccall "&sk_bitmap_notify_pixels_changed" p'sk_bitmap_notify_pixels_changed ::
  FunPtr (Ptr (Sk_bitmap) -> IO (()))

{- | C function signature:

@
void sk_bitmap_swap(sk_bitmap_t *cbitmap, sk_bitmap_t *cother)
@
-}
foreign import ccall "sk_bitmap_swap" sk_bitmap_swap ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cother"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_bitmap_swap'
foreign import ccall "&sk_bitmap_swap" p'sk_bitmap_swap ::
  FunPtr (Ptr (Sk_bitmap) -> Ptr (Sk_bitmap) -> IO (()))

{- | C function signature:

@
sk_shader_t *sk_bitmap_make_shader(sk_bitmap_t *cbitmap, sk_shader_tilemode_t tmx, sk_shader_tilemode_t tmy, sk_sampling_options_t *sampling, const sk_matrix_t *cmatrix)
@
-}
foreign import ccall "sk_bitmap_make_shader" sk_bitmap_make_shader ::
  Ptr (Sk_bitmap) -- ^ C argument @"sk_bitmap_t * cbitmap"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t tmx"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t tmy"@
  -> Ptr (Sk_sampling_options) -- ^ C argument @"sk_sampling_options_t * sampling"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * cmatrix"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_bitmap_make_shader'
foreign import ccall "&sk_bitmap_make_shader" p'sk_bitmap_make_shader ::
  FunPtr (Ptr (Sk_bitmap) -> Sk_shader_tilemode -> Sk_shader_tilemode -> Ptr (Sk_sampling_options) -> Ptr (Sk_matrix) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sksg_invalidation_controller_t *sksg_invalidation_controller_new(void)
@
-}
foreign import ccall "sksg_invalidation_controller_new" sksg_invalidation_controller_new ::
  IO (Ptr (Sksg_invalidation_controller)) -- ^ C return type: @"sksg_invalidation_controller_t *"@

-- | Function pointer to 'sksg_invalidation_controller_new'
foreign import ccall "&sksg_invalidation_controller_new" p'sksg_invalidation_controller_new ::
  FunPtr (IO (Ptr (Sksg_invalidation_controller)))

{- | C function signature:

@
void sksg_invalidation_controller_delete(sksg_invalidation_controller_t *instance)
@
-}
foreign import ccall "sksg_invalidation_controller_delete" sksg_invalidation_controller_delete ::
  Ptr (Sksg_invalidation_controller) -- ^ C argument @"sksg_invalidation_controller_t * instance"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sksg_invalidation_controller_delete'
foreign import ccall "&sksg_invalidation_controller_delete" p'sksg_invalidation_controller_delete ::
  FunPtr (Ptr (Sksg_invalidation_controller) -> IO (()))

{- | C function signature:

@
void sksg_invalidation_controller_inval(sksg_invalidation_controller_t *instance, sk_rect_t *rect, sk_matrix_t *matrix)
@
-}
foreign import ccall "sksg_invalidation_controller_inval" sksg_invalidation_controller_inval ::
  Ptr (Sksg_invalidation_controller) -- ^ C argument @"sksg_invalidation_controller_t * instance"@
  -> Ptr (Sk_rect) -- ^ C argument @"sk_rect_t * rect"@
  -> Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * matrix"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sksg_invalidation_controller_inval'
foreign import ccall "&sksg_invalidation_controller_inval" p'sksg_invalidation_controller_inval ::
  FunPtr (Ptr (Sksg_invalidation_controller) -> Ptr (Sk_rect) -> Ptr (Sk_matrix) -> IO (()))

{- | C function signature:

@
void sksg_invalidation_controller_get_bounds(sksg_invalidation_controller_t *instance, sk_rect_t *bounds)
@
-}
foreign import ccall "sksg_invalidation_controller_get_bounds" sksg_invalidation_controller_get_bounds ::
  Ptr (Sksg_invalidation_controller) -- ^ C argument @"sksg_invalidation_controller_t * instance"@
  -> Ptr (Sk_rect) -- ^ C argument @"sk_rect_t * bounds"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sksg_invalidation_controller_get_bounds'
foreign import ccall "&sksg_invalidation_controller_get_bounds" p'sksg_invalidation_controller_get_bounds ::
  FunPtr (Ptr (Sksg_invalidation_controller) -> Ptr (Sk_rect) -> IO (()))

{- | C function signature:

@
void sksg_invalidation_controller_begin(sksg_invalidation_controller_t *instance)
@
-}
foreign import ccall "sksg_invalidation_controller_begin" sksg_invalidation_controller_begin ::
  Ptr (Sksg_invalidation_controller) -- ^ C argument @"sksg_invalidation_controller_t * instance"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sksg_invalidation_controller_begin'
foreign import ccall "&sksg_invalidation_controller_begin" p'sksg_invalidation_controller_begin ::
  FunPtr (Ptr (Sksg_invalidation_controller) -> IO (()))

{- | C function signature:

@
void sksg_invalidation_controller_end(sksg_invalidation_controller_t *instance)
@
-}
foreign import ccall "sksg_invalidation_controller_end" sksg_invalidation_controller_end ::
  Ptr (Sksg_invalidation_controller) -- ^ C argument @"sksg_invalidation_controller_t * instance"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sksg_invalidation_controller_end'
foreign import ccall "&sksg_invalidation_controller_end" p'sksg_invalidation_controller_end ::
  FunPtr (Ptr (Sksg_invalidation_controller) -> IO (()))

{- | C function signature:

@
void sksg_invalidation_controller_reset(sksg_invalidation_controller_t *instance)
@
-}
foreign import ccall "sksg_invalidation_controller_reset" sksg_invalidation_controller_reset ::
  Ptr (Sksg_invalidation_controller) -- ^ C argument @"sksg_invalidation_controller_t * instance"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sksg_invalidation_controller_reset'
foreign import ccall "&sksg_invalidation_controller_reset" p'sksg_invalidation_controller_reset ::
  FunPtr (Ptr (Sksg_invalidation_controller) -> IO (()))

{- | C function signature:

@
sk_path_t *sk_path_new(void)
@
-}
foreign import ccall "sk_path_new" sk_path_new ::
  IO (Ptr (Sk_path)) -- ^ C return type: @"sk_path_t *"@

-- | Function pointer to 'sk_path_new'
foreign import ccall "&sk_path_new" p'sk_path_new ::
  FunPtr (IO (Ptr (Sk_path)))

{- | C function signature:

@
void sk_path_delete(sk_path_t *)
@
-}
foreign import ccall "sk_path_delete" sk_path_delete ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_delete'
foreign import ccall "&sk_path_delete" p'sk_path_delete ::
  FunPtr (Ptr (Sk_path) -> IO (()))

{- | C function signature:

@
void sk_path_move_to(sk_path_t *, float x, float y)
@
-}
foreign import ccall "sk_path_move_to" sk_path_move_to ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> CFloat -- ^ C argument @"float x"@
  -> CFloat -- ^ C argument @"float y"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_move_to'
foreign import ccall "&sk_path_move_to" p'sk_path_move_to ::
  FunPtr (Ptr (Sk_path) -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_path_line_to(sk_path_t *, float x, float y)
@
-}
foreign import ccall "sk_path_line_to" sk_path_line_to ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> CFloat -- ^ C argument @"float x"@
  -> CFloat -- ^ C argument @"float y"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_line_to'
foreign import ccall "&sk_path_line_to" p'sk_path_line_to ::
  FunPtr (Ptr (Sk_path) -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_path_quad_to(sk_path_t *, float x0, float y0, float x1, float y1)
@
-}
foreign import ccall "sk_path_quad_to" sk_path_quad_to ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> CFloat -- ^ C argument @"float x0"@
  -> CFloat -- ^ C argument @"float y0"@
  -> CFloat -- ^ C argument @"float x1"@
  -> CFloat -- ^ C argument @"float y1"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_quad_to'
foreign import ccall "&sk_path_quad_to" p'sk_path_quad_to ::
  FunPtr (Ptr (Sk_path) -> CFloat -> CFloat -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_path_conic_to(sk_path_t *, float x0, float y0, float x1, float y1, float w)
@
-}
foreign import ccall "sk_path_conic_to" sk_path_conic_to ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> CFloat -- ^ C argument @"float x0"@
  -> CFloat -- ^ C argument @"float y0"@
  -> CFloat -- ^ C argument @"float x1"@
  -> CFloat -- ^ C argument @"float y1"@
  -> CFloat -- ^ C argument @"float w"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_conic_to'
foreign import ccall "&sk_path_conic_to" p'sk_path_conic_to ::
  FunPtr (Ptr (Sk_path) -> CFloat -> CFloat -> CFloat -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_path_cubic_to(sk_path_t *, float x0, float y0, float x1, float y1, float x2, float y2)
@
-}
foreign import ccall "sk_path_cubic_to" sk_path_cubic_to ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> CFloat -- ^ C argument @"float x0"@
  -> CFloat -- ^ C argument @"float y0"@
  -> CFloat -- ^ C argument @"float x1"@
  -> CFloat -- ^ C argument @"float y1"@
  -> CFloat -- ^ C argument @"float x2"@
  -> CFloat -- ^ C argument @"float y2"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_cubic_to'
foreign import ccall "&sk_path_cubic_to" p'sk_path_cubic_to ::
  FunPtr (Ptr (Sk_path) -> CFloat -> CFloat -> CFloat -> CFloat -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_path_arc_to(sk_path_t *, float rx, float ry, float xAxisRotate, sk_path_arc_size_t largeArc, sk_path_direction_t sweep, float x, float y)
@
-}
foreign import ccall "sk_path_arc_to" sk_path_arc_to ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> CFloat -- ^ C argument @"float rx"@
  -> CFloat -- ^ C argument @"float ry"@
  -> CFloat -- ^ C argument @"float xAxisRotate"@
  -> Sk_path_arc_size -- ^ C argument @"sk_path_arc_size_t largeArc"@
  -> Sk_path_direction -- ^ C argument @"sk_path_direction_t sweep"@
  -> CFloat -- ^ C argument @"float x"@
  -> CFloat -- ^ C argument @"float y"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_arc_to'
foreign import ccall "&sk_path_arc_to" p'sk_path_arc_to ::
  FunPtr (Ptr (Sk_path) -> CFloat -> CFloat -> CFloat -> Sk_path_arc_size -> Sk_path_direction -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_path_rarc_to(sk_path_t *, float rx, float ry, float xAxisRotate, sk_path_arc_size_t largeArc, sk_path_direction_t sweep, float x, float y)
@
-}
foreign import ccall "sk_path_rarc_to" sk_path_rarc_to ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> CFloat -- ^ C argument @"float rx"@
  -> CFloat -- ^ C argument @"float ry"@
  -> CFloat -- ^ C argument @"float xAxisRotate"@
  -> Sk_path_arc_size -- ^ C argument @"sk_path_arc_size_t largeArc"@
  -> Sk_path_direction -- ^ C argument @"sk_path_direction_t sweep"@
  -> CFloat -- ^ C argument @"float x"@
  -> CFloat -- ^ C argument @"float y"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_rarc_to'
foreign import ccall "&sk_path_rarc_to" p'sk_path_rarc_to ::
  FunPtr (Ptr (Sk_path) -> CFloat -> CFloat -> CFloat -> Sk_path_arc_size -> Sk_path_direction -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_path_arc_to_with_oval(sk_path_t *, const sk_rect_t *oval, float startAngle, float sweepAngle, _Bool forceMoveTo)
@
-}
foreign import ccall "sk_path_arc_to_with_oval" sk_path_arc_to_with_oval ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * oval"@
  -> CFloat -- ^ C argument @"float startAngle"@
  -> CFloat -- ^ C argument @"float sweepAngle"@
  -> CBool -- ^ C argument @"_Bool forceMoveTo"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_arc_to_with_oval'
foreign import ccall "&sk_path_arc_to_with_oval" p'sk_path_arc_to_with_oval ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_rect) -> CFloat -> CFloat -> CBool -> IO (()))

{- | C function signature:

@
void sk_path_arc_to_with_points(sk_path_t *, float x1, float y1, float x2, float y2, float radius)
@
-}
foreign import ccall "sk_path_arc_to_with_points" sk_path_arc_to_with_points ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> CFloat -- ^ C argument @"float x1"@
  -> CFloat -- ^ C argument @"float y1"@
  -> CFloat -- ^ C argument @"float x2"@
  -> CFloat -- ^ C argument @"float y2"@
  -> CFloat -- ^ C argument @"float radius"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_arc_to_with_points'
foreign import ccall "&sk_path_arc_to_with_points" p'sk_path_arc_to_with_points ::
  FunPtr (Ptr (Sk_path) -> CFloat -> CFloat -> CFloat -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_path_close(sk_path_t *)
@
-}
foreign import ccall "sk_path_close" sk_path_close ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_close'
foreign import ccall "&sk_path_close" p'sk_path_close ::
  FunPtr (Ptr (Sk_path) -> IO (()))

{- | C function signature:

@
void sk_path_add_rect(sk_path_t *, const sk_rect_t *, sk_path_direction_t)
@
-}
foreign import ccall "sk_path_add_rect" sk_path_add_rect ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> Ptr (Sk_rect) -- ^ C argument type: @"const sk_rect_t *"@
  -> Sk_path_direction -- ^ C argument type: @"sk_path_direction_t"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_add_rect'
foreign import ccall "&sk_path_add_rect" p'sk_path_add_rect ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_rect) -> Sk_path_direction -> IO (()))

{- | C function signature:

@
void sk_path_add_rrect(sk_path_t *, const sk_rrect_t *, sk_path_direction_t)
@
-}
foreign import ccall "sk_path_add_rrect" sk_path_add_rrect ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> Ptr (Sk_rrect) -- ^ C argument type: @"const sk_rrect_t *"@
  -> Sk_path_direction -- ^ C argument type: @"sk_path_direction_t"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_add_rrect'
foreign import ccall "&sk_path_add_rrect" p'sk_path_add_rrect ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_rrect) -> Sk_path_direction -> IO (()))

{- | C function signature:

@
void sk_path_add_rrect_start(sk_path_t *, const sk_rrect_t *, sk_path_direction_t, uint32_t)
@
-}
foreign import ccall "sk_path_add_rrect_start" sk_path_add_rrect_start ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> Ptr (Sk_rrect) -- ^ C argument type: @"const sk_rrect_t *"@
  -> Sk_path_direction -- ^ C argument type: @"sk_path_direction_t"@
  -> Word32 -- ^ C argument type: @"uint32_t"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_add_rrect_start'
foreign import ccall "&sk_path_add_rrect_start" p'sk_path_add_rrect_start ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_rrect) -> Sk_path_direction -> Word32 -> IO (()))

{- | C function signature:

@
void sk_path_add_rounded_rect(sk_path_t *, const sk_rect_t *, float, float, sk_path_direction_t)
@
-}
foreign import ccall "sk_path_add_rounded_rect" sk_path_add_rounded_rect ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> Ptr (Sk_rect) -- ^ C argument type: @"const sk_rect_t *"@
  -> CFloat -- ^ C argument type: @"float"@
  -> CFloat -- ^ C argument type: @"float"@
  -> Sk_path_direction -- ^ C argument type: @"sk_path_direction_t"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_add_rounded_rect'
foreign import ccall "&sk_path_add_rounded_rect" p'sk_path_add_rounded_rect ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_rect) -> CFloat -> CFloat -> Sk_path_direction -> IO (()))

{- | C function signature:

@
void sk_path_add_oval(sk_path_t *, const sk_rect_t *, sk_path_direction_t)
@
-}
foreign import ccall "sk_path_add_oval" sk_path_add_oval ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> Ptr (Sk_rect) -- ^ C argument type: @"const sk_rect_t *"@
  -> Sk_path_direction -- ^ C argument type: @"sk_path_direction_t"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_add_oval'
foreign import ccall "&sk_path_add_oval" p'sk_path_add_oval ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_rect) -> Sk_path_direction -> IO (()))

{- | C function signature:

@
void sk_path_add_circle(sk_path_t *, float x, float y, float radius, sk_path_direction_t dir)
@
-}
foreign import ccall "sk_path_add_circle" sk_path_add_circle ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> CFloat -- ^ C argument @"float x"@
  -> CFloat -- ^ C argument @"float y"@
  -> CFloat -- ^ C argument @"float radius"@
  -> Sk_path_direction -- ^ C argument @"sk_path_direction_t dir"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_add_circle'
foreign import ccall "&sk_path_add_circle" p'sk_path_add_circle ::
  FunPtr (Ptr (Sk_path) -> CFloat -> CFloat -> CFloat -> Sk_path_direction -> IO (()))

{- | C function signature:

@
void sk_path_get_bounds(const sk_path_t *, sk_rect_t *)
@
-}
foreign import ccall "sk_path_get_bounds" sk_path_get_bounds ::
  Ptr (Sk_path) -- ^ C argument type: @"const sk_path_t *"@
  -> Ptr (Sk_rect) -- ^ C argument type: @"sk_rect_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_get_bounds'
foreign import ccall "&sk_path_get_bounds" p'sk_path_get_bounds ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_rect) -> IO (()))

{- | C function signature:

@
void sk_path_compute_tight_bounds(const sk_path_t *, sk_rect_t *)
@
-}
foreign import ccall "sk_path_compute_tight_bounds" sk_path_compute_tight_bounds ::
  Ptr (Sk_path) -- ^ C argument type: @"const sk_path_t *"@
  -> Ptr (Sk_rect) -- ^ C argument type: @"sk_rect_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_compute_tight_bounds'
foreign import ccall "&sk_path_compute_tight_bounds" p'sk_path_compute_tight_bounds ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_rect) -> IO (()))

{- | C function signature:

@
void sk_path_rmove_to(sk_path_t *, float dx, float dy)
@
-}
foreign import ccall "sk_path_rmove_to" sk_path_rmove_to ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> CFloat -- ^ C argument @"float dx"@
  -> CFloat -- ^ C argument @"float dy"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_rmove_to'
foreign import ccall "&sk_path_rmove_to" p'sk_path_rmove_to ::
  FunPtr (Ptr (Sk_path) -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_path_rline_to(sk_path_t *, float dx, float yd)
@
-}
foreign import ccall "sk_path_rline_to" sk_path_rline_to ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> CFloat -- ^ C argument @"float dx"@
  -> CFloat -- ^ C argument @"float yd"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_rline_to'
foreign import ccall "&sk_path_rline_to" p'sk_path_rline_to ::
  FunPtr (Ptr (Sk_path) -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_path_rquad_to(sk_path_t *, float dx0, float dy0, float dx1, float dy1)
@
-}
foreign import ccall "sk_path_rquad_to" sk_path_rquad_to ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> CFloat -- ^ C argument @"float dx0"@
  -> CFloat -- ^ C argument @"float dy0"@
  -> CFloat -- ^ C argument @"float dx1"@
  -> CFloat -- ^ C argument @"float dy1"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_rquad_to'
foreign import ccall "&sk_path_rquad_to" p'sk_path_rquad_to ::
  FunPtr (Ptr (Sk_path) -> CFloat -> CFloat -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_path_rconic_to(sk_path_t *, float dx0, float dy0, float dx1, float dy1, float w)
@
-}
foreign import ccall "sk_path_rconic_to" sk_path_rconic_to ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> CFloat -- ^ C argument @"float dx0"@
  -> CFloat -- ^ C argument @"float dy0"@
  -> CFloat -- ^ C argument @"float dx1"@
  -> CFloat -- ^ C argument @"float dy1"@
  -> CFloat -- ^ C argument @"float w"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_rconic_to'
foreign import ccall "&sk_path_rconic_to" p'sk_path_rconic_to ::
  FunPtr (Ptr (Sk_path) -> CFloat -> CFloat -> CFloat -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_path_rcubic_to(sk_path_t *, float dx0, float dy0, float dx1, float dy1, float dx2, float dy2)
@
-}
foreign import ccall "sk_path_rcubic_to" sk_path_rcubic_to ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> CFloat -- ^ C argument @"float dx0"@
  -> CFloat -- ^ C argument @"float dy0"@
  -> CFloat -- ^ C argument @"float dx1"@
  -> CFloat -- ^ C argument @"float dy1"@
  -> CFloat -- ^ C argument @"float dx2"@
  -> CFloat -- ^ C argument @"float dy2"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_rcubic_to'
foreign import ccall "&sk_path_rcubic_to" p'sk_path_rcubic_to ::
  FunPtr (Ptr (Sk_path) -> CFloat -> CFloat -> CFloat -> CFloat -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_path_add_rect_start(sk_path_t *cpath, const sk_rect_t *crect, sk_path_direction_t cdir, uint32_t startIndex)
@
-}
foreign import ccall "sk_path_add_rect_start" sk_path_add_rect_start ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * crect"@
  -> Sk_path_direction -- ^ C argument @"sk_path_direction_t cdir"@
  -> Word32 -- ^ C argument @"uint32_t startIndex"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_add_rect_start'
foreign import ccall "&sk_path_add_rect_start" p'sk_path_add_rect_start ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_rect) -> Sk_path_direction -> Word32 -> IO (()))

{- | C function signature:

@
void sk_path_add_arc(sk_path_t *cpath, const sk_rect_t *crect, float startAngle, float sweepAngle)
@
-}
foreign import ccall "sk_path_add_arc" sk_path_add_arc ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * crect"@
  -> CFloat -- ^ C argument @"float startAngle"@
  -> CFloat -- ^ C argument @"float sweepAngle"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_add_arc'
foreign import ccall "&sk_path_add_arc" p'sk_path_add_arc ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_rect) -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
sk_path_filltype_t sk_path_get_filltype(sk_path_t *)
@
-}
foreign import ccall "sk_path_get_filltype" sk_path_get_filltype ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> IO (Sk_path_filltype) -- ^ C return type: @"sk_path_filltype_t"@

-- | Function pointer to 'sk_path_get_filltype'
foreign import ccall "&sk_path_get_filltype" p'sk_path_get_filltype ::
  FunPtr (Ptr (Sk_path) -> IO (Sk_path_filltype))

{- | C function signature:

@
void sk_path_set_filltype(sk_path_t *, sk_path_filltype_t)
@
-}
foreign import ccall "sk_path_set_filltype" sk_path_set_filltype ::
  Ptr (Sk_path) -- ^ C argument type: @"sk_path_t *"@
  -> Sk_path_filltype -- ^ C argument type: @"sk_path_filltype_t"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_set_filltype'
foreign import ccall "&sk_path_set_filltype" p'sk_path_set_filltype ::
  FunPtr (Ptr (Sk_path) -> Sk_path_filltype -> IO (()))

{- | C function signature:

@
void sk_path_transform(sk_path_t *cpath, const sk_matrix_t *cmatrix)
@
-}
foreign import ccall "sk_path_transform" sk_path_transform ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * cmatrix"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_transform'
foreign import ccall "&sk_path_transform" p'sk_path_transform ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_matrix) -> IO (()))

{- | C function signature:

@
void sk_path_transform_to_dest(const sk_path_t *cpath, const sk_matrix_t *cmatrix, sk_path_t *destination)
@
-}
foreign import ccall "sk_path_transform_to_dest" sk_path_transform_to_dest ::
  Ptr (Sk_path) -- ^ C argument @"const sk_path_t * cpath"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * cmatrix"@
  -> Ptr (Sk_path) -- ^ C argument @"sk_path_t * destination"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_transform_to_dest'
foreign import ccall "&sk_path_transform_to_dest" p'sk_path_transform_to_dest ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_matrix) -> Ptr (Sk_path) -> IO (()))

{- | C function signature:

@
sk_path_t *sk_path_clone(const sk_path_t *cpath)
@
-}
foreign import ccall "sk_path_clone" sk_path_clone ::
  Ptr (Sk_path) -- ^ C argument @"const sk_path_t * cpath"@
  -> IO (Ptr (Sk_path)) -- ^ C return type: @"sk_path_t *"@

-- | Function pointer to 'sk_path_clone'
foreign import ccall "&sk_path_clone" p'sk_path_clone ::
  FunPtr (Ptr (Sk_path) -> IO (Ptr (Sk_path)))

{- | C function signature:

@
void sk_path_add_path_offset(sk_path_t *cpath, sk_path_t *other, float dx, float dy, sk_path_add_mode_t add_mode)
@
-}
foreign import ccall "sk_path_add_path_offset" sk_path_add_path_offset ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> Ptr (Sk_path) -- ^ C argument @"sk_path_t * other"@
  -> CFloat -- ^ C argument @"float dx"@
  -> CFloat -- ^ C argument @"float dy"@
  -> Sk_path_add_mode -- ^ C argument @"sk_path_add_mode_t add_mode"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_add_path_offset'
foreign import ccall "&sk_path_add_path_offset" p'sk_path_add_path_offset ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_path) -> CFloat -> CFloat -> Sk_path_add_mode -> IO (()))

{- | C function signature:

@
void sk_path_add_path_matrix(sk_path_t *cpath, sk_path_t *other, sk_matrix_t *matrix, sk_path_add_mode_t add_mode)
@
-}
foreign import ccall "sk_path_add_path_matrix" sk_path_add_path_matrix ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> Ptr (Sk_path) -- ^ C argument @"sk_path_t * other"@
  -> Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * matrix"@
  -> Sk_path_add_mode -- ^ C argument @"sk_path_add_mode_t add_mode"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_add_path_matrix'
foreign import ccall "&sk_path_add_path_matrix" p'sk_path_add_path_matrix ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_path) -> Ptr (Sk_matrix) -> Sk_path_add_mode -> IO (()))

{- | C function signature:

@
void sk_path_add_path(sk_path_t *cpath, sk_path_t *other, sk_path_add_mode_t add_mode)
@
-}
foreign import ccall "sk_path_add_path" sk_path_add_path ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> Ptr (Sk_path) -- ^ C argument @"sk_path_t * other"@
  -> Sk_path_add_mode -- ^ C argument @"sk_path_add_mode_t add_mode"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_add_path'
foreign import ccall "&sk_path_add_path" p'sk_path_add_path ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_path) -> Sk_path_add_mode -> IO (()))

{- | C function signature:

@
void sk_path_add_path_reverse(sk_path_t *cpath, sk_path_t *other)
@
-}
foreign import ccall "sk_path_add_path_reverse" sk_path_add_path_reverse ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> Ptr (Sk_path) -- ^ C argument @"sk_path_t * other"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_add_path_reverse'
foreign import ccall "&sk_path_add_path_reverse" p'sk_path_add_path_reverse ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_path) -> IO (()))

{- | C function signature:

@
void sk_path_reset(sk_path_t *cpath)
@
-}
foreign import ccall "sk_path_reset" sk_path_reset ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_reset'
foreign import ccall "&sk_path_reset" p'sk_path_reset ::
  FunPtr (Ptr (Sk_path) -> IO (()))

{- | C function signature:

@
void sk_path_rewind(sk_path_t *cpath)
@
-}
foreign import ccall "sk_path_rewind" sk_path_rewind ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_rewind'
foreign import ccall "&sk_path_rewind" p'sk_path_rewind ::
  FunPtr (Ptr (Sk_path) -> IO (()))

{- | C function signature:

@
int sk_path_count_points(const sk_path_t *cpath)
@
-}
foreign import ccall "sk_path_count_points" sk_path_count_points ::
  Ptr (Sk_path) -- ^ C argument @"const sk_path_t * cpath"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_path_count_points'
foreign import ccall "&sk_path_count_points" p'sk_path_count_points ::
  FunPtr (Ptr (Sk_path) -> IO (CInt))

{- | C function signature:

@
int sk_path_count_verbs(const sk_path_t *cpath)
@
-}
foreign import ccall "sk_path_count_verbs" sk_path_count_verbs ::
  Ptr (Sk_path) -- ^ C argument @"const sk_path_t * cpath"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_path_count_verbs'
foreign import ccall "&sk_path_count_verbs" p'sk_path_count_verbs ::
  FunPtr (Ptr (Sk_path) -> IO (CInt))

{- | C function signature:

@
void sk_path_get_point(const sk_path_t *cpath, int index, sk_point_t *point)
@
-}
foreign import ccall "sk_path_get_point" sk_path_get_point ::
  Ptr (Sk_path) -- ^ C argument @"const sk_path_t * cpath"@
  -> CInt -- ^ C argument @"int index"@
  -> Ptr (Sk_point) -- ^ C argument @"sk_point_t * point"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_get_point'
foreign import ccall "&sk_path_get_point" p'sk_path_get_point ::
  FunPtr (Ptr (Sk_path) -> CInt -> Ptr (Sk_point) -> IO (()))

{- | C function signature:

@
int sk_path_get_points(const sk_path_t *cpath, sk_point_t *points, int max)
@
-}
foreign import ccall "sk_path_get_points" sk_path_get_points ::
  Ptr (Sk_path) -- ^ C argument @"const sk_path_t * cpath"@
  -> Ptr (Sk_point) -- ^ C argument @"sk_point_t * points"@
  -> CInt -- ^ C argument @"int max"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_path_get_points'
foreign import ccall "&sk_path_get_points" p'sk_path_get_points ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_point) -> CInt -> IO (CInt))

{- | C function signature:

@
_Bool sk_path_contains(const sk_path_t *cpath, float x, float y)
@
-}
foreign import ccall "sk_path_contains" sk_path_contains ::
  Ptr (Sk_path) -- ^ C argument @"const sk_path_t * cpath"@
  -> CFloat -- ^ C argument @"float x"@
  -> CFloat -- ^ C argument @"float y"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_path_contains'
foreign import ccall "&sk_path_contains" p'sk_path_contains ::
  FunPtr (Ptr (Sk_path) -> CFloat -> CFloat -> IO (CBool))

{- | C function signature:

@
_Bool sk_path_parse_svg_string(sk_path_t *cpath, const char *str)
@
-}
foreign import ccall "sk_path_parse_svg_string" sk_path_parse_svg_string ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> Ptr (CChar) -- ^ C argument @"const char * str"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_path_parse_svg_string'
foreign import ccall "&sk_path_parse_svg_string" p'sk_path_parse_svg_string ::
  FunPtr (Ptr (Sk_path) -> Ptr (CChar) -> IO (CBool))

{- | C function signature:

@
void sk_path_to_svg_string(const sk_path_t *cpath, sk_string_t *str)
@
-}
foreign import ccall "sk_path_to_svg_string" sk_path_to_svg_string ::
  Ptr (Sk_path) -- ^ C argument @"const sk_path_t * cpath"@
  -> Ptr (Sk_string) -- ^ C argument @"sk_string_t * str"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_to_svg_string'
foreign import ccall "&sk_path_to_svg_string" p'sk_path_to_svg_string ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_string) -> IO (()))

{- | C function signature:

@
_Bool sk_path_get_last_point(const sk_path_t *cpath, sk_point_t *point)
@
-}
foreign import ccall "sk_path_get_last_point" sk_path_get_last_point ::
  Ptr (Sk_path) -- ^ C argument @"const sk_path_t * cpath"@
  -> Ptr (Sk_point) -- ^ C argument @"sk_point_t * point"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_path_get_last_point'
foreign import ccall "&sk_path_get_last_point" p'sk_path_get_last_point ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_point) -> IO (CBool))

{- | C function signature:

@
int sk_path_convert_conic_to_quads(const sk_point_t *p0, const sk_point_t *p1, const sk_point_t *p2, float w, sk_point_t *pts, int pow2)
@
-}
foreign import ccall "sk_path_convert_conic_to_quads" sk_path_convert_conic_to_quads ::
  Ptr (Sk_point) -- ^ C argument @"const sk_point_t * p0"@
  -> Ptr (Sk_point) -- ^ C argument @"const sk_point_t * p1"@
  -> Ptr (Sk_point) -- ^ C argument @"const sk_point_t * p2"@
  -> CFloat -- ^ C argument @"float w"@
  -> Ptr (Sk_point) -- ^ C argument @"sk_point_t * pts"@
  -> CInt -- ^ C argument @"int pow2"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_path_convert_conic_to_quads'
foreign import ccall "&sk_path_convert_conic_to_quads" p'sk_path_convert_conic_to_quads ::
  FunPtr (Ptr (Sk_point) -> Ptr (Sk_point) -> Ptr (Sk_point) -> CFloat -> Ptr (Sk_point) -> CInt -> IO (CInt))

{- | C function signature:

@
void sk_path_add_poly(sk_path_t *cpath, const sk_point_t *points, int count, _Bool close)
@
-}
foreign import ccall "sk_path_add_poly" sk_path_add_poly ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> Ptr (Sk_point) -- ^ C argument @"const sk_point_t * points"@
  -> CInt -- ^ C argument @"int count"@
  -> CBool -- ^ C argument @"_Bool close"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_add_poly'
foreign import ccall "&sk_path_add_poly" p'sk_path_add_poly ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_point) -> CInt -> CBool -> IO (()))

{- | C function signature:

@
uint32_t sk_path_get_segment_masks(sk_path_t *cpath)
@
-}
foreign import ccall "sk_path_get_segment_masks" sk_path_get_segment_masks ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> IO (Word32) -- ^ C return type: @"uint32_t"@

-- | Function pointer to 'sk_path_get_segment_masks'
foreign import ccall "&sk_path_get_segment_masks" p'sk_path_get_segment_masks ::
  FunPtr (Ptr (Sk_path) -> IO (Word32))

{- | C function signature:

@
_Bool sk_path_is_oval(sk_path_t *cpath, sk_rect_t *bounds)
@
-}
foreign import ccall "sk_path_is_oval" sk_path_is_oval ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> Ptr (Sk_rect) -- ^ C argument @"sk_rect_t * bounds"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_path_is_oval'
foreign import ccall "&sk_path_is_oval" p'sk_path_is_oval ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_rect) -> IO (CBool))

{- | C function signature:

@
_Bool sk_path_is_rrect(sk_path_t *cpath, sk_rrect_t *bounds)
@
-}
foreign import ccall "sk_path_is_rrect" sk_path_is_rrect ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> Ptr (Sk_rrect) -- ^ C argument @"sk_rrect_t * bounds"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_path_is_rrect'
foreign import ccall "&sk_path_is_rrect" p'sk_path_is_rrect ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_rrect) -> IO (CBool))

{- | C function signature:

@
_Bool sk_path_is_line(sk_path_t *cpath, sk_point_t line[2])
@
-}
foreign import ccall "sk_path_is_line" sk_path_is_line ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> Ptr (Sk_point) -- ^ C argument @"sk_point_t [2] line"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_path_is_line'
foreign import ccall "&sk_path_is_line" p'sk_path_is_line ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_point) -> IO (CBool))

{- | C function signature:

@
_Bool sk_path_is_rect(sk_path_t *cpath, sk_rect_t *rect, _Bool *isClosed, sk_path_direction_t *direction)
@
-}
foreign import ccall "sk_path_is_rect" sk_path_is_rect ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> Ptr (Sk_rect) -- ^ C argument @"sk_rect_t * rect"@
  -> Ptr (CBool) -- ^ C argument @"_Bool * isClosed"@
  -> Ptr (Sk_path_direction) -- ^ C argument @"sk_path_direction_t * direction"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_path_is_rect'
foreign import ccall "&sk_path_is_rect" p'sk_path_is_rect ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_rect) -> Ptr (CBool) -> Ptr (Sk_path_direction) -> IO (CBool))

{- | C function signature:

@
_Bool sk_path_is_convex(const sk_path_t *cpath)
@
-}
foreign import ccall "sk_path_is_convex" sk_path_is_convex ::
  Ptr (Sk_path) -- ^ C argument @"const sk_path_t * cpath"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_path_is_convex'
foreign import ccall "&sk_path_is_convex" p'sk_path_is_convex ::
  FunPtr (Ptr (Sk_path) -> IO (CBool))

{- | C function signature:

@
sk_path_iterator_t *sk_path_create_iter(sk_path_t *cpath, int forceClose)
@
-}
foreign import ccall "sk_path_create_iter" sk_path_create_iter ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> CInt -- ^ C argument @"int forceClose"@
  -> IO (Ptr (Sk_path_iterator)) -- ^ C return type: @"sk_path_iterator_t *"@

-- | Function pointer to 'sk_path_create_iter'
foreign import ccall "&sk_path_create_iter" p'sk_path_create_iter ::
  FunPtr (Ptr (Sk_path) -> CInt -> IO (Ptr (Sk_path_iterator)))

{- | C function signature:

@
sk_path_verb_t sk_path_iter_next(sk_path_iterator_t *iterator, sk_point_t points[4])
@
-}
foreign import ccall "sk_path_iter_next" sk_path_iter_next ::
  Ptr (Sk_path_iterator) -- ^ C argument @"sk_path_iterator_t * iterator"@
  -> Ptr (Sk_point) -- ^ C argument @"sk_point_t [4] points"@
  -> IO (Sk_path_verb) -- ^ C return type: @"sk_path_verb_t"@

-- | Function pointer to 'sk_path_iter_next'
foreign import ccall "&sk_path_iter_next" p'sk_path_iter_next ::
  FunPtr (Ptr (Sk_path_iterator) -> Ptr (Sk_point) -> IO (Sk_path_verb))

{- | C function signature:

@
float sk_path_iter_conic_weight(sk_path_iterator_t *iterator)
@
-}
foreign import ccall "sk_path_iter_conic_weight" sk_path_iter_conic_weight ::
  Ptr (Sk_path_iterator) -- ^ C argument @"sk_path_iterator_t * iterator"@
  -> IO (CFloat) -- ^ C return type: @"float"@

-- | Function pointer to 'sk_path_iter_conic_weight'
foreign import ccall "&sk_path_iter_conic_weight" p'sk_path_iter_conic_weight ::
  FunPtr (Ptr (Sk_path_iterator) -> IO (CFloat))

{- | C function signature:

@
int sk_path_iter_is_close_line(sk_path_iterator_t *iterator)
@
-}
foreign import ccall "sk_path_iter_is_close_line" sk_path_iter_is_close_line ::
  Ptr (Sk_path_iterator) -- ^ C argument @"sk_path_iterator_t * iterator"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_path_iter_is_close_line'
foreign import ccall "&sk_path_iter_is_close_line" p'sk_path_iter_is_close_line ::
  FunPtr (Ptr (Sk_path_iterator) -> IO (CInt))

{- | C function signature:

@
int sk_path_iter_is_closed_contour(sk_path_iterator_t *iterator)
@
-}
foreign import ccall "sk_path_iter_is_closed_contour" sk_path_iter_is_closed_contour ::
  Ptr (Sk_path_iterator) -- ^ C argument @"sk_path_iterator_t * iterator"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_path_iter_is_closed_contour'
foreign import ccall "&sk_path_iter_is_closed_contour" p'sk_path_iter_is_closed_contour ::
  FunPtr (Ptr (Sk_path_iterator) -> IO (CInt))

{- | C function signature:

@
void sk_path_iter_destroy(sk_path_iterator_t *iterator)
@
-}
foreign import ccall "sk_path_iter_destroy" sk_path_iter_destroy ::
  Ptr (Sk_path_iterator) -- ^ C argument @"sk_path_iterator_t * iterator"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_iter_destroy'
foreign import ccall "&sk_path_iter_destroy" p'sk_path_iter_destroy ::
  FunPtr (Ptr (Sk_path_iterator) -> IO (()))

{- | C function signature:

@
sk_path_rawiterator_t *sk_path_create_rawiter(sk_path_t *cpath)
@
-}
foreign import ccall "sk_path_create_rawiter" sk_path_create_rawiter ::
  Ptr (Sk_path) -- ^ C argument @"sk_path_t * cpath"@
  -> IO (Ptr (Sk_path_rawiterator)) -- ^ C return type: @"sk_path_rawiterator_t *"@

-- | Function pointer to 'sk_path_create_rawiter'
foreign import ccall "&sk_path_create_rawiter" p'sk_path_create_rawiter ::
  FunPtr (Ptr (Sk_path) -> IO (Ptr (Sk_path_rawiterator)))

{- | C function signature:

@
sk_path_verb_t sk_path_rawiter_peek(sk_path_rawiterator_t *iterator)
@
-}
foreign import ccall "sk_path_rawiter_peek" sk_path_rawiter_peek ::
  Ptr (Sk_path_rawiterator) -- ^ C argument @"sk_path_rawiterator_t * iterator"@
  -> IO (Sk_path_verb) -- ^ C return type: @"sk_path_verb_t"@

-- | Function pointer to 'sk_path_rawiter_peek'
foreign import ccall "&sk_path_rawiter_peek" p'sk_path_rawiter_peek ::
  FunPtr (Ptr (Sk_path_rawiterator) -> IO (Sk_path_verb))

{- | C function signature:

@
sk_path_verb_t sk_path_rawiter_next(sk_path_rawiterator_t *iterator, sk_point_t points[4])
@
-}
foreign import ccall "sk_path_rawiter_next" sk_path_rawiter_next ::
  Ptr (Sk_path_rawiterator) -- ^ C argument @"sk_path_rawiterator_t * iterator"@
  -> Ptr (Sk_point) -- ^ C argument @"sk_point_t [4] points"@
  -> IO (Sk_path_verb) -- ^ C return type: @"sk_path_verb_t"@

-- | Function pointer to 'sk_path_rawiter_next'
foreign import ccall "&sk_path_rawiter_next" p'sk_path_rawiter_next ::
  FunPtr (Ptr (Sk_path_rawiterator) -> Ptr (Sk_point) -> IO (Sk_path_verb))

{- | C function signature:

@
float sk_path_rawiter_conic_weight(sk_path_rawiterator_t *iterator)
@
-}
foreign import ccall "sk_path_rawiter_conic_weight" sk_path_rawiter_conic_weight ::
  Ptr (Sk_path_rawiterator) -- ^ C argument @"sk_path_rawiterator_t * iterator"@
  -> IO (CFloat) -- ^ C return type: @"float"@

-- | Function pointer to 'sk_path_rawiter_conic_weight'
foreign import ccall "&sk_path_rawiter_conic_weight" p'sk_path_rawiter_conic_weight ::
  FunPtr (Ptr (Sk_path_rawiterator) -> IO (CFloat))

{- | C function signature:

@
void sk_path_rawiter_destroy(sk_path_rawiterator_t *iterator)
@
-}
foreign import ccall "sk_path_rawiter_destroy" sk_path_rawiter_destroy ::
  Ptr (Sk_path_rawiterator) -- ^ C argument @"sk_path_rawiterator_t * iterator"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_rawiter_destroy'
foreign import ccall "&sk_path_rawiter_destroy" p'sk_path_rawiter_destroy ::
  FunPtr (Ptr (Sk_path_rawiterator) -> IO (()))

{- | C function signature:

@
_Bool sk_pathop_op(const sk_path_t *one, const sk_path_t *two, sk_pathop_t op, sk_path_t *result)
@
-}
foreign import ccall "sk_pathop_op" sk_pathop_op ::
  Ptr (Sk_path) -- ^ C argument @"const sk_path_t * one"@
  -> Ptr (Sk_path) -- ^ C argument @"const sk_path_t * two"@
  -> Sk_pathop -- ^ C argument @"sk_pathop_t op"@
  -> Ptr (Sk_path) -- ^ C argument @"sk_path_t * result"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_pathop_op'
foreign import ccall "&sk_pathop_op" p'sk_pathop_op ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_path) -> Sk_pathop -> Ptr (Sk_path) -> IO (CBool))

{- | C function signature:

@
_Bool sk_pathop_simplify(const sk_path_t *path, sk_path_t *result)
@
-}
foreign import ccall "sk_pathop_simplify" sk_pathop_simplify ::
  Ptr (Sk_path) -- ^ C argument @"const sk_path_t * path"@
  -> Ptr (Sk_path) -- ^ C argument @"sk_path_t * result"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_pathop_simplify'
foreign import ccall "&sk_pathop_simplify" p'sk_pathop_simplify ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_path) -> IO (CBool))

{- | C function signature:

@
_Bool sk_pathop_tight_bounds(const sk_path_t *path, sk_rect_t *result)
@
-}
foreign import ccall "sk_pathop_tight_bounds" sk_pathop_tight_bounds ::
  Ptr (Sk_path) -- ^ C argument @"const sk_path_t * path"@
  -> Ptr (Sk_rect) -- ^ C argument @"sk_rect_t * result"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_pathop_tight_bounds'
foreign import ccall "&sk_pathop_tight_bounds" p'sk_pathop_tight_bounds ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_rect) -> IO (CBool))

{- | C function signature:

@
_Bool sk_pathop_as_winding(const sk_path_t *path, sk_path_t *result)
@
-}
foreign import ccall "sk_pathop_as_winding" sk_pathop_as_winding ::
  Ptr (Sk_path) -- ^ C argument @"const sk_path_t * path"@
  -> Ptr (Sk_path) -- ^ C argument @"sk_path_t * result"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_pathop_as_winding'
foreign import ccall "&sk_pathop_as_winding" p'sk_pathop_as_winding ::
  FunPtr (Ptr (Sk_path) -> Ptr (Sk_path) -> IO (CBool))

{- | C function signature:

@
sk_opbuilder_t *sk_opbuilder_new(void)
@
-}
foreign import ccall "sk_opbuilder_new" sk_opbuilder_new ::
  IO (Ptr (Sk_opbuilder)) -- ^ C return type: @"sk_opbuilder_t *"@

-- | Function pointer to 'sk_opbuilder_new'
foreign import ccall "&sk_opbuilder_new" p'sk_opbuilder_new ::
  FunPtr (IO (Ptr (Sk_opbuilder)))

{- | C function signature:

@
void sk_opbuilder_destroy(sk_opbuilder_t *builder)
@
-}
foreign import ccall "sk_opbuilder_destroy" sk_opbuilder_destroy ::
  Ptr (Sk_opbuilder) -- ^ C argument @"sk_opbuilder_t * builder"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_opbuilder_destroy'
foreign import ccall "&sk_opbuilder_destroy" p'sk_opbuilder_destroy ::
  FunPtr (Ptr (Sk_opbuilder) -> IO (()))

{- | C function signature:

@
void sk_opbuilder_add(sk_opbuilder_t *builder, const sk_path_t *path, sk_pathop_t op)
@
-}
foreign import ccall "sk_opbuilder_add" sk_opbuilder_add ::
  Ptr (Sk_opbuilder) -- ^ C argument @"sk_opbuilder_t * builder"@
  -> Ptr (Sk_path) -- ^ C argument @"const sk_path_t * path"@
  -> Sk_pathop -- ^ C argument @"sk_pathop_t op"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_opbuilder_add'
foreign import ccall "&sk_opbuilder_add" p'sk_opbuilder_add ::
  FunPtr (Ptr (Sk_opbuilder) -> Ptr (Sk_path) -> Sk_pathop -> IO (()))

{- | C function signature:

@
_Bool sk_opbuilder_resolve(sk_opbuilder_t *builder, sk_path_t *result)
@
-}
foreign import ccall "sk_opbuilder_resolve" sk_opbuilder_resolve ::
  Ptr (Sk_opbuilder) -- ^ C argument @"sk_opbuilder_t * builder"@
  -> Ptr (Sk_path) -- ^ C argument @"sk_path_t * result"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_opbuilder_resolve'
foreign import ccall "&sk_opbuilder_resolve" p'sk_opbuilder_resolve ::
  FunPtr (Ptr (Sk_opbuilder) -> Ptr (Sk_path) -> IO (CBool))

{- | C function signature:

@
sk_pathmeasure_t *sk_pathmeasure_new(void)
@
-}
foreign import ccall "sk_pathmeasure_new" sk_pathmeasure_new ::
  IO (Ptr (Sk_pathmeasure)) -- ^ C return type: @"sk_pathmeasure_t *"@

-- | Function pointer to 'sk_pathmeasure_new'
foreign import ccall "&sk_pathmeasure_new" p'sk_pathmeasure_new ::
  FunPtr (IO (Ptr (Sk_pathmeasure)))

{- | C function signature:

@
sk_pathmeasure_t *sk_pathmeasure_new_with_path(const sk_path_t *path, _Bool forceClosed, float resScale)
@
-}
foreign import ccall "sk_pathmeasure_new_with_path" sk_pathmeasure_new_with_path ::
  Ptr (Sk_path) -- ^ C argument @"const sk_path_t * path"@
  -> CBool -- ^ C argument @"_Bool forceClosed"@
  -> CFloat -- ^ C argument @"float resScale"@
  -> IO (Ptr (Sk_pathmeasure)) -- ^ C return type: @"sk_pathmeasure_t *"@

-- | Function pointer to 'sk_pathmeasure_new_with_path'
foreign import ccall "&sk_pathmeasure_new_with_path" p'sk_pathmeasure_new_with_path ::
  FunPtr (Ptr (Sk_path) -> CBool -> CFloat -> IO (Ptr (Sk_pathmeasure)))

{- | C function signature:

@
void sk_pathmeasure_destroy(sk_pathmeasure_t *pathMeasure)
@
-}
foreign import ccall "sk_pathmeasure_destroy" sk_pathmeasure_destroy ::
  Ptr (Sk_pathmeasure) -- ^ C argument @"sk_pathmeasure_t * pathMeasure"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_pathmeasure_destroy'
foreign import ccall "&sk_pathmeasure_destroy" p'sk_pathmeasure_destroy ::
  FunPtr (Ptr (Sk_pathmeasure) -> IO (()))

{- | C function signature:

@
void sk_pathmeasure_set_path(sk_pathmeasure_t *pathMeasure, const sk_path_t *path, _Bool forceClosed)
@
-}
foreign import ccall "sk_pathmeasure_set_path" sk_pathmeasure_set_path ::
  Ptr (Sk_pathmeasure) -- ^ C argument @"sk_pathmeasure_t * pathMeasure"@
  -> Ptr (Sk_path) -- ^ C argument @"const sk_path_t * path"@
  -> CBool -- ^ C argument @"_Bool forceClosed"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_pathmeasure_set_path'
foreign import ccall "&sk_pathmeasure_set_path" p'sk_pathmeasure_set_path ::
  FunPtr (Ptr (Sk_pathmeasure) -> Ptr (Sk_path) -> CBool -> IO (()))

{- | C function signature:

@
float sk_pathmeasure_get_length(sk_pathmeasure_t *pathMeasure)
@
-}
foreign import ccall "sk_pathmeasure_get_length" sk_pathmeasure_get_length ::
  Ptr (Sk_pathmeasure) -- ^ C argument @"sk_pathmeasure_t * pathMeasure"@
  -> IO (CFloat) -- ^ C return type: @"float"@

-- | Function pointer to 'sk_pathmeasure_get_length'
foreign import ccall "&sk_pathmeasure_get_length" p'sk_pathmeasure_get_length ::
  FunPtr (Ptr (Sk_pathmeasure) -> IO (CFloat))

{- | C function signature:

@
_Bool sk_pathmeasure_get_pos_tan(sk_pathmeasure_t *pathMeasure, float distance, sk_point_t *position, sk_vector_t *tangent)
@
-}
foreign import ccall "sk_pathmeasure_get_pos_tan" sk_pathmeasure_get_pos_tan ::
  Ptr (Sk_pathmeasure) -- ^ C argument @"sk_pathmeasure_t * pathMeasure"@
  -> CFloat -- ^ C argument @"float distance"@
  -> Ptr (Sk_point) -- ^ C argument @"sk_point_t * position"@
  -> Ptr (Sk_vector) -- ^ C argument @"sk_vector_t * tangent"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_pathmeasure_get_pos_tan'
foreign import ccall "&sk_pathmeasure_get_pos_tan" p'sk_pathmeasure_get_pos_tan ::
  FunPtr (Ptr (Sk_pathmeasure) -> CFloat -> Ptr (Sk_point) -> Ptr (Sk_vector) -> IO (CBool))

{- | C function signature:

@
_Bool sk_pathmeasure_get_matrix(sk_pathmeasure_t *pathMeasure, float distance, sk_matrix_t *matrix, sk_pathmeasure_matrixflags_t flags)
@
-}
foreign import ccall "sk_pathmeasure_get_matrix" sk_pathmeasure_get_matrix ::
  Ptr (Sk_pathmeasure) -- ^ C argument @"sk_pathmeasure_t * pathMeasure"@
  -> CFloat -- ^ C argument @"float distance"@
  -> Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * matrix"@
  -> Sk_pathmeasure_matrixflags -- ^ C argument @"sk_pathmeasure_matrixflags_t flags"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_pathmeasure_get_matrix'
foreign import ccall "&sk_pathmeasure_get_matrix" p'sk_pathmeasure_get_matrix ::
  FunPtr (Ptr (Sk_pathmeasure) -> CFloat -> Ptr (Sk_matrix) -> Sk_pathmeasure_matrixflags -> IO (CBool))

{- | C function signature:

@
_Bool sk_pathmeasure_get_segment(sk_pathmeasure_t *pathMeasure, float start, float stop, sk_path_t *dst, _Bool startWithMoveTo)
@
-}
foreign import ccall "sk_pathmeasure_get_segment" sk_pathmeasure_get_segment ::
  Ptr (Sk_pathmeasure) -- ^ C argument @"sk_pathmeasure_t * pathMeasure"@
  -> CFloat -- ^ C argument @"float start"@
  -> CFloat -- ^ C argument @"float stop"@
  -> Ptr (Sk_path) -- ^ C argument @"sk_path_t * dst"@
  -> CBool -- ^ C argument @"_Bool startWithMoveTo"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_pathmeasure_get_segment'
foreign import ccall "&sk_pathmeasure_get_segment" p'sk_pathmeasure_get_segment ::
  FunPtr (Ptr (Sk_pathmeasure) -> CFloat -> CFloat -> Ptr (Sk_path) -> CBool -> IO (CBool))

{- | C function signature:

@
_Bool sk_pathmeasure_is_closed(sk_pathmeasure_t *pathMeasure)
@
-}
foreign import ccall "sk_pathmeasure_is_closed" sk_pathmeasure_is_closed ::
  Ptr (Sk_pathmeasure) -- ^ C argument @"sk_pathmeasure_t * pathMeasure"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_pathmeasure_is_closed'
foreign import ccall "&sk_pathmeasure_is_closed" p'sk_pathmeasure_is_closed ::
  FunPtr (Ptr (Sk_pathmeasure) -> IO (CBool))

{- | C function signature:

@
_Bool sk_pathmeasure_next_contour(sk_pathmeasure_t *pathMeasure)
@
-}
foreign import ccall "sk_pathmeasure_next_contour" sk_pathmeasure_next_contour ::
  Ptr (Sk_pathmeasure) -- ^ C argument @"sk_pathmeasure_t * pathMeasure"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_pathmeasure_next_contour'
foreign import ccall "&sk_pathmeasure_next_contour" p'sk_pathmeasure_next_contour ::
  FunPtr (Ptr (Sk_pathmeasure) -> IO (CBool))

{- | C function signature:

@
sk_runtimeeffect_t *sk_runtimeeffect_make_for_color_filter(sk_string_t *sksl, sk_string_t *error)
@
-}
foreign import ccall "sk_runtimeeffect_make_for_color_filter" sk_runtimeeffect_make_for_color_filter ::
  Ptr (Sk_string) -- ^ C argument @"sk_string_t * sksl"@
  -> Ptr (Sk_string) -- ^ C argument @"sk_string_t * error"@
  -> IO (Ptr (Sk_runtimeeffect)) -- ^ C return type: @"sk_runtimeeffect_t *"@

-- | Function pointer to 'sk_runtimeeffect_make_for_color_filter'
foreign import ccall "&sk_runtimeeffect_make_for_color_filter" p'sk_runtimeeffect_make_for_color_filter ::
  FunPtr (Ptr (Sk_string) -> Ptr (Sk_string) -> IO (Ptr (Sk_runtimeeffect)))

{- | C function signature:

@
sk_runtimeeffect_t *sk_runtimeeffect_make_for_shader(sk_string_t *sksl, sk_string_t *error)
@
-}
foreign import ccall "sk_runtimeeffect_make_for_shader" sk_runtimeeffect_make_for_shader ::
  Ptr (Sk_string) -- ^ C argument @"sk_string_t * sksl"@
  -> Ptr (Sk_string) -- ^ C argument @"sk_string_t * error"@
  -> IO (Ptr (Sk_runtimeeffect)) -- ^ C return type: @"sk_runtimeeffect_t *"@

-- | Function pointer to 'sk_runtimeeffect_make_for_shader'
foreign import ccall "&sk_runtimeeffect_make_for_shader" p'sk_runtimeeffect_make_for_shader ::
  FunPtr (Ptr (Sk_string) -> Ptr (Sk_string) -> IO (Ptr (Sk_runtimeeffect)))

{- | C function signature:

@
sk_runtimeeffect_t *sk_runtimeeffect_make_for_blender(sk_string_t *sksl, sk_string_t *error)
@
-}
foreign import ccall "sk_runtimeeffect_make_for_blender" sk_runtimeeffect_make_for_blender ::
  Ptr (Sk_string) -- ^ C argument @"sk_string_t * sksl"@
  -> Ptr (Sk_string) -- ^ C argument @"sk_string_t * error"@
  -> IO (Ptr (Sk_runtimeeffect)) -- ^ C return type: @"sk_runtimeeffect_t *"@

-- | Function pointer to 'sk_runtimeeffect_make_for_blender'
foreign import ccall "&sk_runtimeeffect_make_for_blender" p'sk_runtimeeffect_make_for_blender ::
  FunPtr (Ptr (Sk_string) -> Ptr (Sk_string) -> IO (Ptr (Sk_runtimeeffect)))

{- | C function signature:

@
void sk_runtimeeffect_unref(sk_runtimeeffect_t *effect)
@
-}
foreign import ccall "sk_runtimeeffect_unref" sk_runtimeeffect_unref ::
  Ptr (Sk_runtimeeffect) -- ^ C argument @"sk_runtimeeffect_t * effect"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_runtimeeffect_unref'
foreign import ccall "&sk_runtimeeffect_unref" p'sk_runtimeeffect_unref ::
  FunPtr (Ptr (Sk_runtimeeffect) -> IO (()))

{- | C function signature:

@
sk_shader_t *sk_runtimeeffect_make_shader(sk_runtimeeffect_t *effect, sk_data_t *uniforms, sk_flattenable_t **children, size_t childCount, const sk_matrix_t *localMatrix)
@
-}
foreign import ccall "sk_runtimeeffect_make_shader" sk_runtimeeffect_make_shader ::
  Ptr (Sk_runtimeeffect) -- ^ C argument @"sk_runtimeeffect_t * effect"@
  -> Ptr (Sk_data) -- ^ C argument @"sk_data_t * uniforms"@
  -> Ptr (Ptr (Sk_flattenable)) -- ^ C argument @"sk_flattenable_t ** children"@
  -> CSize -- ^ C argument @"size_t childCount"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * localMatrix"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_runtimeeffect_make_shader'
foreign import ccall "&sk_runtimeeffect_make_shader" p'sk_runtimeeffect_make_shader ::
  FunPtr (Ptr (Sk_runtimeeffect) -> Ptr (Sk_data) -> Ptr (Ptr (Sk_flattenable)) -> CSize -> Ptr (Sk_matrix) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_colorfilter_t *sk_runtimeeffect_make_color_filter(sk_runtimeeffect_t *effect, sk_data_t *uniforms, sk_flattenable_t **children, size_t childCount)
@
-}
foreign import ccall "sk_runtimeeffect_make_color_filter" sk_runtimeeffect_make_color_filter ::
  Ptr (Sk_runtimeeffect) -- ^ C argument @"sk_runtimeeffect_t * effect"@
  -> Ptr (Sk_data) -- ^ C argument @"sk_data_t * uniforms"@
  -> Ptr (Ptr (Sk_flattenable)) -- ^ C argument @"sk_flattenable_t ** children"@
  -> CSize -- ^ C argument @"size_t childCount"@
  -> IO (Ptr (Sk_colorfilter)) -- ^ C return type: @"sk_colorfilter_t *"@

-- | Function pointer to 'sk_runtimeeffect_make_color_filter'
foreign import ccall "&sk_runtimeeffect_make_color_filter" p'sk_runtimeeffect_make_color_filter ::
  FunPtr (Ptr (Sk_runtimeeffect) -> Ptr (Sk_data) -> Ptr (Ptr (Sk_flattenable)) -> CSize -> IO (Ptr (Sk_colorfilter)))

{- | C function signature:

@
sk_blender_t *sk_runtimeeffect_make_blender(sk_runtimeeffect_t *effect, sk_data_t *uniforms, sk_flattenable_t **children, size_t childCount)
@
-}
foreign import ccall "sk_runtimeeffect_make_blender" sk_runtimeeffect_make_blender ::
  Ptr (Sk_runtimeeffect) -- ^ C argument @"sk_runtimeeffect_t * effect"@
  -> Ptr (Sk_data) -- ^ C argument @"sk_data_t * uniforms"@
  -> Ptr (Ptr (Sk_flattenable)) -- ^ C argument @"sk_flattenable_t ** children"@
  -> CSize -- ^ C argument @"size_t childCount"@
  -> IO (Ptr (Sk_blender)) -- ^ C return type: @"sk_blender_t *"@

-- | Function pointer to 'sk_runtimeeffect_make_blender'
foreign import ccall "&sk_runtimeeffect_make_blender" p'sk_runtimeeffect_make_blender ::
  FunPtr (Ptr (Sk_runtimeeffect) -> Ptr (Sk_data) -> Ptr (Ptr (Sk_flattenable)) -> CSize -> IO (Ptr (Sk_blender)))

{- | C function signature:

@
size_t sk_runtimeeffect_get_uniform_byte_size(const sk_runtimeeffect_t *effect)
@
-}
foreign import ccall "sk_runtimeeffect_get_uniform_byte_size" sk_runtimeeffect_get_uniform_byte_size ::
  Ptr (Sk_runtimeeffect) -- ^ C argument @"const sk_runtimeeffect_t * effect"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_runtimeeffect_get_uniform_byte_size'
foreign import ccall "&sk_runtimeeffect_get_uniform_byte_size" p'sk_runtimeeffect_get_uniform_byte_size ::
  FunPtr (Ptr (Sk_runtimeeffect) -> IO (CSize))

{- | C function signature:

@
size_t sk_runtimeeffect_get_uniforms_size(const sk_runtimeeffect_t *effect)
@
-}
foreign import ccall "sk_runtimeeffect_get_uniforms_size" sk_runtimeeffect_get_uniforms_size ::
  Ptr (Sk_runtimeeffect) -- ^ C argument @"const sk_runtimeeffect_t * effect"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_runtimeeffect_get_uniforms_size'
foreign import ccall "&sk_runtimeeffect_get_uniforms_size" p'sk_runtimeeffect_get_uniforms_size ::
  FunPtr (Ptr (Sk_runtimeeffect) -> IO (CSize))

{- | C function signature:

@
void sk_runtimeeffect_get_uniform_name(const sk_runtimeeffect_t *effect, int index, sk_string_t *name)
@
-}
foreign import ccall "sk_runtimeeffect_get_uniform_name" sk_runtimeeffect_get_uniform_name ::
  Ptr (Sk_runtimeeffect) -- ^ C argument @"const sk_runtimeeffect_t * effect"@
  -> CInt -- ^ C argument @"int index"@
  -> Ptr (Sk_string) -- ^ C argument @"sk_string_t * name"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_runtimeeffect_get_uniform_name'
foreign import ccall "&sk_runtimeeffect_get_uniform_name" p'sk_runtimeeffect_get_uniform_name ::
  FunPtr (Ptr (Sk_runtimeeffect) -> CInt -> Ptr (Sk_string) -> IO (()))

{- | C function signature:

@
void sk_runtimeeffect_get_uniform_from_index(const sk_runtimeeffect_t *effect, int index, sk_runtimeeffect_uniform_t *cuniform)
@
-}
foreign import ccall "sk_runtimeeffect_get_uniform_from_index" sk_runtimeeffect_get_uniform_from_index ::
  Ptr (Sk_runtimeeffect) -- ^ C argument @"const sk_runtimeeffect_t * effect"@
  -> CInt -- ^ C argument @"int index"@
  -> Ptr (Sk_runtimeeffect_uniform) -- ^ C argument @"sk_runtimeeffect_uniform_t * cuniform"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_runtimeeffect_get_uniform_from_index'
foreign import ccall "&sk_runtimeeffect_get_uniform_from_index" p'sk_runtimeeffect_get_uniform_from_index ::
  FunPtr (Ptr (Sk_runtimeeffect) -> CInt -> Ptr (Sk_runtimeeffect_uniform) -> IO (()))

{- | C function signature:

@
void sk_runtimeeffect_get_uniform_from_name(const sk_runtimeeffect_t *effect, const char *name, size_t len, sk_runtimeeffect_uniform_t *cuniform)
@
-}
foreign import ccall "sk_runtimeeffect_get_uniform_from_name" sk_runtimeeffect_get_uniform_from_name ::
  Ptr (Sk_runtimeeffect) -- ^ C argument @"const sk_runtimeeffect_t * effect"@
  -> Ptr (CChar) -- ^ C argument @"const char * name"@
  -> CSize -- ^ C argument @"size_t len"@
  -> Ptr (Sk_runtimeeffect_uniform) -- ^ C argument @"sk_runtimeeffect_uniform_t * cuniform"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_runtimeeffect_get_uniform_from_name'
foreign import ccall "&sk_runtimeeffect_get_uniform_from_name" p'sk_runtimeeffect_get_uniform_from_name ::
  FunPtr (Ptr (Sk_runtimeeffect) -> Ptr (CChar) -> CSize -> Ptr (Sk_runtimeeffect_uniform) -> IO (()))

{- | C function signature:

@
size_t sk_runtimeeffect_get_children_size(const sk_runtimeeffect_t *effect)
@
-}
foreign import ccall "sk_runtimeeffect_get_children_size" sk_runtimeeffect_get_children_size ::
  Ptr (Sk_runtimeeffect) -- ^ C argument @"const sk_runtimeeffect_t * effect"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_runtimeeffect_get_children_size'
foreign import ccall "&sk_runtimeeffect_get_children_size" p'sk_runtimeeffect_get_children_size ::
  FunPtr (Ptr (Sk_runtimeeffect) -> IO (CSize))

{- | C function signature:

@
void sk_runtimeeffect_get_child_name(const sk_runtimeeffect_t *effect, int index, sk_string_t *name)
@
-}
foreign import ccall "sk_runtimeeffect_get_child_name" sk_runtimeeffect_get_child_name ::
  Ptr (Sk_runtimeeffect) -- ^ C argument @"const sk_runtimeeffect_t * effect"@
  -> CInt -- ^ C argument @"int index"@
  -> Ptr (Sk_string) -- ^ C argument @"sk_string_t * name"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_runtimeeffect_get_child_name'
foreign import ccall "&sk_runtimeeffect_get_child_name" p'sk_runtimeeffect_get_child_name ::
  FunPtr (Ptr (Sk_runtimeeffect) -> CInt -> Ptr (Sk_string) -> IO (()))

{- | C function signature:

@
void sk_runtimeeffect_get_child_from_index(const sk_runtimeeffect_t *effect, int index, sk_runtimeeffect_child_t *cchild)
@
-}
foreign import ccall "sk_runtimeeffect_get_child_from_index" sk_runtimeeffect_get_child_from_index ::
  Ptr (Sk_runtimeeffect) -- ^ C argument @"const sk_runtimeeffect_t * effect"@
  -> CInt -- ^ C argument @"int index"@
  -> Ptr (Sk_runtimeeffect_child) -- ^ C argument @"sk_runtimeeffect_child_t * cchild"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_runtimeeffect_get_child_from_index'
foreign import ccall "&sk_runtimeeffect_get_child_from_index" p'sk_runtimeeffect_get_child_from_index ::
  FunPtr (Ptr (Sk_runtimeeffect) -> CInt -> Ptr (Sk_runtimeeffect_child) -> IO (()))

{- | C function signature:

@
void sk_runtimeeffect_get_child_from_name(const sk_runtimeeffect_t *effect, const char *name, size_t len, sk_runtimeeffect_child_t *cchild)
@
-}
foreign import ccall "sk_runtimeeffect_get_child_from_name" sk_runtimeeffect_get_child_from_name ::
  Ptr (Sk_runtimeeffect) -- ^ C argument @"const sk_runtimeeffect_t * effect"@
  -> Ptr (CChar) -- ^ C argument @"const char * name"@
  -> CSize -- ^ C argument @"size_t len"@
  -> Ptr (Sk_runtimeeffect_child) -- ^ C argument @"sk_runtimeeffect_child_t * cchild"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_runtimeeffect_get_child_from_name'
foreign import ccall "&sk_runtimeeffect_get_child_from_name" p'sk_runtimeeffect_get_child_from_name ::
  FunPtr (Ptr (Sk_runtimeeffect) -> Ptr (CChar) -> CSize -> Ptr (Sk_runtimeeffect_child) -> IO (()))

{- | C function signature:

@
_Bool sk_refcnt_unique(const sk_refcnt_t *refcnt)
@
-}
foreign import ccall "sk_refcnt_unique" sk_refcnt_unique ::
  Ptr (Sk_refcnt) -- ^ C argument @"const sk_refcnt_t * refcnt"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_refcnt_unique'
foreign import ccall "&sk_refcnt_unique" p'sk_refcnt_unique ::
  FunPtr (Ptr (Sk_refcnt) -> IO (CBool))

{- | C function signature:

@
int sk_refcnt_get_ref_count(const sk_refcnt_t *refcnt)
@
-}
foreign import ccall "sk_refcnt_get_ref_count" sk_refcnt_get_ref_count ::
  Ptr (Sk_refcnt) -- ^ C argument @"const sk_refcnt_t * refcnt"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_refcnt_get_ref_count'
foreign import ccall "&sk_refcnt_get_ref_count" p'sk_refcnt_get_ref_count ::
  FunPtr (Ptr (Sk_refcnt) -> IO (CInt))

{- | C function signature:

@
void sk_refcnt_safe_ref(sk_refcnt_t *refcnt)
@
-}
foreign import ccall "sk_refcnt_safe_ref" sk_refcnt_safe_ref ::
  Ptr (Sk_refcnt) -- ^ C argument @"sk_refcnt_t * refcnt"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_refcnt_safe_ref'
foreign import ccall "&sk_refcnt_safe_ref" p'sk_refcnt_safe_ref ::
  FunPtr (Ptr (Sk_refcnt) -> IO (()))

{- | C function signature:

@
void sk_refcnt_safe_unref(sk_refcnt_t *refcnt)
@
-}
foreign import ccall "sk_refcnt_safe_unref" sk_refcnt_safe_unref ::
  Ptr (Sk_refcnt) -- ^ C argument @"sk_refcnt_t * refcnt"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_refcnt_safe_unref'
foreign import ccall "&sk_refcnt_safe_unref" p'sk_refcnt_safe_unref ::
  FunPtr (Ptr (Sk_refcnt) -> IO (()))

{- | C function signature:

@
_Bool sk_nvrefcnt_unique(const sk_nvrefcnt_t *refcnt)
@
-}
foreign import ccall "sk_nvrefcnt_unique" sk_nvrefcnt_unique ::
  Ptr (Sk_nvrefcnt) -- ^ C argument @"const sk_nvrefcnt_t * refcnt"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_nvrefcnt_unique'
foreign import ccall "&sk_nvrefcnt_unique" p'sk_nvrefcnt_unique ::
  FunPtr (Ptr (Sk_nvrefcnt) -> IO (CBool))

{- | C function signature:

@
int sk_nvrefcnt_get_ref_count(const sk_nvrefcnt_t *refcnt)
@
-}
foreign import ccall "sk_nvrefcnt_get_ref_count" sk_nvrefcnt_get_ref_count ::
  Ptr (Sk_nvrefcnt) -- ^ C argument @"const sk_nvrefcnt_t * refcnt"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_nvrefcnt_get_ref_count'
foreign import ccall "&sk_nvrefcnt_get_ref_count" p'sk_nvrefcnt_get_ref_count ::
  FunPtr (Ptr (Sk_nvrefcnt) -> IO (CInt))

{- | C function signature:

@
void sk_nvrefcnt_safe_ref(sk_nvrefcnt_t *refcnt)
@
-}
foreign import ccall "sk_nvrefcnt_safe_ref" sk_nvrefcnt_safe_ref ::
  Ptr (Sk_nvrefcnt) -- ^ C argument @"sk_nvrefcnt_t * refcnt"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_nvrefcnt_safe_ref'
foreign import ccall "&sk_nvrefcnt_safe_ref" p'sk_nvrefcnt_safe_ref ::
  FunPtr (Ptr (Sk_nvrefcnt) -> IO (()))

{- | C function signature:

@
void sk_nvrefcnt_safe_unref(sk_nvrefcnt_t *refcnt)
@
-}
foreign import ccall "sk_nvrefcnt_safe_unref" sk_nvrefcnt_safe_unref ::
  Ptr (Sk_nvrefcnt) -- ^ C argument @"sk_nvrefcnt_t * refcnt"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_nvrefcnt_safe_unref'
foreign import ccall "&sk_nvrefcnt_safe_unref" p'sk_nvrefcnt_safe_unref ::
  FunPtr (Ptr (Sk_nvrefcnt) -> IO (()))

{- | C function signature:

@
sk_colortype_t sk_colortype_get_default_8888(void)
@
-}
foreign import ccall "sk_colortype_get_default_8888" sk_colortype_get_default_8888 ::
  IO (Sk_colortype) -- ^ C return type: @"sk_colortype_t"@

-- | Function pointer to 'sk_colortype_get_default_8888'
foreign import ccall "&sk_colortype_get_default_8888" p'sk_colortype_get_default_8888 ::
  FunPtr (IO (Sk_colortype))

{- | C function signature:

@
int sk_version_get_milestone(void)
@
-}
foreign import ccall "sk_version_get_milestone" sk_version_get_milestone ::
  IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_version_get_milestone'
foreign import ccall "&sk_version_get_milestone" p'sk_version_get_milestone ::
  FunPtr (IO (CInt))

{- | C function signature:

@
int sk_version_get_increment(void)
@
-}
foreign import ccall "sk_version_get_increment" sk_version_get_increment ::
  IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_version_get_increment'
foreign import ccall "&sk_version_get_increment" p'sk_version_get_increment ::
  FunPtr (IO (CInt))

{- | C function signature:

@
const char *sk_version_get_string(void)
@
-}
foreign import ccall "sk_version_get_string" sk_version_get_string ::
  IO (Ptr (CChar)) -- ^ C return type: @"const char *"@

-- | Function pointer to 'sk_version_get_string'
foreign import ccall "&sk_version_get_string" p'sk_version_get_string ::
  FunPtr (IO (Ptr (CChar)))

{- | C function signature:

@
void sk_document_unref(sk_document_t *document)
@
-}
foreign import ccall "sk_document_unref" sk_document_unref ::
  Ptr (Sk_document) -- ^ C argument @"sk_document_t * document"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_document_unref'
foreign import ccall "&sk_document_unref" p'sk_document_unref ::
  FunPtr (Ptr (Sk_document) -> IO (()))

{- | C function signature:

@
sk_document_t *sk_document_create_pdf_from_stream(sk_wstream_t *stream)
@
-}
foreign import ccall "sk_document_create_pdf_from_stream" sk_document_create_pdf_from_stream ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * stream"@
  -> IO (Ptr (Sk_document)) -- ^ C return type: @"sk_document_t *"@

-- | Function pointer to 'sk_document_create_pdf_from_stream'
foreign import ccall "&sk_document_create_pdf_from_stream" p'sk_document_create_pdf_from_stream ::
  FunPtr (Ptr (Sk_wstream) -> IO (Ptr (Sk_document)))

{- | C function signature:

@
sk_document_t *sk_document_create_pdf_from_stream_with_metadata(sk_wstream_t *stream, const sk_document_pdf_metadata_t *metadata)
@
-}
foreign import ccall "sk_document_create_pdf_from_stream_with_metadata" sk_document_create_pdf_from_stream_with_metadata ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * stream"@
  -> Ptr (Sk_document_pdf_metadata) -- ^ C argument @"const sk_document_pdf_metadata_t * metadata"@
  -> IO (Ptr (Sk_document)) -- ^ C return type: @"sk_document_t *"@

-- | Function pointer to 'sk_document_create_pdf_from_stream_with_metadata'
foreign import ccall "&sk_document_create_pdf_from_stream_with_metadata" p'sk_document_create_pdf_from_stream_with_metadata ::
  FunPtr (Ptr (Sk_wstream) -> Ptr (Sk_document_pdf_metadata) -> IO (Ptr (Sk_document)))

{- | C function signature:

@
sk_document_t *sk_document_create_xps_from_stream(sk_wstream_t *stream, float dpi)
@
-}
foreign import ccall "sk_document_create_xps_from_stream" sk_document_create_xps_from_stream ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * stream"@
  -> CFloat -- ^ C argument @"float dpi"@
  -> IO (Ptr (Sk_document)) -- ^ C return type: @"sk_document_t *"@

-- | Function pointer to 'sk_document_create_xps_from_stream'
foreign import ccall "&sk_document_create_xps_from_stream" p'sk_document_create_xps_from_stream ::
  FunPtr (Ptr (Sk_wstream) -> CFloat -> IO (Ptr (Sk_document)))

{- | C function signature:

@
sk_canvas_t *sk_document_begin_page(sk_document_t *document, float width, float height, const sk_rect_t *content)
@
-}
foreign import ccall "sk_document_begin_page" sk_document_begin_page ::
  Ptr (Sk_document) -- ^ C argument @"sk_document_t * document"@
  -> CFloat -- ^ C argument @"float width"@
  -> CFloat -- ^ C argument @"float height"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * content"@
  -> IO (Ptr (Sk_canvas)) -- ^ C return type: @"sk_canvas_t *"@

-- | Function pointer to 'sk_document_begin_page'
foreign import ccall "&sk_document_begin_page" p'sk_document_begin_page ::
  FunPtr (Ptr (Sk_document) -> CFloat -> CFloat -> Ptr (Sk_rect) -> IO (Ptr (Sk_canvas)))

{- | C function signature:

@
void sk_document_end_page(sk_document_t *document)
@
-}
foreign import ccall "sk_document_end_page" sk_document_end_page ::
  Ptr (Sk_document) -- ^ C argument @"sk_document_t * document"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_document_end_page'
foreign import ccall "&sk_document_end_page" p'sk_document_end_page ::
  FunPtr (Ptr (Sk_document) -> IO (()))

{- | C function signature:

@
void sk_document_close(sk_document_t *document)
@
-}
foreign import ccall "sk_document_close" sk_document_close ::
  Ptr (Sk_document) -- ^ C argument @"sk_document_t * document"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_document_close'
foreign import ccall "&sk_document_close" p'sk_document_close ::
  FunPtr (Ptr (Sk_document) -> IO (()))

{- | C function signature:

@
void sk_document_abort(sk_document_t *document)
@
-}
foreign import ccall "sk_document_abort" sk_document_abort ::
  Ptr (Sk_document) -- ^ C argument @"sk_document_t * document"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_document_abort'
foreign import ccall "&sk_document_abort" p'sk_document_abort ::
  FunPtr (Ptr (Sk_document) -> IO (()))

{- | C function signature:

@
void sk_image_ref(const sk_image_t *cimage)
@
-}
foreign import ccall "sk_image_ref" sk_image_ref ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * cimage"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_image_ref'
foreign import ccall "&sk_image_ref" p'sk_image_ref ::
  FunPtr (Ptr (Sk_image) -> IO (()))

{- | C function signature:

@
void sk_image_unref(const sk_image_t *cimage)
@
-}
foreign import ccall "sk_image_unref" sk_image_unref ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * cimage"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_image_unref'
foreign import ccall "&sk_image_unref" p'sk_image_unref ::
  FunPtr (Ptr (Sk_image) -> IO (()))

{- | C function signature:

@
sk_image_t *sk_image_new_raster_copy(const sk_imageinfo_t *cinfo, const void *pixels, size_t rowBytes)
@
-}
foreign import ccall "sk_image_new_raster_copy" sk_image_new_raster_copy ::
  Ptr (Sk_imageinfo) -- ^ C argument @"const sk_imageinfo_t * cinfo"@
  -> Ptr (()) -- ^ C argument @"const void * pixels"@
  -> CSize -- ^ C argument @"size_t rowBytes"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_image_new_raster_copy'
foreign import ccall "&sk_image_new_raster_copy" p'sk_image_new_raster_copy ::
  FunPtr (Ptr (Sk_imageinfo) -> Ptr (()) -> CSize -> IO (Ptr (Sk_image)))

{- | C function signature:

@
sk_image_t *sk_image_new_raster_copy_with_pixmap(const sk_pixmap_t *pixmap)
@
-}
foreign import ccall "sk_image_new_raster_copy_with_pixmap" sk_image_new_raster_copy_with_pixmap ::
  Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * pixmap"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_image_new_raster_copy_with_pixmap'
foreign import ccall "&sk_image_new_raster_copy_with_pixmap" p'sk_image_new_raster_copy_with_pixmap ::
  FunPtr (Ptr (Sk_pixmap) -> IO (Ptr (Sk_image)))

{- | C function signature:

@
sk_image_t *sk_image_new_raster_data(const sk_imageinfo_t *cinfo, sk_data_t *pixels, size_t rowBytes)
@
-}
foreign import ccall "sk_image_new_raster_data" sk_image_new_raster_data ::
  Ptr (Sk_imageinfo) -- ^ C argument @"const sk_imageinfo_t * cinfo"@
  -> Ptr (Sk_data) -- ^ C argument @"sk_data_t * pixels"@
  -> CSize -- ^ C argument @"size_t rowBytes"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_image_new_raster_data'
foreign import ccall "&sk_image_new_raster_data" p'sk_image_new_raster_data ::
  FunPtr (Ptr (Sk_imageinfo) -> Ptr (Sk_data) -> CSize -> IO (Ptr (Sk_image)))

{- | C function signature:

@
sk_image_t *sk_image_new_raster(const sk_pixmap_t *pixmap, sk_image_raster_release_proc releaseProc, void *context)
@
-}
foreign import ccall "sk_image_new_raster" sk_image_new_raster ::
  Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * pixmap"@
  -> FunPtr Sk_image_raster_release_proc -- ^ C argument @"sk_image_raster_release_proc releaseProc"@
  -> Ptr (()) -- ^ C argument @"void * context"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_image_new_raster'
foreign import ccall "&sk_image_new_raster" p'sk_image_new_raster ::
  FunPtr (Ptr (Sk_pixmap) -> FunPtr Sk_image_raster_release_proc -> Ptr (()) -> IO (Ptr (Sk_image)))

{- | C function signature:

@
sk_image_t *sk_image_new_from_bitmap(const sk_bitmap_t *cbitmap)
@
-}
foreign import ccall "sk_image_new_from_bitmap" sk_image_new_from_bitmap ::
  Ptr (Sk_bitmap) -- ^ C argument @"const sk_bitmap_t * cbitmap"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_image_new_from_bitmap'
foreign import ccall "&sk_image_new_from_bitmap" p'sk_image_new_from_bitmap ::
  FunPtr (Ptr (Sk_bitmap) -> IO (Ptr (Sk_image)))

{- | C function signature:

@
sk_image_t *sk_image_new_from_encoded(const sk_data_t *cdata)
@
-}
foreign import ccall "sk_image_new_from_encoded" sk_image_new_from_encoded ::
  Ptr (Sk_data) -- ^ C argument @"const sk_data_t * cdata"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_image_new_from_encoded'
foreign import ccall "&sk_image_new_from_encoded" p'sk_image_new_from_encoded ::
  FunPtr (Ptr (Sk_data) -> IO (Ptr (Sk_image)))

{- | C function signature:

@
sk_image_t *sk_image_new_from_texture(gr_recording_context_t *context, const gr_backendtexture_t *texture, gr_surfaceorigin_t origin, sk_colortype_t colorType, sk_alphatype_t alpha, const sk_colorspace_t *colorSpace, const sk_image_texture_release_proc releaseProc, void *releaseContext)
@
-}
foreign import ccall "sk_image_new_from_texture" sk_image_new_from_texture ::
  Ptr (Gr_recording_context) -- ^ C argument @"gr_recording_context_t * context"@
  -> Ptr (Gr_backendtexture) -- ^ C argument @"const gr_backendtexture_t * texture"@
  -> Gr_surfaceorigin -- ^ C argument @"gr_surfaceorigin_t origin"@
  -> Sk_colortype -- ^ C argument @"sk_colortype_t colorType"@
  -> Sk_alphatype -- ^ C argument @"sk_alphatype_t alpha"@
  -> Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * colorSpace"@
  -> FunPtr Sk_image_texture_release_proc -- ^ C argument @"const sk_image_texture_release_proc releaseProc"@
  -> Ptr (()) -- ^ C argument @"void * releaseContext"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_image_new_from_texture'
foreign import ccall "&sk_image_new_from_texture" p'sk_image_new_from_texture ::
  FunPtr (Ptr (Gr_recording_context) -> Ptr (Gr_backendtexture) -> Gr_surfaceorigin -> Sk_colortype -> Sk_alphatype -> Ptr (Sk_colorspace) -> FunPtr Sk_image_texture_release_proc -> Ptr (()) -> IO (Ptr (Sk_image)))

{- | C function signature:

@
sk_image_t *sk_image_new_from_adopted_texture(gr_recording_context_t *context, const gr_backendtexture_t *texture, gr_surfaceorigin_t origin, sk_colortype_t colorType, sk_alphatype_t alpha, const sk_colorspace_t *colorSpace)
@
-}
foreign import ccall "sk_image_new_from_adopted_texture" sk_image_new_from_adopted_texture ::
  Ptr (Gr_recording_context) -- ^ C argument @"gr_recording_context_t * context"@
  -> Ptr (Gr_backendtexture) -- ^ C argument @"const gr_backendtexture_t * texture"@
  -> Gr_surfaceorigin -- ^ C argument @"gr_surfaceorigin_t origin"@
  -> Sk_colortype -- ^ C argument @"sk_colortype_t colorType"@
  -> Sk_alphatype -- ^ C argument @"sk_alphatype_t alpha"@
  -> Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * colorSpace"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_image_new_from_adopted_texture'
foreign import ccall "&sk_image_new_from_adopted_texture" p'sk_image_new_from_adopted_texture ::
  FunPtr (Ptr (Gr_recording_context) -> Ptr (Gr_backendtexture) -> Gr_surfaceorigin -> Sk_colortype -> Sk_alphatype -> Ptr (Sk_colorspace) -> IO (Ptr (Sk_image)))

{- | C function signature:

@
sk_image_t *sk_image_new_from_picture(sk_picture_t *picture, const sk_isize_t *dimensions, const sk_matrix_t *cmatrix, const sk_paint_t *paint, _Bool useFloatingPointBitDepth, const sk_colorspace_t *colorSpace, const sk_surfaceprops_t *props)
@
-}
foreign import ccall "sk_image_new_from_picture" sk_image_new_from_picture ::
  Ptr (Sk_picture) -- ^ C argument @"sk_picture_t * picture"@
  -> Ptr (Sk_isize) -- ^ C argument @"const sk_isize_t * dimensions"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * cmatrix"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * paint"@
  -> CBool -- ^ C argument @"_Bool useFloatingPointBitDepth"@
  -> Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * colorSpace"@
  -> Ptr (Sk_surfaceprops) -- ^ C argument @"const sk_surfaceprops_t * props"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_image_new_from_picture'
foreign import ccall "&sk_image_new_from_picture" p'sk_image_new_from_picture ::
  FunPtr (Ptr (Sk_picture) -> Ptr (Sk_isize) -> Ptr (Sk_matrix) -> Ptr (Sk_paint) -> CBool -> Ptr (Sk_colorspace) -> Ptr (Sk_surfaceprops) -> IO (Ptr (Sk_image)))

{- | C function signature:

@
int sk_image_get_width(const sk_image_t *cimage)
@
-}
foreign import ccall "sk_image_get_width" sk_image_get_width ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * cimage"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_image_get_width'
foreign import ccall "&sk_image_get_width" p'sk_image_get_width ::
  FunPtr (Ptr (Sk_image) -> IO (CInt))

{- | C function signature:

@
int sk_image_get_height(const sk_image_t *cimage)
@
-}
foreign import ccall "sk_image_get_height" sk_image_get_height ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * cimage"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_image_get_height'
foreign import ccall "&sk_image_get_height" p'sk_image_get_height ::
  FunPtr (Ptr (Sk_image) -> IO (CInt))

{- | C function signature:

@
uint32_t sk_image_get_unique_id(const sk_image_t *cimage)
@
-}
foreign import ccall "sk_image_get_unique_id" sk_image_get_unique_id ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * cimage"@
  -> IO (Word32) -- ^ C return type: @"uint32_t"@

-- | Function pointer to 'sk_image_get_unique_id'
foreign import ccall "&sk_image_get_unique_id" p'sk_image_get_unique_id ::
  FunPtr (Ptr (Sk_image) -> IO (Word32))

{- | C function signature:

@
sk_alphatype_t sk_image_get_alpha_type(const sk_image_t *image)
@
-}
foreign import ccall "sk_image_get_alpha_type" sk_image_get_alpha_type ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * image"@
  -> IO (Sk_alphatype) -- ^ C return type: @"sk_alphatype_t"@

-- | Function pointer to 'sk_image_get_alpha_type'
foreign import ccall "&sk_image_get_alpha_type" p'sk_image_get_alpha_type ::
  FunPtr (Ptr (Sk_image) -> IO (Sk_alphatype))

{- | C function signature:

@
sk_colortype_t sk_image_get_color_type(const sk_image_t *image)
@
-}
foreign import ccall "sk_image_get_color_type" sk_image_get_color_type ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * image"@
  -> IO (Sk_colortype) -- ^ C return type: @"sk_colortype_t"@

-- | Function pointer to 'sk_image_get_color_type'
foreign import ccall "&sk_image_get_color_type" p'sk_image_get_color_type ::
  FunPtr (Ptr (Sk_image) -> IO (Sk_colortype))

{- | C function signature:

@
sk_colorspace_t *sk_image_get_colorspace(const sk_image_t *image)
@
-}
foreign import ccall "sk_image_get_colorspace" sk_image_get_colorspace ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * image"@
  -> IO (Ptr (Sk_colorspace)) -- ^ C return type: @"sk_colorspace_t *"@

-- | Function pointer to 'sk_image_get_colorspace'
foreign import ccall "&sk_image_get_colorspace" p'sk_image_get_colorspace ::
  FunPtr (Ptr (Sk_image) -> IO (Ptr (Sk_colorspace)))

{- | C function signature:

@
_Bool sk_image_is_alpha_only(const sk_image_t *image)
@
-}
foreign import ccall "sk_image_is_alpha_only" sk_image_is_alpha_only ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * image"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_image_is_alpha_only'
foreign import ccall "&sk_image_is_alpha_only" p'sk_image_is_alpha_only ::
  FunPtr (Ptr (Sk_image) -> IO (CBool))

{- | C function signature:

@
sk_shader_t *sk_image_make_shader(const sk_image_t *image, sk_shader_tilemode_t tileX, sk_shader_tilemode_t tileY, const sk_sampling_options_t *sampling, const sk_matrix_t *cmatrix)
@
-}
foreign import ccall "sk_image_make_shader" sk_image_make_shader ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * image"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t tileX"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t tileY"@
  -> Ptr (Sk_sampling_options) -- ^ C argument @"const sk_sampling_options_t * sampling"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * cmatrix"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_image_make_shader'
foreign import ccall "&sk_image_make_shader" p'sk_image_make_shader ::
  FunPtr (Ptr (Sk_image) -> Sk_shader_tilemode -> Sk_shader_tilemode -> Ptr (Sk_sampling_options) -> Ptr (Sk_matrix) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_shader_t *sk_image_make_raw_shader(const sk_image_t *image, sk_shader_tilemode_t tileX, sk_shader_tilemode_t tileY, const sk_sampling_options_t *sampling, const sk_matrix_t *cmatrix)
@
-}
foreign import ccall "sk_image_make_raw_shader" sk_image_make_raw_shader ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * image"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t tileX"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t tileY"@
  -> Ptr (Sk_sampling_options) -- ^ C argument @"const sk_sampling_options_t * sampling"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * cmatrix"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_image_make_raw_shader'
foreign import ccall "&sk_image_make_raw_shader" p'sk_image_make_raw_shader ::
  FunPtr (Ptr (Sk_image) -> Sk_shader_tilemode -> Sk_shader_tilemode -> Ptr (Sk_sampling_options) -> Ptr (Sk_matrix) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
_Bool sk_image_peek_pixels(const sk_image_t *image, sk_pixmap_t *pixmap)
@
-}
foreign import ccall "sk_image_peek_pixels" sk_image_peek_pixels ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * image"@
  -> Ptr (Sk_pixmap) -- ^ C argument @"sk_pixmap_t * pixmap"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_image_peek_pixels'
foreign import ccall "&sk_image_peek_pixels" p'sk_image_peek_pixels ::
  FunPtr (Ptr (Sk_image) -> Ptr (Sk_pixmap) -> IO (CBool))

{- | C function signature:

@
_Bool sk_image_is_texture_backed(const sk_image_t *image)
@
-}
foreign import ccall "sk_image_is_texture_backed" sk_image_is_texture_backed ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * image"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_image_is_texture_backed'
foreign import ccall "&sk_image_is_texture_backed" p'sk_image_is_texture_backed ::
  FunPtr (Ptr (Sk_image) -> IO (CBool))

{- | C function signature:

@
_Bool sk_image_is_lazy_generated(const sk_image_t *image)
@
-}
foreign import ccall "sk_image_is_lazy_generated" sk_image_is_lazy_generated ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * image"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_image_is_lazy_generated'
foreign import ccall "&sk_image_is_lazy_generated" p'sk_image_is_lazy_generated ::
  FunPtr (Ptr (Sk_image) -> IO (CBool))

{- | C function signature:

@
_Bool sk_image_is_valid(const sk_image_t *image, gr_recording_context_t *context)
@
-}
foreign import ccall "sk_image_is_valid" sk_image_is_valid ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * image"@
  -> Ptr (Gr_recording_context) -- ^ C argument @"gr_recording_context_t * context"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_image_is_valid'
foreign import ccall "&sk_image_is_valid" p'sk_image_is_valid ::
  FunPtr (Ptr (Sk_image) -> Ptr (Gr_recording_context) -> IO (CBool))

{- | C function signature:

@
_Bool sk_image_read_pixels(const sk_image_t *image, const sk_imageinfo_t *dstInfo, void *dstPixels, size_t dstRowBytes, int srcX, int srcY, sk_image_caching_hint_t cachingHint)
@
-}
foreign import ccall "sk_image_read_pixels" sk_image_read_pixels ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * image"@
  -> Ptr (Sk_imageinfo) -- ^ C argument @"const sk_imageinfo_t * dstInfo"@
  -> Ptr (()) -- ^ C argument @"void * dstPixels"@
  -> CSize -- ^ C argument @"size_t dstRowBytes"@
  -> CInt -- ^ C argument @"int srcX"@
  -> CInt -- ^ C argument @"int srcY"@
  -> Sk_image_caching_hint -- ^ C argument @"sk_image_caching_hint_t cachingHint"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_image_read_pixels'
foreign import ccall "&sk_image_read_pixels" p'sk_image_read_pixels ::
  FunPtr (Ptr (Sk_image) -> Ptr (Sk_imageinfo) -> Ptr (()) -> CSize -> CInt -> CInt -> Sk_image_caching_hint -> IO (CBool))

{- | C function signature:

@
_Bool sk_image_read_pixels_into_pixmap(const sk_image_t *image, const sk_pixmap_t *dst, int srcX, int srcY, sk_image_caching_hint_t cachingHint)
@
-}
foreign import ccall "sk_image_read_pixels_into_pixmap" sk_image_read_pixels_into_pixmap ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * image"@
  -> Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * dst"@
  -> CInt -- ^ C argument @"int srcX"@
  -> CInt -- ^ C argument @"int srcY"@
  -> Sk_image_caching_hint -- ^ C argument @"sk_image_caching_hint_t cachingHint"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_image_read_pixels_into_pixmap'
foreign import ccall "&sk_image_read_pixels_into_pixmap" p'sk_image_read_pixels_into_pixmap ::
  FunPtr (Ptr (Sk_image) -> Ptr (Sk_pixmap) -> CInt -> CInt -> Sk_image_caching_hint -> IO (CBool))

{- | C function signature:

@
_Bool sk_image_scale_pixels(const sk_image_t *image, const sk_pixmap_t *dst, const sk_sampling_options_t *sampling, sk_image_caching_hint_t cachingHint)
@
-}
foreign import ccall "sk_image_scale_pixels" sk_image_scale_pixels ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * image"@
  -> Ptr (Sk_pixmap) -- ^ C argument @"const sk_pixmap_t * dst"@
  -> Ptr (Sk_sampling_options) -- ^ C argument @"const sk_sampling_options_t * sampling"@
  -> Sk_image_caching_hint -- ^ C argument @"sk_image_caching_hint_t cachingHint"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_image_scale_pixels'
foreign import ccall "&sk_image_scale_pixels" p'sk_image_scale_pixels ::
  FunPtr (Ptr (Sk_image) -> Ptr (Sk_pixmap) -> Ptr (Sk_sampling_options) -> Sk_image_caching_hint -> IO (CBool))

{- | C function signature:

@
sk_data_t *sk_image_ref_encoded(const sk_image_t *cimage)
@
-}
foreign import ccall "sk_image_ref_encoded" sk_image_ref_encoded ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * cimage"@
  -> IO (Ptr (Sk_data)) -- ^ C return type: @"sk_data_t *"@

-- | Function pointer to 'sk_image_ref_encoded'
foreign import ccall "&sk_image_ref_encoded" p'sk_image_ref_encoded ::
  FunPtr (Ptr (Sk_image) -> IO (Ptr (Sk_data)))

{- | C function signature:

@
sk_image_t *sk_image_make_subset_raster(const sk_image_t *cimage, const sk_irect_t *subset)
@
-}
foreign import ccall "sk_image_make_subset_raster" sk_image_make_subset_raster ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * cimage"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * subset"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_image_make_subset_raster'
foreign import ccall "&sk_image_make_subset_raster" p'sk_image_make_subset_raster ::
  FunPtr (Ptr (Sk_image) -> Ptr (Sk_irect) -> IO (Ptr (Sk_image)))

{- | C function signature:

@
sk_image_t *sk_image_make_subset(const sk_image_t *cimage, gr_direct_context_t *context, const sk_irect_t *subset)
@
-}
foreign import ccall "sk_image_make_subset" sk_image_make_subset ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * cimage"@
  -> Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * subset"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_image_make_subset'
foreign import ccall "&sk_image_make_subset" p'sk_image_make_subset ::
  FunPtr (Ptr (Sk_image) -> Ptr (Gr_direct_context) -> Ptr (Sk_irect) -> IO (Ptr (Sk_image)))

{- | C function signature:

@
sk_image_t *sk_image_make_texture_image(const sk_image_t *cimage, gr_direct_context_t *context, _Bool mipmapped, _Bool budgeted)
@
-}
foreign import ccall "sk_image_make_texture_image" sk_image_make_texture_image ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * cimage"@
  -> Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> CBool -- ^ C argument @"_Bool mipmapped"@
  -> CBool -- ^ C argument @"_Bool budgeted"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_image_make_texture_image'
foreign import ccall "&sk_image_make_texture_image" p'sk_image_make_texture_image ::
  FunPtr (Ptr (Sk_image) -> Ptr (Gr_direct_context) -> CBool -> CBool -> IO (Ptr (Sk_image)))

{- | C function signature:

@
sk_image_t *sk_image_make_non_texture_image(const sk_image_t *cimage)
@
-}
foreign import ccall "sk_image_make_non_texture_image" sk_image_make_non_texture_image ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * cimage"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_image_make_non_texture_image'
foreign import ccall "&sk_image_make_non_texture_image" p'sk_image_make_non_texture_image ::
  FunPtr (Ptr (Sk_image) -> IO (Ptr (Sk_image)))

{- | C function signature:

@
sk_image_t *sk_image_make_raster_image(const sk_image_t *cimage)
@
-}
foreign import ccall "sk_image_make_raster_image" sk_image_make_raster_image ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * cimage"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_image_make_raster_image'
foreign import ccall "&sk_image_make_raster_image" p'sk_image_make_raster_image ::
  FunPtr (Ptr (Sk_image) -> IO (Ptr (Sk_image)))

{- | C function signature:

@
sk_image_t *sk_image_make_with_filter_raster(const sk_image_t *cimage, const sk_imagefilter_t *filter, const sk_irect_t *subset, const sk_irect_t *clipBounds, sk_irect_t *outSubset, sk_ipoint_t *outOffset)
@
-}
foreign import ccall "sk_image_make_with_filter_raster" sk_image_make_with_filter_raster ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * cimage"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * filter"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * subset"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * clipBounds"@
  -> Ptr (Sk_irect) -- ^ C argument @"sk_irect_t * outSubset"@
  -> Ptr (Sk_ipoint) -- ^ C argument @"sk_ipoint_t * outOffset"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_image_make_with_filter_raster'
foreign import ccall "&sk_image_make_with_filter_raster" p'sk_image_make_with_filter_raster ::
  FunPtr (Ptr (Sk_image) -> Ptr (Sk_imagefilter) -> Ptr (Sk_irect) -> Ptr (Sk_irect) -> Ptr (Sk_irect) -> Ptr (Sk_ipoint) -> IO (Ptr (Sk_image)))

{- | C function signature:

@
sk_image_t *sk_image_make_with_filter(const sk_image_t *cimage, gr_recording_context_t *context, const sk_imagefilter_t *filter, const sk_irect_t *subset, const sk_irect_t *clipBounds, sk_irect_t *outSubset, sk_ipoint_t *outOffset)
@
-}
foreign import ccall "sk_image_make_with_filter" sk_image_make_with_filter ::
  Ptr (Sk_image) -- ^ C argument @"const sk_image_t * cimage"@
  -> Ptr (Gr_recording_context) -- ^ C argument @"gr_recording_context_t * context"@
  -> Ptr (Sk_imagefilter) -- ^ C argument @"const sk_imagefilter_t * filter"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * subset"@
  -> Ptr (Sk_irect) -- ^ C argument @"const sk_irect_t * clipBounds"@
  -> Ptr (Sk_irect) -- ^ C argument @"sk_irect_t * outSubset"@
  -> Ptr (Sk_ipoint) -- ^ C argument @"sk_ipoint_t * outOffset"@
  -> IO (Ptr (Sk_image)) -- ^ C return type: @"sk_image_t *"@

-- | Function pointer to 'sk_image_make_with_filter'
foreign import ccall "&sk_image_make_with_filter" p'sk_image_make_with_filter ::
  FunPtr (Ptr (Sk_image) -> Ptr (Gr_recording_context) -> Ptr (Sk_imagefilter) -> Ptr (Sk_irect) -> Ptr (Sk_irect) -> Ptr (Sk_irect) -> Ptr (Sk_ipoint) -> IO (Ptr (Sk_image)))

{- | C function signature:

@
size_t sk_codec_min_buffered_bytes_needed(void)
@
-}
foreign import ccall "sk_codec_min_buffered_bytes_needed" sk_codec_min_buffered_bytes_needed ::
  IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_codec_min_buffered_bytes_needed'
foreign import ccall "&sk_codec_min_buffered_bytes_needed" p'sk_codec_min_buffered_bytes_needed ::
  FunPtr (IO (CSize))

{- | C function signature:

@
sk_codec_t *sk_codec_new_from_stream(sk_stream_t *stream, sk_codec_result_t *result)
@
-}
foreign import ccall "sk_codec_new_from_stream" sk_codec_new_from_stream ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * stream"@
  -> Ptr (Sk_codec_result) -- ^ C argument @"sk_codec_result_t * result"@
  -> IO (Ptr (Sk_codec)) -- ^ C return type: @"sk_codec_t *"@

-- | Function pointer to 'sk_codec_new_from_stream'
foreign import ccall "&sk_codec_new_from_stream" p'sk_codec_new_from_stream ::
  FunPtr (Ptr (Sk_stream) -> Ptr (Sk_codec_result) -> IO (Ptr (Sk_codec)))

{- | C function signature:

@
sk_codec_t *sk_codec_new_from_data(sk_data_t *data)
@
-}
foreign import ccall "sk_codec_new_from_data" sk_codec_new_from_data ::
  Ptr (Sk_data) -- ^ C argument @"sk_data_t * data"@
  -> IO (Ptr (Sk_codec)) -- ^ C return type: @"sk_codec_t *"@

-- | Function pointer to 'sk_codec_new_from_data'
foreign import ccall "&sk_codec_new_from_data" p'sk_codec_new_from_data ::
  FunPtr (Ptr (Sk_data) -> IO (Ptr (Sk_codec)))

{- | C function signature:

@
void sk_codec_destroy(sk_codec_t *codec)
@
-}
foreign import ccall "sk_codec_destroy" sk_codec_destroy ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_codec_destroy'
foreign import ccall "&sk_codec_destroy" p'sk_codec_destroy ::
  FunPtr (Ptr (Sk_codec) -> IO (()))

{- | C function signature:

@
void sk_codec_get_info(sk_codec_t *codec, sk_imageinfo_t *info)
@
-}
foreign import ccall "sk_codec_get_info" sk_codec_get_info ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> Ptr (Sk_imageinfo) -- ^ C argument @"sk_imageinfo_t * info"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_codec_get_info'
foreign import ccall "&sk_codec_get_info" p'sk_codec_get_info ::
  FunPtr (Ptr (Sk_codec) -> Ptr (Sk_imageinfo) -> IO (()))

{- | C function signature:

@
sk_encodedorigin_t sk_codec_get_origin(sk_codec_t *codec)
@
-}
foreign import ccall "sk_codec_get_origin" sk_codec_get_origin ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> IO (Sk_encodedorigin) -- ^ C return type: @"sk_encodedorigin_t"@

-- | Function pointer to 'sk_codec_get_origin'
foreign import ccall "&sk_codec_get_origin" p'sk_codec_get_origin ::
  FunPtr (Ptr (Sk_codec) -> IO (Sk_encodedorigin))

{- | C function signature:

@
void sk_codec_get_scaled_dimensions(sk_codec_t *codec, float desiredScale, sk_isize_t *dimensions)
@
-}
foreign import ccall "sk_codec_get_scaled_dimensions" sk_codec_get_scaled_dimensions ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> CFloat -- ^ C argument @"float desiredScale"@
  -> Ptr (Sk_isize) -- ^ C argument @"sk_isize_t * dimensions"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_codec_get_scaled_dimensions'
foreign import ccall "&sk_codec_get_scaled_dimensions" p'sk_codec_get_scaled_dimensions ::
  FunPtr (Ptr (Sk_codec) -> CFloat -> Ptr (Sk_isize) -> IO (()))

{- | C function signature:

@
_Bool sk_codec_get_valid_subset(sk_codec_t *codec, sk_irect_t *desiredSubset)
@
-}
foreign import ccall "sk_codec_get_valid_subset" sk_codec_get_valid_subset ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> Ptr (Sk_irect) -- ^ C argument @"sk_irect_t * desiredSubset"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_codec_get_valid_subset'
foreign import ccall "&sk_codec_get_valid_subset" p'sk_codec_get_valid_subset ::
  FunPtr (Ptr (Sk_codec) -> Ptr (Sk_irect) -> IO (CBool))

{- | C function signature:

@
sk_encoded_image_format_t sk_codec_get_encoded_format(sk_codec_t *codec)
@
-}
foreign import ccall "sk_codec_get_encoded_format" sk_codec_get_encoded_format ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> IO (Sk_encoded_image_format) -- ^ C return type: @"sk_encoded_image_format_t"@

-- | Function pointer to 'sk_codec_get_encoded_format'
foreign import ccall "&sk_codec_get_encoded_format" p'sk_codec_get_encoded_format ::
  FunPtr (Ptr (Sk_codec) -> IO (Sk_encoded_image_format))

{- | C function signature:

@
sk_codec_result_t sk_codec_get_pixels(sk_codec_t *codec, const sk_imageinfo_t *info, void *pixels, size_t rowBytes, const sk_codec_options_t *options)
@
-}
foreign import ccall "sk_codec_get_pixels" sk_codec_get_pixels ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> Ptr (Sk_imageinfo) -- ^ C argument @"const sk_imageinfo_t * info"@
  -> Ptr (()) -- ^ C argument @"void * pixels"@
  -> CSize -- ^ C argument @"size_t rowBytes"@
  -> Ptr (Sk_codec_options) -- ^ C argument @"const sk_codec_options_t * options"@
  -> IO (Sk_codec_result) -- ^ C return type: @"sk_codec_result_t"@

-- | Function pointer to 'sk_codec_get_pixels'
foreign import ccall "&sk_codec_get_pixels" p'sk_codec_get_pixels ::
  FunPtr (Ptr (Sk_codec) -> Ptr (Sk_imageinfo) -> Ptr (()) -> CSize -> Ptr (Sk_codec_options) -> IO (Sk_codec_result))

{- | C function signature:

@
sk_codec_result_t sk_codec_start_incremental_decode(sk_codec_t *codec, const sk_imageinfo_t *info, void *pixels, size_t rowBytes, const sk_codec_options_t *options)
@
-}
foreign import ccall "sk_codec_start_incremental_decode" sk_codec_start_incremental_decode ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> Ptr (Sk_imageinfo) -- ^ C argument @"const sk_imageinfo_t * info"@
  -> Ptr (()) -- ^ C argument @"void * pixels"@
  -> CSize -- ^ C argument @"size_t rowBytes"@
  -> Ptr (Sk_codec_options) -- ^ C argument @"const sk_codec_options_t * options"@
  -> IO (Sk_codec_result) -- ^ C return type: @"sk_codec_result_t"@

-- | Function pointer to 'sk_codec_start_incremental_decode'
foreign import ccall "&sk_codec_start_incremental_decode" p'sk_codec_start_incremental_decode ::
  FunPtr (Ptr (Sk_codec) -> Ptr (Sk_imageinfo) -> Ptr (()) -> CSize -> Ptr (Sk_codec_options) -> IO (Sk_codec_result))

{- | C function signature:

@
sk_codec_result_t sk_codec_incremental_decode(sk_codec_t *codec, int *rowsDecoded)
@
-}
foreign import ccall "sk_codec_incremental_decode" sk_codec_incremental_decode ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> Ptr (CInt) -- ^ C argument @"int * rowsDecoded"@
  -> IO (Sk_codec_result) -- ^ C return type: @"sk_codec_result_t"@

-- | Function pointer to 'sk_codec_incremental_decode'
foreign import ccall "&sk_codec_incremental_decode" p'sk_codec_incremental_decode ::
  FunPtr (Ptr (Sk_codec) -> Ptr (CInt) -> IO (Sk_codec_result))

{- | C function signature:

@
sk_codec_result_t sk_codec_start_scanline_decode(sk_codec_t *codec, const sk_imageinfo_t *info, const sk_codec_options_t *options)
@
-}
foreign import ccall "sk_codec_start_scanline_decode" sk_codec_start_scanline_decode ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> Ptr (Sk_imageinfo) -- ^ C argument @"const sk_imageinfo_t * info"@
  -> Ptr (Sk_codec_options) -- ^ C argument @"const sk_codec_options_t * options"@
  -> IO (Sk_codec_result) -- ^ C return type: @"sk_codec_result_t"@

-- | Function pointer to 'sk_codec_start_scanline_decode'
foreign import ccall "&sk_codec_start_scanline_decode" p'sk_codec_start_scanline_decode ::
  FunPtr (Ptr (Sk_codec) -> Ptr (Sk_imageinfo) -> Ptr (Sk_codec_options) -> IO (Sk_codec_result))

{- | C function signature:

@
int sk_codec_get_scanlines(sk_codec_t *codec, void *dst, int countLines, size_t rowBytes)
@
-}
foreign import ccall "sk_codec_get_scanlines" sk_codec_get_scanlines ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> Ptr (()) -- ^ C argument @"void * dst"@
  -> CInt -- ^ C argument @"int countLines"@
  -> CSize -- ^ C argument @"size_t rowBytes"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_codec_get_scanlines'
foreign import ccall "&sk_codec_get_scanlines" p'sk_codec_get_scanlines ::
  FunPtr (Ptr (Sk_codec) -> Ptr (()) -> CInt -> CSize -> IO (CInt))

{- | C function signature:

@
_Bool sk_codec_skip_scanlines(sk_codec_t *codec, int countLines)
@
-}
foreign import ccall "sk_codec_skip_scanlines" sk_codec_skip_scanlines ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> CInt -- ^ C argument @"int countLines"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_codec_skip_scanlines'
foreign import ccall "&sk_codec_skip_scanlines" p'sk_codec_skip_scanlines ::
  FunPtr (Ptr (Sk_codec) -> CInt -> IO (CBool))

{- | C function signature:

@
sk_codec_scanline_order_t sk_codec_get_scanline_order(sk_codec_t *codec)
@
-}
foreign import ccall "sk_codec_get_scanline_order" sk_codec_get_scanline_order ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> IO (Sk_codec_scanline_order) -- ^ C return type: @"sk_codec_scanline_order_t"@

-- | Function pointer to 'sk_codec_get_scanline_order'
foreign import ccall "&sk_codec_get_scanline_order" p'sk_codec_get_scanline_order ::
  FunPtr (Ptr (Sk_codec) -> IO (Sk_codec_scanline_order))

{- | C function signature:

@
int sk_codec_next_scanline(sk_codec_t *codec)
@
-}
foreign import ccall "sk_codec_next_scanline" sk_codec_next_scanline ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_codec_next_scanline'
foreign import ccall "&sk_codec_next_scanline" p'sk_codec_next_scanline ::
  FunPtr (Ptr (Sk_codec) -> IO (CInt))

{- | C function signature:

@
int sk_codec_output_scanline(sk_codec_t *codec, int inputScanline)
@
-}
foreign import ccall "sk_codec_output_scanline" sk_codec_output_scanline ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> CInt -- ^ C argument @"int inputScanline"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_codec_output_scanline'
foreign import ccall "&sk_codec_output_scanline" p'sk_codec_output_scanline ::
  FunPtr (Ptr (Sk_codec) -> CInt -> IO (CInt))

{- | C function signature:

@
int sk_codec_get_frame_count(sk_codec_t *codec)
@
-}
foreign import ccall "sk_codec_get_frame_count" sk_codec_get_frame_count ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_codec_get_frame_count'
foreign import ccall "&sk_codec_get_frame_count" p'sk_codec_get_frame_count ::
  FunPtr (Ptr (Sk_codec) -> IO (CInt))

{- | C function signature:

@
void sk_codec_get_frame_info(sk_codec_t *codec, sk_codec_frameinfo_t *frameInfo)
@
-}
foreign import ccall "sk_codec_get_frame_info" sk_codec_get_frame_info ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> Ptr (Sk_codec_frameinfo) -- ^ C argument @"sk_codec_frameinfo_t * frameInfo"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_codec_get_frame_info'
foreign import ccall "&sk_codec_get_frame_info" p'sk_codec_get_frame_info ::
  FunPtr (Ptr (Sk_codec) -> Ptr (Sk_codec_frameinfo) -> IO (()))

{- | C function signature:

@
_Bool sk_codec_get_frame_info_for_index(sk_codec_t *codec, int index, sk_codec_frameinfo_t *frameInfo)
@
-}
foreign import ccall "sk_codec_get_frame_info_for_index" sk_codec_get_frame_info_for_index ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> CInt -- ^ C argument @"int index"@
  -> Ptr (Sk_codec_frameinfo) -- ^ C argument @"sk_codec_frameinfo_t * frameInfo"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_codec_get_frame_info_for_index'
foreign import ccall "&sk_codec_get_frame_info_for_index" p'sk_codec_get_frame_info_for_index ::
  FunPtr (Ptr (Sk_codec) -> CInt -> Ptr (Sk_codec_frameinfo) -> IO (CBool))

{- | C function signature:

@
int sk_codec_get_repetition_count(sk_codec_t *codec)
@
-}
foreign import ccall "sk_codec_get_repetition_count" sk_codec_get_repetition_count ::
  Ptr (Sk_codec) -- ^ C argument @"sk_codec_t * codec"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_codec_get_repetition_count'
foreign import ccall "&sk_codec_get_repetition_count" p'sk_codec_get_repetition_count ::
  FunPtr (Ptr (Sk_codec) -> IO (CInt))

{- | C function signature:

@
sk_data_t *sk_data_new_empty(void)
@
-}
foreign import ccall "sk_data_new_empty" sk_data_new_empty ::
  IO (Ptr (Sk_data)) -- ^ C return type: @"sk_data_t *"@

-- | Function pointer to 'sk_data_new_empty'
foreign import ccall "&sk_data_new_empty" p'sk_data_new_empty ::
  FunPtr (IO (Ptr (Sk_data)))

{- | C function signature:

@
sk_data_t *sk_data_new_with_copy(const void *src, size_t length)
@
-}
foreign import ccall "sk_data_new_with_copy" sk_data_new_with_copy ::
  Ptr (()) -- ^ C argument @"const void * src"@
  -> CSize -- ^ C argument @"size_t length"@
  -> IO (Ptr (Sk_data)) -- ^ C return type: @"sk_data_t *"@

-- | Function pointer to 'sk_data_new_with_copy'
foreign import ccall "&sk_data_new_with_copy" p'sk_data_new_with_copy ::
  FunPtr (Ptr (()) -> CSize -> IO (Ptr (Sk_data)))

{- | C function signature:

@
sk_data_t *sk_data_new_subset(const sk_data_t *src, size_t offset, size_t length)
@
-}
foreign import ccall "sk_data_new_subset" sk_data_new_subset ::
  Ptr (Sk_data) -- ^ C argument @"const sk_data_t * src"@
  -> CSize -- ^ C argument @"size_t offset"@
  -> CSize -- ^ C argument @"size_t length"@
  -> IO (Ptr (Sk_data)) -- ^ C return type: @"sk_data_t *"@

-- | Function pointer to 'sk_data_new_subset'
foreign import ccall "&sk_data_new_subset" p'sk_data_new_subset ::
  FunPtr (Ptr (Sk_data) -> CSize -> CSize -> IO (Ptr (Sk_data)))

{- | C function signature:

@
void sk_data_ref(const sk_data_t *)
@
-}
foreign import ccall "sk_data_ref" sk_data_ref ::
  Ptr (Sk_data) -- ^ C argument type: @"const sk_data_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_data_ref'
foreign import ccall "&sk_data_ref" p'sk_data_ref ::
  FunPtr (Ptr (Sk_data) -> IO (()))

{- | C function signature:

@
void sk_data_unref(const sk_data_t *)
@
-}
foreign import ccall "sk_data_unref" sk_data_unref ::
  Ptr (Sk_data) -- ^ C argument type: @"const sk_data_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_data_unref'
foreign import ccall "&sk_data_unref" p'sk_data_unref ::
  FunPtr (Ptr (Sk_data) -> IO (()))

{- | C function signature:

@
size_t sk_data_get_size(const sk_data_t *)
@
-}
foreign import ccall "sk_data_get_size" sk_data_get_size ::
  Ptr (Sk_data) -- ^ C argument type: @"const sk_data_t *"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_data_get_size'
foreign import ccall "&sk_data_get_size" p'sk_data_get_size ::
  FunPtr (Ptr (Sk_data) -> IO (CSize))

{- | C function signature:

@
const void *sk_data_get_data(const sk_data_t *)
@
-}
foreign import ccall "sk_data_get_data" sk_data_get_data ::
  Ptr (Sk_data) -- ^ C argument type: @"const sk_data_t *"@
  -> IO (Ptr (())) -- ^ C return type: @"const void *"@

-- | Function pointer to 'sk_data_get_data'
foreign import ccall "&sk_data_get_data" p'sk_data_get_data ::
  FunPtr (Ptr (Sk_data) -> IO (Ptr (())))

{- | C function signature:

@
sk_data_t *sk_data_new_from_file(const char *path)
@
-}
foreign import ccall "sk_data_new_from_file" sk_data_new_from_file ::
  Ptr (CChar) -- ^ C argument @"const char * path"@
  -> IO (Ptr (Sk_data)) -- ^ C return type: @"sk_data_t *"@

-- | Function pointer to 'sk_data_new_from_file'
foreign import ccall "&sk_data_new_from_file" p'sk_data_new_from_file ::
  FunPtr (Ptr (CChar) -> IO (Ptr (Sk_data)))

{- | C function signature:

@
sk_data_t *sk_data_new_from_stream(sk_stream_t *stream, size_t length)
@
-}
foreign import ccall "sk_data_new_from_stream" sk_data_new_from_stream ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * stream"@
  -> CSize -- ^ C argument @"size_t length"@
  -> IO (Ptr (Sk_data)) -- ^ C return type: @"sk_data_t *"@

-- | Function pointer to 'sk_data_new_from_stream'
foreign import ccall "&sk_data_new_from_stream" p'sk_data_new_from_stream ::
  FunPtr (Ptr (Sk_stream) -> CSize -> IO (Ptr (Sk_data)))

{- | C function signature:

@
const uint8_t *sk_data_get_bytes(const sk_data_t *)
@
-}
foreign import ccall "sk_data_get_bytes" sk_data_get_bytes ::
  Ptr (Sk_data) -- ^ C argument type: @"const sk_data_t *"@
  -> IO (Ptr (Word8)) -- ^ C return type: @"const uint8_t *"@

-- | Function pointer to 'sk_data_get_bytes'
foreign import ccall "&sk_data_get_bytes" p'sk_data_get_bytes ::
  FunPtr (Ptr (Sk_data) -> IO (Ptr (Word8)))

{- | C function signature:

@
sk_data_t *sk_data_new_with_proc(const void *ptr, size_t length, sk_data_release_proc proc, void *ctx)
@
-}
foreign import ccall "sk_data_new_with_proc" sk_data_new_with_proc ::
  Ptr (()) -- ^ C argument @"const void * ptr"@
  -> CSize -- ^ C argument @"size_t length"@
  -> FunPtr Sk_data_release_proc -- ^ C argument @"sk_data_release_proc proc"@
  -> Ptr (()) -- ^ C argument @"void * ctx"@
  -> IO (Ptr (Sk_data)) -- ^ C return type: @"sk_data_t *"@

-- | Function pointer to 'sk_data_new_with_proc'
foreign import ccall "&sk_data_new_with_proc" p'sk_data_new_with_proc ::
  FunPtr (Ptr (()) -> CSize -> FunPtr Sk_data_release_proc -> Ptr (()) -> IO (Ptr (Sk_data)))

{- | C function signature:

@
sk_data_t *sk_data_new_uninitialized(size_t size)
@
-}
foreign import ccall "sk_data_new_uninitialized" sk_data_new_uninitialized ::
  CSize -- ^ C argument @"size_t size"@
  -> IO (Ptr (Sk_data)) -- ^ C return type: @"sk_data_t *"@

-- | Function pointer to 'sk_data_new_uninitialized'
foreign import ccall "&sk_data_new_uninitialized" p'sk_data_new_uninitialized ::
  FunPtr (CSize -> IO (Ptr (Sk_data)))

{- | C function signature:

@
sk_paint_t *sk_paint_new(void)
@
-}
foreign import ccall "sk_paint_new" sk_paint_new ::
  IO (Ptr (Sk_paint)) -- ^ C return type: @"sk_paint_t *"@

-- | Function pointer to 'sk_paint_new'
foreign import ccall "&sk_paint_new" p'sk_paint_new ::
  FunPtr (IO (Ptr (Sk_paint)))

{- | C function signature:

@
sk_paint_t *sk_paint_clone(sk_paint_t *)
@
-}
foreign import ccall "sk_paint_clone" sk_paint_clone ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> IO (Ptr (Sk_paint)) -- ^ C return type: @"sk_paint_t *"@

-- | Function pointer to 'sk_paint_clone'
foreign import ccall "&sk_paint_clone" p'sk_paint_clone ::
  FunPtr (Ptr (Sk_paint) -> IO (Ptr (Sk_paint)))

{- | C function signature:

@
void sk_paint_delete(sk_paint_t *)
@
-}
foreign import ccall "sk_paint_delete" sk_paint_delete ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_delete'
foreign import ccall "&sk_paint_delete" p'sk_paint_delete ::
  FunPtr (Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_paint_reset(sk_paint_t *)
@
-}
foreign import ccall "sk_paint_reset" sk_paint_reset ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_reset'
foreign import ccall "&sk_paint_reset" p'sk_paint_reset ::
  FunPtr (Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
_Bool sk_paint_is_antialias(const sk_paint_t *)
@
-}
foreign import ccall "sk_paint_is_antialias" sk_paint_is_antialias ::
  Ptr (Sk_paint) -- ^ C argument type: @"const sk_paint_t *"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_paint_is_antialias'
foreign import ccall "&sk_paint_is_antialias" p'sk_paint_is_antialias ::
  FunPtr (Ptr (Sk_paint) -> IO (CBool))

{- | C function signature:

@
void sk_paint_set_antialias(sk_paint_t *, _Bool)
@
-}
foreign import ccall "sk_paint_set_antialias" sk_paint_set_antialias ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> CBool -- ^ C argument type: @"_Bool"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_set_antialias'
foreign import ccall "&sk_paint_set_antialias" p'sk_paint_set_antialias ::
  FunPtr (Ptr (Sk_paint) -> CBool -> IO (()))

{- | C function signature:

@
sk_color_t sk_paint_get_color(const sk_paint_t *)
@
-}
foreign import ccall "sk_paint_get_color" sk_paint_get_color ::
  Ptr (Sk_paint) -- ^ C argument type: @"const sk_paint_t *"@
  -> IO (Sk_color) -- ^ C return type: @"sk_color_t"@

-- | Function pointer to 'sk_paint_get_color'
foreign import ccall "&sk_paint_get_color" p'sk_paint_get_color ::
  FunPtr (Ptr (Sk_paint) -> IO (Sk_color))

{- | C function signature:

@
void sk_paint_get_color4f(const sk_paint_t *paint, sk_color4f_t *color)
@
-}
foreign import ccall "sk_paint_get_color4f" sk_paint_get_color4f ::
  Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * paint"@
  -> Ptr (Sk_color4f) -- ^ C argument @"sk_color4f_t * color"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_get_color4f'
foreign import ccall "&sk_paint_get_color4f" p'sk_paint_get_color4f ::
  FunPtr (Ptr (Sk_paint) -> Ptr (Sk_color4f) -> IO (()))

{- | C function signature:

@
void sk_paint_set_color(sk_paint_t *, sk_color_t)
@
-}
foreign import ccall "sk_paint_set_color" sk_paint_set_color ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> Sk_color -- ^ C argument type: @"sk_color_t"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_set_color'
foreign import ccall "&sk_paint_set_color" p'sk_paint_set_color ::
  FunPtr (Ptr (Sk_paint) -> Sk_color -> IO (()))

{- | C function signature:

@
void sk_paint_set_color4f(sk_paint_t *paint, sk_color4f_t *color, sk_colorspace_t *colorspace)
@
-}
foreign import ccall "sk_paint_set_color4f" sk_paint_set_color4f ::
  Ptr (Sk_paint) -- ^ C argument @"sk_paint_t * paint"@
  -> Ptr (Sk_color4f) -- ^ C argument @"sk_color4f_t * color"@
  -> Ptr (Sk_colorspace) -- ^ C argument @"sk_colorspace_t * colorspace"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_set_color4f'
foreign import ccall "&sk_paint_set_color4f" p'sk_paint_set_color4f ::
  FunPtr (Ptr (Sk_paint) -> Ptr (Sk_color4f) -> Ptr (Sk_colorspace) -> IO (()))

{- | C function signature:

@
sk_paint_style_t sk_paint_get_style(const sk_paint_t *)
@
-}
foreign import ccall "sk_paint_get_style" sk_paint_get_style ::
  Ptr (Sk_paint) -- ^ C argument type: @"const sk_paint_t *"@
  -> IO (Sk_paint_style) -- ^ C return type: @"sk_paint_style_t"@

-- | Function pointer to 'sk_paint_get_style'
foreign import ccall "&sk_paint_get_style" p'sk_paint_get_style ::
  FunPtr (Ptr (Sk_paint) -> IO (Sk_paint_style))

{- | C function signature:

@
void sk_paint_set_style(sk_paint_t *, sk_paint_style_t)
@
-}
foreign import ccall "sk_paint_set_style" sk_paint_set_style ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> Sk_paint_style -- ^ C argument type: @"sk_paint_style_t"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_set_style'
foreign import ccall "&sk_paint_set_style" p'sk_paint_set_style ::
  FunPtr (Ptr (Sk_paint) -> Sk_paint_style -> IO (()))

{- | C function signature:

@
float sk_paint_get_stroke_width(const sk_paint_t *)
@
-}
foreign import ccall "sk_paint_get_stroke_width" sk_paint_get_stroke_width ::
  Ptr (Sk_paint) -- ^ C argument type: @"const sk_paint_t *"@
  -> IO (CFloat) -- ^ C return type: @"float"@

-- | Function pointer to 'sk_paint_get_stroke_width'
foreign import ccall "&sk_paint_get_stroke_width" p'sk_paint_get_stroke_width ::
  FunPtr (Ptr (Sk_paint) -> IO (CFloat))

{- | C function signature:

@
void sk_paint_set_stroke_width(sk_paint_t *, float width)
@
-}
foreign import ccall "sk_paint_set_stroke_width" sk_paint_set_stroke_width ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> CFloat -- ^ C argument @"float width"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_set_stroke_width'
foreign import ccall "&sk_paint_set_stroke_width" p'sk_paint_set_stroke_width ::
  FunPtr (Ptr (Sk_paint) -> CFloat -> IO (()))

{- | C function signature:

@
float sk_paint_get_stroke_miter(const sk_paint_t *)
@
-}
foreign import ccall "sk_paint_get_stroke_miter" sk_paint_get_stroke_miter ::
  Ptr (Sk_paint) -- ^ C argument type: @"const sk_paint_t *"@
  -> IO (CFloat) -- ^ C return type: @"float"@

-- | Function pointer to 'sk_paint_get_stroke_miter'
foreign import ccall "&sk_paint_get_stroke_miter" p'sk_paint_get_stroke_miter ::
  FunPtr (Ptr (Sk_paint) -> IO (CFloat))

{- | C function signature:

@
void sk_paint_set_stroke_miter(sk_paint_t *, float miter)
@
-}
foreign import ccall "sk_paint_set_stroke_miter" sk_paint_set_stroke_miter ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> CFloat -- ^ C argument @"float miter"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_set_stroke_miter'
foreign import ccall "&sk_paint_set_stroke_miter" p'sk_paint_set_stroke_miter ::
  FunPtr (Ptr (Sk_paint) -> CFloat -> IO (()))

{- | C function signature:

@
sk_stroke_cap_t sk_paint_get_stroke_cap(const sk_paint_t *)
@
-}
foreign import ccall "sk_paint_get_stroke_cap" sk_paint_get_stroke_cap ::
  Ptr (Sk_paint) -- ^ C argument type: @"const sk_paint_t *"@
  -> IO (Sk_stroke_cap) -- ^ C return type: @"sk_stroke_cap_t"@

-- | Function pointer to 'sk_paint_get_stroke_cap'
foreign import ccall "&sk_paint_get_stroke_cap" p'sk_paint_get_stroke_cap ::
  FunPtr (Ptr (Sk_paint) -> IO (Sk_stroke_cap))

{- | C function signature:

@
void sk_paint_set_stroke_cap(sk_paint_t *, sk_stroke_cap_t)
@
-}
foreign import ccall "sk_paint_set_stroke_cap" sk_paint_set_stroke_cap ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> Sk_stroke_cap -- ^ C argument type: @"sk_stroke_cap_t"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_set_stroke_cap'
foreign import ccall "&sk_paint_set_stroke_cap" p'sk_paint_set_stroke_cap ::
  FunPtr (Ptr (Sk_paint) -> Sk_stroke_cap -> IO (()))

{- | C function signature:

@
sk_stroke_join_t sk_paint_get_stroke_join(const sk_paint_t *)
@
-}
foreign import ccall "sk_paint_get_stroke_join" sk_paint_get_stroke_join ::
  Ptr (Sk_paint) -- ^ C argument type: @"const sk_paint_t *"@
  -> IO (Sk_stroke_join) -- ^ C return type: @"sk_stroke_join_t"@

-- | Function pointer to 'sk_paint_get_stroke_join'
foreign import ccall "&sk_paint_get_stroke_join" p'sk_paint_get_stroke_join ::
  FunPtr (Ptr (Sk_paint) -> IO (Sk_stroke_join))

{- | C function signature:

@
void sk_paint_set_stroke_join(sk_paint_t *, sk_stroke_join_t)
@
-}
foreign import ccall "sk_paint_set_stroke_join" sk_paint_set_stroke_join ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> Sk_stroke_join -- ^ C argument type: @"sk_stroke_join_t"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_set_stroke_join'
foreign import ccall "&sk_paint_set_stroke_join" p'sk_paint_set_stroke_join ::
  FunPtr (Ptr (Sk_paint) -> Sk_stroke_join -> IO (()))

{- | C function signature:

@
void sk_paint_set_shader(sk_paint_t *, sk_shader_t *)
@
-}
foreign import ccall "sk_paint_set_shader" sk_paint_set_shader ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> Ptr (Sk_shader) -- ^ C argument type: @"sk_shader_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_set_shader'
foreign import ccall "&sk_paint_set_shader" p'sk_paint_set_shader ::
  FunPtr (Ptr (Sk_paint) -> Ptr (Sk_shader) -> IO (()))

{- | C function signature:

@
void sk_paint_set_maskfilter(sk_paint_t *, sk_maskfilter_t *)
@
-}
foreign import ccall "sk_paint_set_maskfilter" sk_paint_set_maskfilter ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> Ptr (Sk_maskfilter) -- ^ C argument type: @"sk_maskfilter_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_set_maskfilter'
foreign import ccall "&sk_paint_set_maskfilter" p'sk_paint_set_maskfilter ::
  FunPtr (Ptr (Sk_paint) -> Ptr (Sk_maskfilter) -> IO (()))

{- | C function signature:

@
void sk_paint_set_blendmode(sk_paint_t *, sk_blendmode_t)
@
-}
foreign import ccall "sk_paint_set_blendmode" sk_paint_set_blendmode ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> Sk_blendmode -- ^ C argument type: @"sk_blendmode_t"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_set_blendmode'
foreign import ccall "&sk_paint_set_blendmode" p'sk_paint_set_blendmode ::
  FunPtr (Ptr (Sk_paint) -> Sk_blendmode -> IO (()))

{- | C function signature:

@
void sk_paint_set_blender(sk_paint_t *paint, sk_blender_t *blender)
@
-}
foreign import ccall "sk_paint_set_blender" sk_paint_set_blender ::
  Ptr (Sk_paint) -- ^ C argument @"sk_paint_t * paint"@
  -> Ptr (Sk_blender) -- ^ C argument @"sk_blender_t * blender"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_set_blender'
foreign import ccall "&sk_paint_set_blender" p'sk_paint_set_blender ::
  FunPtr (Ptr (Sk_paint) -> Ptr (Sk_blender) -> IO (()))

{- | C function signature:

@
_Bool sk_paint_is_dither(const sk_paint_t *)
@
-}
foreign import ccall "sk_paint_is_dither" sk_paint_is_dither ::
  Ptr (Sk_paint) -- ^ C argument type: @"const sk_paint_t *"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_paint_is_dither'
foreign import ccall "&sk_paint_is_dither" p'sk_paint_is_dither ::
  FunPtr (Ptr (Sk_paint) -> IO (CBool))

{- | C function signature:

@
void sk_paint_set_dither(sk_paint_t *, _Bool)
@
-}
foreign import ccall "sk_paint_set_dither" sk_paint_set_dither ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> CBool -- ^ C argument type: @"_Bool"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_set_dither'
foreign import ccall "&sk_paint_set_dither" p'sk_paint_set_dither ::
  FunPtr (Ptr (Sk_paint) -> CBool -> IO (()))

{- | C function signature:

@
sk_shader_t *sk_paint_get_shader(sk_paint_t *)
@
-}
foreign import ccall "sk_paint_get_shader" sk_paint_get_shader ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_paint_get_shader'
foreign import ccall "&sk_paint_get_shader" p'sk_paint_get_shader ::
  FunPtr (Ptr (Sk_paint) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_maskfilter_t *sk_paint_get_maskfilter(sk_paint_t *)
@
-}
foreign import ccall "sk_paint_get_maskfilter" sk_paint_get_maskfilter ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> IO (Ptr (Sk_maskfilter)) -- ^ C return type: @"sk_maskfilter_t *"@

-- | Function pointer to 'sk_paint_get_maskfilter'
foreign import ccall "&sk_paint_get_maskfilter" p'sk_paint_get_maskfilter ::
  FunPtr (Ptr (Sk_paint) -> IO (Ptr (Sk_maskfilter)))

{- | C function signature:

@
void sk_paint_set_colorfilter(sk_paint_t *, sk_colorfilter_t *)
@
-}
foreign import ccall "sk_paint_set_colorfilter" sk_paint_set_colorfilter ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> Ptr (Sk_colorfilter) -- ^ C argument type: @"sk_colorfilter_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_set_colorfilter'
foreign import ccall "&sk_paint_set_colorfilter" p'sk_paint_set_colorfilter ::
  FunPtr (Ptr (Sk_paint) -> Ptr (Sk_colorfilter) -> IO (()))

{- | C function signature:

@
sk_colorfilter_t *sk_paint_get_colorfilter(sk_paint_t *)
@
-}
foreign import ccall "sk_paint_get_colorfilter" sk_paint_get_colorfilter ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> IO (Ptr (Sk_colorfilter)) -- ^ C return type: @"sk_colorfilter_t *"@

-- | Function pointer to 'sk_paint_get_colorfilter'
foreign import ccall "&sk_paint_get_colorfilter" p'sk_paint_get_colorfilter ::
  FunPtr (Ptr (Sk_paint) -> IO (Ptr (Sk_colorfilter)))

{- | C function signature:

@
void sk_paint_set_imagefilter(sk_paint_t *, sk_imagefilter_t *)
@
-}
foreign import ccall "sk_paint_set_imagefilter" sk_paint_set_imagefilter ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> Ptr (Sk_imagefilter) -- ^ C argument type: @"sk_imagefilter_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_set_imagefilter'
foreign import ccall "&sk_paint_set_imagefilter" p'sk_paint_set_imagefilter ::
  FunPtr (Ptr (Sk_paint) -> Ptr (Sk_imagefilter) -> IO (()))

{- | C function signature:

@
sk_imagefilter_t *sk_paint_get_imagefilter(sk_paint_t *)
@
-}
foreign import ccall "sk_paint_get_imagefilter" sk_paint_get_imagefilter ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> IO (Ptr (Sk_imagefilter)) -- ^ C return type: @"sk_imagefilter_t *"@

-- | Function pointer to 'sk_paint_get_imagefilter'
foreign import ccall "&sk_paint_get_imagefilter" p'sk_paint_get_imagefilter ::
  FunPtr (Ptr (Sk_paint) -> IO (Ptr (Sk_imagefilter)))

{- | C function signature:

@
sk_blendmode_t sk_paint_get_blendmode(sk_paint_t *)
@
-}
foreign import ccall "sk_paint_get_blendmode" sk_paint_get_blendmode ::
  Ptr (Sk_paint) -- ^ C argument type: @"sk_paint_t *"@
  -> IO (Sk_blendmode) -- ^ C return type: @"sk_blendmode_t"@

-- | Function pointer to 'sk_paint_get_blendmode'
foreign import ccall "&sk_paint_get_blendmode" p'sk_paint_get_blendmode ::
  FunPtr (Ptr (Sk_paint) -> IO (Sk_blendmode))

{- | C function signature:

@
sk_blender_t *sk_paint_get_blender(sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_paint_get_blender" sk_paint_get_blender ::
  Ptr (Sk_paint) -- ^ C argument @"sk_paint_t * cpaint"@
  -> IO (Ptr (Sk_blender)) -- ^ C return type: @"sk_blender_t *"@

-- | Function pointer to 'sk_paint_get_blender'
foreign import ccall "&sk_paint_get_blender" p'sk_paint_get_blender ::
  FunPtr (Ptr (Sk_paint) -> IO (Ptr (Sk_blender)))

{- | C function signature:

@
sk_path_effect_t *sk_paint_get_path_effect(sk_paint_t *cpaint)
@
-}
foreign import ccall "sk_paint_get_path_effect" sk_paint_get_path_effect ::
  Ptr (Sk_paint) -- ^ C argument @"sk_paint_t * cpaint"@
  -> IO (Ptr (Sk_path_effect)) -- ^ C return type: @"sk_path_effect_t *"@

-- | Function pointer to 'sk_paint_get_path_effect'
foreign import ccall "&sk_paint_get_path_effect" p'sk_paint_get_path_effect ::
  FunPtr (Ptr (Sk_paint) -> IO (Ptr (Sk_path_effect)))

{- | C function signature:

@
void sk_paint_set_path_effect(sk_paint_t *cpaint, sk_path_effect_t *effect)
@
-}
foreign import ccall "sk_paint_set_path_effect" sk_paint_set_path_effect ::
  Ptr (Sk_paint) -- ^ C argument @"sk_paint_t * cpaint"@
  -> Ptr (Sk_path_effect) -- ^ C argument @"sk_path_effect_t * effect"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_paint_set_path_effect'
foreign import ccall "&sk_paint_set_path_effect" p'sk_paint_set_path_effect ::
  FunPtr (Ptr (Sk_paint) -> Ptr (Sk_path_effect) -> IO (()))

{- | C function signature:

@
_Bool sk_paint_get_fill_path(const sk_paint_t *cpaint, const sk_path_t *src, sk_path_t *dst, const sk_rect_t *cullRect, const sk_matrix_t *cmatrix)
@
-}
foreign import ccall "sk_paint_get_fill_path" sk_paint_get_fill_path ::
  Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * cpaint"@
  -> Ptr (Sk_path) -- ^ C argument @"const sk_path_t * src"@
  -> Ptr (Sk_path) -- ^ C argument @"sk_path_t * dst"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * cullRect"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * cmatrix"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_paint_get_fill_path'
foreign import ccall "&sk_paint_get_fill_path" p'sk_paint_get_fill_path ::
  FunPtr (Ptr (Sk_paint) -> Ptr (Sk_path) -> Ptr (Sk_path) -> Ptr (Sk_rect) -> Ptr (Sk_matrix) -> IO (CBool))

{- | C function signature:

@
void sk_stream_asset_destroy(sk_stream_asset_t *cstream)
@
-}
foreign import ccall "sk_stream_asset_destroy" sk_stream_asset_destroy ::
  Ptr (Sk_stream_asset) -- ^ C argument @"sk_stream_asset_t * cstream"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_stream_asset_destroy'
foreign import ccall "&sk_stream_asset_destroy" p'sk_stream_asset_destroy ::
  FunPtr (Ptr (Sk_stream_asset) -> IO (()))

{- | C function signature:

@
sk_stream_filestream_t *sk_filestream_new(const char *path)
@
-}
foreign import ccall "sk_filestream_new" sk_filestream_new ::
  Ptr (CChar) -- ^ C argument @"const char * path"@
  -> IO (Ptr (Sk_stream_filestream)) -- ^ C return type: @"sk_stream_filestream_t *"@

-- | Function pointer to 'sk_filestream_new'
foreign import ccall "&sk_filestream_new" p'sk_filestream_new ::
  FunPtr (Ptr (CChar) -> IO (Ptr (Sk_stream_filestream)))

{- | C function signature:

@
void sk_filestream_destroy(sk_stream_filestream_t *cstream)
@
-}
foreign import ccall "sk_filestream_destroy" sk_filestream_destroy ::
  Ptr (Sk_stream_filestream) -- ^ C argument @"sk_stream_filestream_t * cstream"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_filestream_destroy'
foreign import ccall "&sk_filestream_destroy" p'sk_filestream_destroy ::
  FunPtr (Ptr (Sk_stream_filestream) -> IO (()))

{- | C function signature:

@
_Bool sk_filestream_is_valid(sk_stream_filestream_t *cstream)
@
-}
foreign import ccall "sk_filestream_is_valid" sk_filestream_is_valid ::
  Ptr (Sk_stream_filestream) -- ^ C argument @"sk_stream_filestream_t * cstream"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_filestream_is_valid'
foreign import ccall "&sk_filestream_is_valid" p'sk_filestream_is_valid ::
  FunPtr (Ptr (Sk_stream_filestream) -> IO (CBool))

{- | C function signature:

@
sk_stream_memorystream_t *sk_memorystream_new(void)
@
-}
foreign import ccall "sk_memorystream_new" sk_memorystream_new ::
  IO (Ptr (Sk_stream_memorystream)) -- ^ C return type: @"sk_stream_memorystream_t *"@

-- | Function pointer to 'sk_memorystream_new'
foreign import ccall "&sk_memorystream_new" p'sk_memorystream_new ::
  FunPtr (IO (Ptr (Sk_stream_memorystream)))

{- | C function signature:

@
sk_stream_memorystream_t *sk_memorystream_new_with_length(size_t length)
@
-}
foreign import ccall "sk_memorystream_new_with_length" sk_memorystream_new_with_length ::
  CSize -- ^ C argument @"size_t length"@
  -> IO (Ptr (Sk_stream_memorystream)) -- ^ C return type: @"sk_stream_memorystream_t *"@

-- | Function pointer to 'sk_memorystream_new_with_length'
foreign import ccall "&sk_memorystream_new_with_length" p'sk_memorystream_new_with_length ::
  FunPtr (CSize -> IO (Ptr (Sk_stream_memorystream)))

{- | C function signature:

@
sk_stream_memorystream_t *sk_memorystream_new_with_data(const void *data, size_t length, _Bool copyData)
@
-}
foreign import ccall "sk_memorystream_new_with_data" sk_memorystream_new_with_data ::
  Ptr (()) -- ^ C argument @"const void * data"@
  -> CSize -- ^ C argument @"size_t length"@
  -> CBool -- ^ C argument @"_Bool copyData"@
  -> IO (Ptr (Sk_stream_memorystream)) -- ^ C return type: @"sk_stream_memorystream_t *"@

-- | Function pointer to 'sk_memorystream_new_with_data'
foreign import ccall "&sk_memorystream_new_with_data" p'sk_memorystream_new_with_data ::
  FunPtr (Ptr (()) -> CSize -> CBool -> IO (Ptr (Sk_stream_memorystream)))

{- | C function signature:

@
sk_stream_memorystream_t *sk_memorystream_new_with_skdata(sk_data_t *data)
@
-}
foreign import ccall "sk_memorystream_new_with_skdata" sk_memorystream_new_with_skdata ::
  Ptr (Sk_data) -- ^ C argument @"sk_data_t * data"@
  -> IO (Ptr (Sk_stream_memorystream)) -- ^ C return type: @"sk_stream_memorystream_t *"@

-- | Function pointer to 'sk_memorystream_new_with_skdata'
foreign import ccall "&sk_memorystream_new_with_skdata" p'sk_memorystream_new_with_skdata ::
  FunPtr (Ptr (Sk_data) -> IO (Ptr (Sk_stream_memorystream)))

{- | C function signature:

@
void sk_memorystream_set_memory(sk_stream_memorystream_t *cmemorystream, const void *data, size_t length, _Bool copyData)
@
-}
foreign import ccall "sk_memorystream_set_memory" sk_memorystream_set_memory ::
  Ptr (Sk_stream_memorystream) -- ^ C argument @"sk_stream_memorystream_t * cmemorystream"@
  -> Ptr (()) -- ^ C argument @"const void * data"@
  -> CSize -- ^ C argument @"size_t length"@
  -> CBool -- ^ C argument @"_Bool copyData"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_memorystream_set_memory'
foreign import ccall "&sk_memorystream_set_memory" p'sk_memorystream_set_memory ::
  FunPtr (Ptr (Sk_stream_memorystream) -> Ptr (()) -> CSize -> CBool -> IO (()))

{- | C function signature:

@
void sk_memorystream_destroy(sk_stream_memorystream_t *cstream)
@
-}
foreign import ccall "sk_memorystream_destroy" sk_memorystream_destroy ::
  Ptr (Sk_stream_memorystream) -- ^ C argument @"sk_stream_memorystream_t * cstream"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_memorystream_destroy'
foreign import ccall "&sk_memorystream_destroy" p'sk_memorystream_destroy ::
  FunPtr (Ptr (Sk_stream_memorystream) -> IO (()))

{- | C function signature:

@
size_t sk_stream_read(sk_stream_t *cstream, void *buffer, size_t size)
@
-}
foreign import ccall "sk_stream_read" sk_stream_read ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> Ptr (()) -- ^ C argument @"void * buffer"@
  -> CSize -- ^ C argument @"size_t size"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_stream_read'
foreign import ccall "&sk_stream_read" p'sk_stream_read ::
  FunPtr (Ptr (Sk_stream) -> Ptr (()) -> CSize -> IO (CSize))

{- | C function signature:

@
size_t sk_stream_peek(sk_stream_t *cstream, void *buffer, size_t size)
@
-}
foreign import ccall "sk_stream_peek" sk_stream_peek ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> Ptr (()) -- ^ C argument @"void * buffer"@
  -> CSize -- ^ C argument @"size_t size"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_stream_peek'
foreign import ccall "&sk_stream_peek" p'sk_stream_peek ::
  FunPtr (Ptr (Sk_stream) -> Ptr (()) -> CSize -> IO (CSize))

{- | C function signature:

@
size_t sk_stream_skip(sk_stream_t *cstream, size_t size)
@
-}
foreign import ccall "sk_stream_skip" sk_stream_skip ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> CSize -- ^ C argument @"size_t size"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_stream_skip'
foreign import ccall "&sk_stream_skip" p'sk_stream_skip ::
  FunPtr (Ptr (Sk_stream) -> CSize -> IO (CSize))

{- | C function signature:

@
_Bool sk_stream_is_at_end(sk_stream_t *cstream)
@
-}
foreign import ccall "sk_stream_is_at_end" sk_stream_is_at_end ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_stream_is_at_end'
foreign import ccall "&sk_stream_is_at_end" p'sk_stream_is_at_end ::
  FunPtr (Ptr (Sk_stream) -> IO (CBool))

{- | C function signature:

@
_Bool sk_stream_read_s8(sk_stream_t *cstream, int8_t *buffer)
@
-}
foreign import ccall "sk_stream_read_s8" sk_stream_read_s8 ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> Ptr (Int8) -- ^ C argument @"int8_t * buffer"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_stream_read_s8'
foreign import ccall "&sk_stream_read_s8" p'sk_stream_read_s8 ::
  FunPtr (Ptr (Sk_stream) -> Ptr (Int8) -> IO (CBool))

{- | C function signature:

@
_Bool sk_stream_read_s16(sk_stream_t *cstream, int16_t *buffer)
@
-}
foreign import ccall "sk_stream_read_s16" sk_stream_read_s16 ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> Ptr (Int16) -- ^ C argument @"int16_t * buffer"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_stream_read_s16'
foreign import ccall "&sk_stream_read_s16" p'sk_stream_read_s16 ::
  FunPtr (Ptr (Sk_stream) -> Ptr (Int16) -> IO (CBool))

{- | C function signature:

@
_Bool sk_stream_read_s32(sk_stream_t *cstream, int32_t *buffer)
@
-}
foreign import ccall "sk_stream_read_s32" sk_stream_read_s32 ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> Ptr (Int32) -- ^ C argument @"int32_t * buffer"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_stream_read_s32'
foreign import ccall "&sk_stream_read_s32" p'sk_stream_read_s32 ::
  FunPtr (Ptr (Sk_stream) -> Ptr (Int32) -> IO (CBool))

{- | C function signature:

@
_Bool sk_stream_read_u8(sk_stream_t *cstream, uint8_t *buffer)
@
-}
foreign import ccall "sk_stream_read_u8" sk_stream_read_u8 ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> Ptr (Word8) -- ^ C argument @"uint8_t * buffer"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_stream_read_u8'
foreign import ccall "&sk_stream_read_u8" p'sk_stream_read_u8 ::
  FunPtr (Ptr (Sk_stream) -> Ptr (Word8) -> IO (CBool))

{- | C function signature:

@
_Bool sk_stream_read_u16(sk_stream_t *cstream, uint16_t *buffer)
@
-}
foreign import ccall "sk_stream_read_u16" sk_stream_read_u16 ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> Ptr (Word16) -- ^ C argument @"uint16_t * buffer"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_stream_read_u16'
foreign import ccall "&sk_stream_read_u16" p'sk_stream_read_u16 ::
  FunPtr (Ptr (Sk_stream) -> Ptr (Word16) -> IO (CBool))

{- | C function signature:

@
_Bool sk_stream_read_u32(sk_stream_t *cstream, uint32_t *buffer)
@
-}
foreign import ccall "sk_stream_read_u32" sk_stream_read_u32 ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> Ptr (Word32) -- ^ C argument @"uint32_t * buffer"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_stream_read_u32'
foreign import ccall "&sk_stream_read_u32" p'sk_stream_read_u32 ::
  FunPtr (Ptr (Sk_stream) -> Ptr (Word32) -> IO (CBool))

{- | C function signature:

@
_Bool sk_stream_read_bool(sk_stream_t *cstream, _Bool *buffer)
@
-}
foreign import ccall "sk_stream_read_bool" sk_stream_read_bool ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> Ptr (CBool) -- ^ C argument @"_Bool * buffer"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_stream_read_bool'
foreign import ccall "&sk_stream_read_bool" p'sk_stream_read_bool ::
  FunPtr (Ptr (Sk_stream) -> Ptr (CBool) -> IO (CBool))

{- | C function signature:

@
_Bool sk_stream_rewind(sk_stream_t *cstream)
@
-}
foreign import ccall "sk_stream_rewind" sk_stream_rewind ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_stream_rewind'
foreign import ccall "&sk_stream_rewind" p'sk_stream_rewind ::
  FunPtr (Ptr (Sk_stream) -> IO (CBool))

{- | C function signature:

@
_Bool sk_stream_has_position(sk_stream_t *cstream)
@
-}
foreign import ccall "sk_stream_has_position" sk_stream_has_position ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_stream_has_position'
foreign import ccall "&sk_stream_has_position" p'sk_stream_has_position ::
  FunPtr (Ptr (Sk_stream) -> IO (CBool))

{- | C function signature:

@
size_t sk_stream_get_position(sk_stream_t *cstream)
@
-}
foreign import ccall "sk_stream_get_position" sk_stream_get_position ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_stream_get_position'
foreign import ccall "&sk_stream_get_position" p'sk_stream_get_position ::
  FunPtr (Ptr (Sk_stream) -> IO (CSize))

{- | C function signature:

@
_Bool sk_stream_seek(sk_stream_t *cstream, size_t position)
@
-}
foreign import ccall "sk_stream_seek" sk_stream_seek ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> CSize -- ^ C argument @"size_t position"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_stream_seek'
foreign import ccall "&sk_stream_seek" p'sk_stream_seek ::
  FunPtr (Ptr (Sk_stream) -> CSize -> IO (CBool))

{- | C function signature:

@
_Bool sk_stream_move(sk_stream_t *cstream, long offset)
@
-}
foreign import ccall "sk_stream_move" sk_stream_move ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> CLong -- ^ C argument @"long offset"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_stream_move'
foreign import ccall "&sk_stream_move" p'sk_stream_move ::
  FunPtr (Ptr (Sk_stream) -> CLong -> IO (CBool))

{- | C function signature:

@
_Bool sk_stream_has_length(sk_stream_t *cstream)
@
-}
foreign import ccall "sk_stream_has_length" sk_stream_has_length ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_stream_has_length'
foreign import ccall "&sk_stream_has_length" p'sk_stream_has_length ::
  FunPtr (Ptr (Sk_stream) -> IO (CBool))

{- | C function signature:

@
size_t sk_stream_get_length(sk_stream_t *cstream)
@
-}
foreign import ccall "sk_stream_get_length" sk_stream_get_length ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_stream_get_length'
foreign import ccall "&sk_stream_get_length" p'sk_stream_get_length ::
  FunPtr (Ptr (Sk_stream) -> IO (CSize))

{- | C function signature:

@
const void *sk_stream_get_memory_base(sk_stream_t *cstream)
@
-}
foreign import ccall "sk_stream_get_memory_base" sk_stream_get_memory_base ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> IO (Ptr (())) -- ^ C return type: @"const void *"@

-- | Function pointer to 'sk_stream_get_memory_base'
foreign import ccall "&sk_stream_get_memory_base" p'sk_stream_get_memory_base ::
  FunPtr (Ptr (Sk_stream) -> IO (Ptr (())))

{- | C function signature:

@
sk_stream_t *sk_stream_fork(sk_stream_t *cstream)
@
-}
foreign import ccall "sk_stream_fork" sk_stream_fork ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> IO (Ptr (Sk_stream)) -- ^ C return type: @"sk_stream_t *"@

-- | Function pointer to 'sk_stream_fork'
foreign import ccall "&sk_stream_fork" p'sk_stream_fork ::
  FunPtr (Ptr (Sk_stream) -> IO (Ptr (Sk_stream)))

{- | C function signature:

@
sk_stream_t *sk_stream_duplicate(sk_stream_t *cstream)
@
-}
foreign import ccall "sk_stream_duplicate" sk_stream_duplicate ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> IO (Ptr (Sk_stream)) -- ^ C return type: @"sk_stream_t *"@

-- | Function pointer to 'sk_stream_duplicate'
foreign import ccall "&sk_stream_duplicate" p'sk_stream_duplicate ::
  FunPtr (Ptr (Sk_stream) -> IO (Ptr (Sk_stream)))

{- | C function signature:

@
void sk_stream_destroy(sk_stream_t *cstream)
@
-}
foreign import ccall "sk_stream_destroy" sk_stream_destroy ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * cstream"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_stream_destroy'
foreign import ccall "&sk_stream_destroy" p'sk_stream_destroy ::
  FunPtr (Ptr (Sk_stream) -> IO (()))

{- | C function signature:

@
sk_wstream_filestream_t *sk_filewstream_new(const char *path)
@
-}
foreign import ccall "sk_filewstream_new" sk_filewstream_new ::
  Ptr (CChar) -- ^ C argument @"const char * path"@
  -> IO (Ptr (Sk_wstream_filestream)) -- ^ C return type: @"sk_wstream_filestream_t *"@

-- | Function pointer to 'sk_filewstream_new'
foreign import ccall "&sk_filewstream_new" p'sk_filewstream_new ::
  FunPtr (Ptr (CChar) -> IO (Ptr (Sk_wstream_filestream)))

{- | C function signature:

@
void sk_filewstream_destroy(sk_wstream_filestream_t *cstream)
@
-}
foreign import ccall "sk_filewstream_destroy" sk_filewstream_destroy ::
  Ptr (Sk_wstream_filestream) -- ^ C argument @"sk_wstream_filestream_t * cstream"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_filewstream_destroy'
foreign import ccall "&sk_filewstream_destroy" p'sk_filewstream_destroy ::
  FunPtr (Ptr (Sk_wstream_filestream) -> IO (()))

{- | C function signature:

@
_Bool sk_filewstream_is_valid(sk_wstream_filestream_t *cstream)
@
-}
foreign import ccall "sk_filewstream_is_valid" sk_filewstream_is_valid ::
  Ptr (Sk_wstream_filestream) -- ^ C argument @"sk_wstream_filestream_t * cstream"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_filewstream_is_valid'
foreign import ccall "&sk_filewstream_is_valid" p'sk_filewstream_is_valid ::
  FunPtr (Ptr (Sk_wstream_filestream) -> IO (CBool))

{- | C function signature:

@
sk_wstream_dynamicmemorystream_t *sk_dynamicmemorywstream_new(void)
@
-}
foreign import ccall "sk_dynamicmemorywstream_new" sk_dynamicmemorywstream_new ::
  IO (Ptr (Sk_wstream_dynamicmemorystream)) -- ^ C return type: @"sk_wstream_dynamicmemorystream_t *"@

-- | Function pointer to 'sk_dynamicmemorywstream_new'
foreign import ccall "&sk_dynamicmemorywstream_new" p'sk_dynamicmemorywstream_new ::
  FunPtr (IO (Ptr (Sk_wstream_dynamicmemorystream)))

{- | C function signature:

@
sk_stream_asset_t *sk_dynamicmemorywstream_detach_as_stream(sk_wstream_dynamicmemorystream_t *cstream)
@
-}
foreign import ccall "sk_dynamicmemorywstream_detach_as_stream" sk_dynamicmemorywstream_detach_as_stream ::
  Ptr (Sk_wstream_dynamicmemorystream) -- ^ C argument @"sk_wstream_dynamicmemorystream_t * cstream"@
  -> IO (Ptr (Sk_stream_asset)) -- ^ C return type: @"sk_stream_asset_t *"@

-- | Function pointer to 'sk_dynamicmemorywstream_detach_as_stream'
foreign import ccall "&sk_dynamicmemorywstream_detach_as_stream" p'sk_dynamicmemorywstream_detach_as_stream ::
  FunPtr (Ptr (Sk_wstream_dynamicmemorystream) -> IO (Ptr (Sk_stream_asset)))

{- | C function signature:

@
sk_data_t *sk_dynamicmemorywstream_detach_as_data(sk_wstream_dynamicmemorystream_t *cstream)
@
-}
foreign import ccall "sk_dynamicmemorywstream_detach_as_data" sk_dynamicmemorywstream_detach_as_data ::
  Ptr (Sk_wstream_dynamicmemorystream) -- ^ C argument @"sk_wstream_dynamicmemorystream_t * cstream"@
  -> IO (Ptr (Sk_data)) -- ^ C return type: @"sk_data_t *"@

-- | Function pointer to 'sk_dynamicmemorywstream_detach_as_data'
foreign import ccall "&sk_dynamicmemorywstream_detach_as_data" p'sk_dynamicmemorywstream_detach_as_data ::
  FunPtr (Ptr (Sk_wstream_dynamicmemorystream) -> IO (Ptr (Sk_data)))

{- | C function signature:

@
void sk_dynamicmemorywstream_copy_to(sk_wstream_dynamicmemorystream_t *cstream, void *data)
@
-}
foreign import ccall "sk_dynamicmemorywstream_copy_to" sk_dynamicmemorywstream_copy_to ::
  Ptr (Sk_wstream_dynamicmemorystream) -- ^ C argument @"sk_wstream_dynamicmemorystream_t * cstream"@
  -> Ptr (()) -- ^ C argument @"void * data"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_dynamicmemorywstream_copy_to'
foreign import ccall "&sk_dynamicmemorywstream_copy_to" p'sk_dynamicmemorywstream_copy_to ::
  FunPtr (Ptr (Sk_wstream_dynamicmemorystream) -> Ptr (()) -> IO (()))

{- | C function signature:

@
_Bool sk_dynamicmemorywstream_write_to_stream(sk_wstream_dynamicmemorystream_t *cstream, sk_wstream_t *dst)
@
-}
foreign import ccall "sk_dynamicmemorywstream_write_to_stream" sk_dynamicmemorywstream_write_to_stream ::
  Ptr (Sk_wstream_dynamicmemorystream) -- ^ C argument @"sk_wstream_dynamicmemorystream_t * cstream"@
  -> Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * dst"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_dynamicmemorywstream_write_to_stream'
foreign import ccall "&sk_dynamicmemorywstream_write_to_stream" p'sk_dynamicmemorywstream_write_to_stream ::
  FunPtr (Ptr (Sk_wstream_dynamicmemorystream) -> Ptr (Sk_wstream) -> IO (CBool))

{- | C function signature:

@
void sk_dynamicmemorywstream_destroy(sk_wstream_dynamicmemorystream_t *cstream)
@
-}
foreign import ccall "sk_dynamicmemorywstream_destroy" sk_dynamicmemorywstream_destroy ::
  Ptr (Sk_wstream_dynamicmemorystream) -- ^ C argument @"sk_wstream_dynamicmemorystream_t * cstream"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_dynamicmemorywstream_destroy'
foreign import ccall "&sk_dynamicmemorywstream_destroy" p'sk_dynamicmemorywstream_destroy ::
  FunPtr (Ptr (Sk_wstream_dynamicmemorystream) -> IO (()))

{- | C function signature:

@
_Bool sk_wstream_write(sk_wstream_t *cstream, const void *buffer, size_t size)
@
-}
foreign import ccall "sk_wstream_write" sk_wstream_write ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * cstream"@
  -> Ptr (()) -- ^ C argument @"const void * buffer"@
  -> CSize -- ^ C argument @"size_t size"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_wstream_write'
foreign import ccall "&sk_wstream_write" p'sk_wstream_write ::
  FunPtr (Ptr (Sk_wstream) -> Ptr (()) -> CSize -> IO (CBool))

{- | C function signature:

@
_Bool sk_wstream_newline(sk_wstream_t *cstream)
@
-}
foreign import ccall "sk_wstream_newline" sk_wstream_newline ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * cstream"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_wstream_newline'
foreign import ccall "&sk_wstream_newline" p'sk_wstream_newline ::
  FunPtr (Ptr (Sk_wstream) -> IO (CBool))

{- | C function signature:

@
void sk_wstream_flush(sk_wstream_t *cstream)
@
-}
foreign import ccall "sk_wstream_flush" sk_wstream_flush ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * cstream"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_wstream_flush'
foreign import ccall "&sk_wstream_flush" p'sk_wstream_flush ::
  FunPtr (Ptr (Sk_wstream) -> IO (()))

{- | C function signature:

@
size_t sk_wstream_bytes_written(sk_wstream_t *cstream)
@
-}
foreign import ccall "sk_wstream_bytes_written" sk_wstream_bytes_written ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * cstream"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_wstream_bytes_written'
foreign import ccall "&sk_wstream_bytes_written" p'sk_wstream_bytes_written ::
  FunPtr (Ptr (Sk_wstream) -> IO (CSize))

{- | C function signature:

@
_Bool sk_wstream_write_8(sk_wstream_t *cstream, uint8_t value)
@
-}
foreign import ccall "sk_wstream_write_8" sk_wstream_write_8 ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * cstream"@
  -> Word8 -- ^ C argument @"uint8_t value"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_wstream_write_8'
foreign import ccall "&sk_wstream_write_8" p'sk_wstream_write_8 ::
  FunPtr (Ptr (Sk_wstream) -> Word8 -> IO (CBool))

{- | C function signature:

@
_Bool sk_wstream_write_16(sk_wstream_t *cstream, uint16_t value)
@
-}
foreign import ccall "sk_wstream_write_16" sk_wstream_write_16 ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * cstream"@
  -> Word16 -- ^ C argument @"uint16_t value"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_wstream_write_16'
foreign import ccall "&sk_wstream_write_16" p'sk_wstream_write_16 ::
  FunPtr (Ptr (Sk_wstream) -> Word16 -> IO (CBool))

{- | C function signature:

@
_Bool sk_wstream_write_32(sk_wstream_t *cstream, uint32_t value)
@
-}
foreign import ccall "sk_wstream_write_32" sk_wstream_write_32 ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * cstream"@
  -> Word32 -- ^ C argument @"uint32_t value"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_wstream_write_32'
foreign import ccall "&sk_wstream_write_32" p'sk_wstream_write_32 ::
  FunPtr (Ptr (Sk_wstream) -> Word32 -> IO (CBool))

{- | C function signature:

@
_Bool sk_wstream_write_text(sk_wstream_t *cstream, const char *value)
@
-}
foreign import ccall "sk_wstream_write_text" sk_wstream_write_text ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * cstream"@
  -> Ptr (CChar) -- ^ C argument @"const char * value"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_wstream_write_text'
foreign import ccall "&sk_wstream_write_text" p'sk_wstream_write_text ::
  FunPtr (Ptr (Sk_wstream) -> Ptr (CChar) -> IO (CBool))

{- | C function signature:

@
_Bool sk_wstream_write_dec_as_text(sk_wstream_t *cstream, int32_t value)
@
-}
foreign import ccall "sk_wstream_write_dec_as_text" sk_wstream_write_dec_as_text ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * cstream"@
  -> Int32 -- ^ C argument @"int32_t value"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_wstream_write_dec_as_text'
foreign import ccall "&sk_wstream_write_dec_as_text" p'sk_wstream_write_dec_as_text ::
  FunPtr (Ptr (Sk_wstream) -> Int32 -> IO (CBool))

{- | C function signature:

@
_Bool sk_wstream_write_bigdec_as_text(sk_wstream_t *cstream, int64_t value, int minDigits)
@
-}
foreign import ccall "sk_wstream_write_bigdec_as_text" sk_wstream_write_bigdec_as_text ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * cstream"@
  -> Int64 -- ^ C argument @"int64_t value"@
  -> CInt -- ^ C argument @"int minDigits"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_wstream_write_bigdec_as_text'
foreign import ccall "&sk_wstream_write_bigdec_as_text" p'sk_wstream_write_bigdec_as_text ::
  FunPtr (Ptr (Sk_wstream) -> Int64 -> CInt -> IO (CBool))

{- | C function signature:

@
_Bool sk_wstream_write_hex_as_text(sk_wstream_t *cstream, uint32_t value, int minDigits)
@
-}
foreign import ccall "sk_wstream_write_hex_as_text" sk_wstream_write_hex_as_text ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * cstream"@
  -> Word32 -- ^ C argument @"uint32_t value"@
  -> CInt -- ^ C argument @"int minDigits"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_wstream_write_hex_as_text'
foreign import ccall "&sk_wstream_write_hex_as_text" p'sk_wstream_write_hex_as_text ::
  FunPtr (Ptr (Sk_wstream) -> Word32 -> CInt -> IO (CBool))

{- | C function signature:

@
_Bool sk_wstream_write_scalar_as_text(sk_wstream_t *cstream, float value)
@
-}
foreign import ccall "sk_wstream_write_scalar_as_text" sk_wstream_write_scalar_as_text ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * cstream"@
  -> CFloat -- ^ C argument @"float value"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_wstream_write_scalar_as_text'
foreign import ccall "&sk_wstream_write_scalar_as_text" p'sk_wstream_write_scalar_as_text ::
  FunPtr (Ptr (Sk_wstream) -> CFloat -> IO (CBool))

{- | C function signature:

@
_Bool sk_wstream_write_bool(sk_wstream_t *cstream, _Bool value)
@
-}
foreign import ccall "sk_wstream_write_bool" sk_wstream_write_bool ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * cstream"@
  -> CBool -- ^ C argument @"_Bool value"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_wstream_write_bool'
foreign import ccall "&sk_wstream_write_bool" p'sk_wstream_write_bool ::
  FunPtr (Ptr (Sk_wstream) -> CBool -> IO (CBool))

{- | C function signature:

@
_Bool sk_wstream_write_scalar(sk_wstream_t *cstream, float value)
@
-}
foreign import ccall "sk_wstream_write_scalar" sk_wstream_write_scalar ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * cstream"@
  -> CFloat -- ^ C argument @"float value"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_wstream_write_scalar'
foreign import ccall "&sk_wstream_write_scalar" p'sk_wstream_write_scalar ::
  FunPtr (Ptr (Sk_wstream) -> CFloat -> IO (CBool))

{- | C function signature:

@
_Bool sk_wstream_write_packed_uint(sk_wstream_t *cstream, size_t value)
@
-}
foreign import ccall "sk_wstream_write_packed_uint" sk_wstream_write_packed_uint ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * cstream"@
  -> CSize -- ^ C argument @"size_t value"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_wstream_write_packed_uint'
foreign import ccall "&sk_wstream_write_packed_uint" p'sk_wstream_write_packed_uint ::
  FunPtr (Ptr (Sk_wstream) -> CSize -> IO (CBool))

{- | C function signature:

@
_Bool sk_wstream_write_stream(sk_wstream_t *cstream, sk_stream_t *input, size_t length)
@
-}
foreign import ccall "sk_wstream_write_stream" sk_wstream_write_stream ::
  Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * cstream"@
  -> Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * input"@
  -> CSize -- ^ C argument @"size_t length"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_wstream_write_stream'
foreign import ccall "&sk_wstream_write_stream" p'sk_wstream_write_stream ::
  FunPtr (Ptr (Sk_wstream) -> Ptr (Sk_stream) -> CSize -> IO (CBool))

{- | C function signature:

@
int sk_wstream_get_size_of_packed_uint(size_t value)
@
-}
foreign import ccall "sk_wstream_get_size_of_packed_uint" sk_wstream_get_size_of_packed_uint ::
  CSize -- ^ C argument @"size_t value"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_wstream_get_size_of_packed_uint'
foreign import ccall "&sk_wstream_get_size_of_packed_uint" p'sk_wstream_get_size_of_packed_uint ::
  FunPtr (CSize -> IO (CInt))

{- | C function signature:

@
void sk_blender_ref(sk_blender_t *blender)
@
-}
foreign import ccall "sk_blender_ref" sk_blender_ref ::
  Ptr (Sk_blender) -- ^ C argument @"sk_blender_t * blender"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_blender_ref'
foreign import ccall "&sk_blender_ref" p'sk_blender_ref ::
  FunPtr (Ptr (Sk_blender) -> IO (()))

{- | C function signature:

@
void sk_blender_unref(sk_blender_t *blender)
@
-}
foreign import ccall "sk_blender_unref" sk_blender_unref ::
  Ptr (Sk_blender) -- ^ C argument @"sk_blender_t * blender"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_blender_unref'
foreign import ccall "&sk_blender_unref" p'sk_blender_unref ::
  FunPtr (Ptr (Sk_blender) -> IO (()))

{- | C function signature:

@
sk_blender_t *sk_blender_new_mode(sk_blendmode_t mode)
@
-}
foreign import ccall "sk_blender_new_mode" sk_blender_new_mode ::
  Sk_blendmode -- ^ C argument @"sk_blendmode_t mode"@
  -> IO (Ptr (Sk_blender)) -- ^ C return type: @"sk_blender_t *"@

-- | Function pointer to 'sk_blender_new_mode'
foreign import ccall "&sk_blender_new_mode" p'sk_blender_new_mode ::
  FunPtr (Sk_blendmode -> IO (Ptr (Sk_blender)))

{- | C function signature:

@
sk_blender_t *sk_blender_new_arithmetic(float k1, float k2, float k3, float k4, _Bool enforcePremul)
@
-}
foreign import ccall "sk_blender_new_arithmetic" sk_blender_new_arithmetic ::
  CFloat -- ^ C argument @"float k1"@
  -> CFloat -- ^ C argument @"float k2"@
  -> CFloat -- ^ C argument @"float k3"@
  -> CFloat -- ^ C argument @"float k4"@
  -> CBool -- ^ C argument @"_Bool enforcePremul"@
  -> IO (Ptr (Sk_blender)) -- ^ C return type: @"sk_blender_t *"@

-- | Function pointer to 'sk_blender_new_arithmetic'
foreign import ccall "&sk_blender_new_arithmetic" p'sk_blender_new_arithmetic ::
  FunPtr (CFloat -> CFloat -> CFloat -> CFloat -> CBool -> IO (Ptr (Sk_blender)))

{- | C function signature:

@
void sk_graphics_init(void)
@
-}
foreign import ccall "sk_graphics_init" sk_graphics_init ::
  IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_graphics_init'
foreign import ccall "&sk_graphics_init" p'sk_graphics_init ::
  FunPtr (IO (()))

{- | C function signature:

@
void sk_graphics_purge_font_cache(void)
@
-}
foreign import ccall "sk_graphics_purge_font_cache" sk_graphics_purge_font_cache ::
  IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_graphics_purge_font_cache'
foreign import ccall "&sk_graphics_purge_font_cache" p'sk_graphics_purge_font_cache ::
  FunPtr (IO (()))

{- | C function signature:

@
void sk_graphics_purge_resource_cache(void)
@
-}
foreign import ccall "sk_graphics_purge_resource_cache" sk_graphics_purge_resource_cache ::
  IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_graphics_purge_resource_cache'
foreign import ccall "&sk_graphics_purge_resource_cache" p'sk_graphics_purge_resource_cache ::
  FunPtr (IO (()))

{- | C function signature:

@
void sk_graphics_purge_all_caches(void)
@
-}
foreign import ccall "sk_graphics_purge_all_caches" sk_graphics_purge_all_caches ::
  IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_graphics_purge_all_caches'
foreign import ccall "&sk_graphics_purge_all_caches" p'sk_graphics_purge_all_caches ::
  FunPtr (IO (()))

{- | C function signature:

@
size_t sk_graphics_get_font_cache_used(void)
@
-}
foreign import ccall "sk_graphics_get_font_cache_used" sk_graphics_get_font_cache_used ::
  IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_graphics_get_font_cache_used'
foreign import ccall "&sk_graphics_get_font_cache_used" p'sk_graphics_get_font_cache_used ::
  FunPtr (IO (CSize))

{- | C function signature:

@
size_t sk_graphics_get_font_cache_limit(void)
@
-}
foreign import ccall "sk_graphics_get_font_cache_limit" sk_graphics_get_font_cache_limit ::
  IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_graphics_get_font_cache_limit'
foreign import ccall "&sk_graphics_get_font_cache_limit" p'sk_graphics_get_font_cache_limit ::
  FunPtr (IO (CSize))

{- | C function signature:

@
size_t sk_graphics_set_font_cache_limit(size_t bytes)
@
-}
foreign import ccall "sk_graphics_set_font_cache_limit" sk_graphics_set_font_cache_limit ::
  CSize -- ^ C argument @"size_t bytes"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_graphics_set_font_cache_limit'
foreign import ccall "&sk_graphics_set_font_cache_limit" p'sk_graphics_set_font_cache_limit ::
  FunPtr (CSize -> IO (CSize))

{- | C function signature:

@
int sk_graphics_get_font_cache_count_used(void)
@
-}
foreign import ccall "sk_graphics_get_font_cache_count_used" sk_graphics_get_font_cache_count_used ::
  IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_graphics_get_font_cache_count_used'
foreign import ccall "&sk_graphics_get_font_cache_count_used" p'sk_graphics_get_font_cache_count_used ::
  FunPtr (IO (CInt))

{- | C function signature:

@
int sk_graphics_get_font_cache_count_limit(void)
@
-}
foreign import ccall "sk_graphics_get_font_cache_count_limit" sk_graphics_get_font_cache_count_limit ::
  IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_graphics_get_font_cache_count_limit'
foreign import ccall "&sk_graphics_get_font_cache_count_limit" p'sk_graphics_get_font_cache_count_limit ::
  FunPtr (IO (CInt))

{- | C function signature:

@
int sk_graphics_set_font_cache_count_limit(int count)
@
-}
foreign import ccall "sk_graphics_set_font_cache_count_limit" sk_graphics_set_font_cache_count_limit ::
  CInt -- ^ C argument @"int count"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_graphics_set_font_cache_count_limit'
foreign import ccall "&sk_graphics_set_font_cache_count_limit" p'sk_graphics_set_font_cache_count_limit ::
  FunPtr (CInt -> IO (CInt))

{- | C function signature:

@
size_t sk_graphics_get_resource_cache_total_bytes_used(void)
@
-}
foreign import ccall "sk_graphics_get_resource_cache_total_bytes_used" sk_graphics_get_resource_cache_total_bytes_used ::
  IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_graphics_get_resource_cache_total_bytes_used'
foreign import ccall "&sk_graphics_get_resource_cache_total_bytes_used" p'sk_graphics_get_resource_cache_total_bytes_used ::
  FunPtr (IO (CSize))

{- | C function signature:

@
size_t sk_graphics_get_resource_cache_total_byte_limit(void)
@
-}
foreign import ccall "sk_graphics_get_resource_cache_total_byte_limit" sk_graphics_get_resource_cache_total_byte_limit ::
  IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_graphics_get_resource_cache_total_byte_limit'
foreign import ccall "&sk_graphics_get_resource_cache_total_byte_limit" p'sk_graphics_get_resource_cache_total_byte_limit ::
  FunPtr (IO (CSize))

{- | C function signature:

@
size_t sk_graphics_set_resource_cache_total_byte_limit(size_t newLimit)
@
-}
foreign import ccall "sk_graphics_set_resource_cache_total_byte_limit" sk_graphics_set_resource_cache_total_byte_limit ::
  CSize -- ^ C argument @"size_t newLimit"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_graphics_set_resource_cache_total_byte_limit'
foreign import ccall "&sk_graphics_set_resource_cache_total_byte_limit" p'sk_graphics_set_resource_cache_total_byte_limit ::
  FunPtr (CSize -> IO (CSize))

{- | C function signature:

@
size_t sk_graphics_get_resource_cache_single_allocation_byte_limit(void)
@
-}
foreign import ccall "sk_graphics_get_resource_cache_single_allocation_byte_limit" sk_graphics_get_resource_cache_single_allocation_byte_limit ::
  IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_graphics_get_resource_cache_single_allocation_byte_limit'
foreign import ccall "&sk_graphics_get_resource_cache_single_allocation_byte_limit" p'sk_graphics_get_resource_cache_single_allocation_byte_limit ::
  FunPtr (IO (CSize))

{- | C function signature:

@
size_t sk_graphics_set_resource_cache_single_allocation_byte_limit(size_t newLimit)
@
-}
foreign import ccall "sk_graphics_set_resource_cache_single_allocation_byte_limit" sk_graphics_set_resource_cache_single_allocation_byte_limit ::
  CSize -- ^ C argument @"size_t newLimit"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_graphics_set_resource_cache_single_allocation_byte_limit'
foreign import ccall "&sk_graphics_set_resource_cache_single_allocation_byte_limit" p'sk_graphics_set_resource_cache_single_allocation_byte_limit ::
  FunPtr (CSize -> IO (CSize))

{- | C function signature:

@
void sk_graphics_dump_memory_statistics(sk_tracememorydump_t *dump)
@
-}
foreign import ccall "sk_graphics_dump_memory_statistics" sk_graphics_dump_memory_statistics ::
  Ptr (Sk_tracememorydump) -- ^ C argument @"sk_tracememorydump_t * dump"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_graphics_dump_memory_statistics'
foreign import ccall "&sk_graphics_dump_memory_statistics" p'sk_graphics_dump_memory_statistics ::
  FunPtr (Ptr (Sk_tracememorydump) -> IO (()))

{- | C function signature:

@
skottie_animation_t *skottie_animation_make_from_string(const char *data, size_t length)
@
-}
foreign import ccall "skottie_animation_make_from_string" skottie_animation_make_from_string ::
  Ptr (CChar) -- ^ C argument @"const char * data"@
  -> CSize -- ^ C argument @"size_t length"@
  -> IO (Ptr (Skottie_animation)) -- ^ C return type: @"skottie_animation_t *"@

-- | Function pointer to 'skottie_animation_make_from_string'
foreign import ccall "&skottie_animation_make_from_string" p'skottie_animation_make_from_string ::
  FunPtr (Ptr (CChar) -> CSize -> IO (Ptr (Skottie_animation)))

{- | C function signature:

@
skottie_animation_t *skottie_animation_make_from_data(const char *data, size_t length)
@
-}
foreign import ccall "skottie_animation_make_from_data" skottie_animation_make_from_data ::
  Ptr (CChar) -- ^ C argument @"const char * data"@
  -> CSize -- ^ C argument @"size_t length"@
  -> IO (Ptr (Skottie_animation)) -- ^ C return type: @"skottie_animation_t *"@

-- | Function pointer to 'skottie_animation_make_from_data'
foreign import ccall "&skottie_animation_make_from_data" p'skottie_animation_make_from_data ::
  FunPtr (Ptr (CChar) -> CSize -> IO (Ptr (Skottie_animation)))

{- | C function signature:

@
skottie_animation_t *skottie_animation_make_from_stream(sk_stream_t *stream)
@
-}
foreign import ccall "skottie_animation_make_from_stream" skottie_animation_make_from_stream ::
  Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * stream"@
  -> IO (Ptr (Skottie_animation)) -- ^ C return type: @"skottie_animation_t *"@

-- | Function pointer to 'skottie_animation_make_from_stream'
foreign import ccall "&skottie_animation_make_from_stream" p'skottie_animation_make_from_stream ::
  FunPtr (Ptr (Sk_stream) -> IO (Ptr (Skottie_animation)))

{- | C function signature:

@
skottie_animation_t *skottie_animation_make_from_file(const char *path)
@
-}
foreign import ccall "skottie_animation_make_from_file" skottie_animation_make_from_file ::
  Ptr (CChar) -- ^ C argument @"const char * path"@
  -> IO (Ptr (Skottie_animation)) -- ^ C return type: @"skottie_animation_t *"@

-- | Function pointer to 'skottie_animation_make_from_file'
foreign import ccall "&skottie_animation_make_from_file" p'skottie_animation_make_from_file ::
  FunPtr (Ptr (CChar) -> IO (Ptr (Skottie_animation)))

{- | C function signature:

@
void skottie_animation_ref(skottie_animation_t *instance)
@
-}
foreign import ccall "skottie_animation_ref" skottie_animation_ref ::
  Ptr (Skottie_animation) -- ^ C argument @"skottie_animation_t * instance"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'skottie_animation_ref'
foreign import ccall "&skottie_animation_ref" p'skottie_animation_ref ::
  FunPtr (Ptr (Skottie_animation) -> IO (()))

{- | C function signature:

@
void skottie_animation_unref(skottie_animation_t *instance)
@
-}
foreign import ccall "skottie_animation_unref" skottie_animation_unref ::
  Ptr (Skottie_animation) -- ^ C argument @"skottie_animation_t * instance"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'skottie_animation_unref'
foreign import ccall "&skottie_animation_unref" p'skottie_animation_unref ::
  FunPtr (Ptr (Skottie_animation) -> IO (()))

{- | C function signature:

@
void skottie_animation_delete(skottie_animation_t *instance)
@
-}
foreign import ccall "skottie_animation_delete" skottie_animation_delete ::
  Ptr (Skottie_animation) -- ^ C argument @"skottie_animation_t * instance"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'skottie_animation_delete'
foreign import ccall "&skottie_animation_delete" p'skottie_animation_delete ::
  FunPtr (Ptr (Skottie_animation) -> IO (()))

{- | C function signature:

@
void skottie_animation_render(skottie_animation_t *instance, sk_canvas_t *canvas, sk_rect_t *dst)
@
-}
foreign import ccall "skottie_animation_render" skottie_animation_render ::
  Ptr (Skottie_animation) -- ^ C argument @"skottie_animation_t * instance"@
  -> Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * canvas"@
  -> Ptr (Sk_rect) -- ^ C argument @"sk_rect_t * dst"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'skottie_animation_render'
foreign import ccall "&skottie_animation_render" p'skottie_animation_render ::
  FunPtr (Ptr (Skottie_animation) -> Ptr (Sk_canvas) -> Ptr (Sk_rect) -> IO (()))

{- | C function signature:

@
void skottie_animation_render_with_flags(skottie_animation_t *instance, sk_canvas_t *canvas, sk_rect_t *dst, skottie_animation_renderflags_t flags)
@
-}
foreign import ccall "skottie_animation_render_with_flags" skottie_animation_render_with_flags ::
  Ptr (Skottie_animation) -- ^ C argument @"skottie_animation_t * instance"@
  -> Ptr (Sk_canvas) -- ^ C argument @"sk_canvas_t * canvas"@
  -> Ptr (Sk_rect) -- ^ C argument @"sk_rect_t * dst"@
  -> Skottie_animation_renderflags -- ^ C argument @"skottie_animation_renderflags_t flags"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'skottie_animation_render_with_flags'
foreign import ccall "&skottie_animation_render_with_flags" p'skottie_animation_render_with_flags ::
  FunPtr (Ptr (Skottie_animation) -> Ptr (Sk_canvas) -> Ptr (Sk_rect) -> Skottie_animation_renderflags -> IO (()))

{- | C function signature:

@
void skottie_animation_seek(skottie_animation_t *instance, float t, sksg_invalidation_controller_t *ic)
@
-}
foreign import ccall "skottie_animation_seek" skottie_animation_seek ::
  Ptr (Skottie_animation) -- ^ C argument @"skottie_animation_t * instance"@
  -> CFloat -- ^ C argument @"float t"@
  -> Ptr (Sksg_invalidation_controller) -- ^ C argument @"sksg_invalidation_controller_t * ic"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'skottie_animation_seek'
foreign import ccall "&skottie_animation_seek" p'skottie_animation_seek ::
  FunPtr (Ptr (Skottie_animation) -> CFloat -> Ptr (Sksg_invalidation_controller) -> IO (()))

{- | C function signature:

@
void skottie_animation_seek_frame(skottie_animation_t *instance, float t, sksg_invalidation_controller_t *ic)
@
-}
foreign import ccall "skottie_animation_seek_frame" skottie_animation_seek_frame ::
  Ptr (Skottie_animation) -- ^ C argument @"skottie_animation_t * instance"@
  -> CFloat -- ^ C argument @"float t"@
  -> Ptr (Sksg_invalidation_controller) -- ^ C argument @"sksg_invalidation_controller_t * ic"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'skottie_animation_seek_frame'
foreign import ccall "&skottie_animation_seek_frame" p'skottie_animation_seek_frame ::
  FunPtr (Ptr (Skottie_animation) -> CFloat -> Ptr (Sksg_invalidation_controller) -> IO (()))

{- | C function signature:

@
void skottie_animation_seek_frame_time(skottie_animation_t *instance, float t, sksg_invalidation_controller_t *ic)
@
-}
foreign import ccall "skottie_animation_seek_frame_time" skottie_animation_seek_frame_time ::
  Ptr (Skottie_animation) -- ^ C argument @"skottie_animation_t * instance"@
  -> CFloat -- ^ C argument @"float t"@
  -> Ptr (Sksg_invalidation_controller) -- ^ C argument @"sksg_invalidation_controller_t * ic"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'skottie_animation_seek_frame_time'
foreign import ccall "&skottie_animation_seek_frame_time" p'skottie_animation_seek_frame_time ::
  FunPtr (Ptr (Skottie_animation) -> CFloat -> Ptr (Sksg_invalidation_controller) -> IO (()))

{- | C function signature:

@
double skottie_animation_get_duration(skottie_animation_t *instance)
@
-}
foreign import ccall "skottie_animation_get_duration" skottie_animation_get_duration ::
  Ptr (Skottie_animation) -- ^ C argument @"skottie_animation_t * instance"@
  -> IO (CDouble) -- ^ C return type: @"double"@

-- | Function pointer to 'skottie_animation_get_duration'
foreign import ccall "&skottie_animation_get_duration" p'skottie_animation_get_duration ::
  FunPtr (Ptr (Skottie_animation) -> IO (CDouble))

{- | C function signature:

@
double skottie_animation_get_fps(skottie_animation_t *instance)
@
-}
foreign import ccall "skottie_animation_get_fps" skottie_animation_get_fps ::
  Ptr (Skottie_animation) -- ^ C argument @"skottie_animation_t * instance"@
  -> IO (CDouble) -- ^ C return type: @"double"@

-- | Function pointer to 'skottie_animation_get_fps'
foreign import ccall "&skottie_animation_get_fps" p'skottie_animation_get_fps ::
  FunPtr (Ptr (Skottie_animation) -> IO (CDouble))

{- | C function signature:

@
double skottie_animation_get_in_point(skottie_animation_t *instance)
@
-}
foreign import ccall "skottie_animation_get_in_point" skottie_animation_get_in_point ::
  Ptr (Skottie_animation) -- ^ C argument @"skottie_animation_t * instance"@
  -> IO (CDouble) -- ^ C return type: @"double"@

-- | Function pointer to 'skottie_animation_get_in_point'
foreign import ccall "&skottie_animation_get_in_point" p'skottie_animation_get_in_point ::
  FunPtr (Ptr (Skottie_animation) -> IO (CDouble))

{- | C function signature:

@
double skottie_animation_get_out_point(skottie_animation_t *instance)
@
-}
foreign import ccall "skottie_animation_get_out_point" skottie_animation_get_out_point ::
  Ptr (Skottie_animation) -- ^ C argument @"skottie_animation_t * instance"@
  -> IO (CDouble) -- ^ C return type: @"double"@

-- | Function pointer to 'skottie_animation_get_out_point'
foreign import ccall "&skottie_animation_get_out_point" p'skottie_animation_get_out_point ::
  FunPtr (Ptr (Skottie_animation) -> IO (CDouble))

{- | C function signature:

@
void skottie_animation_get_version(skottie_animation_t *instance, sk_string_t *version)
@
-}
foreign import ccall "skottie_animation_get_version" skottie_animation_get_version ::
  Ptr (Skottie_animation) -- ^ C argument @"skottie_animation_t * instance"@
  -> Ptr (Sk_string) -- ^ C argument @"sk_string_t * version"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'skottie_animation_get_version'
foreign import ccall "&skottie_animation_get_version" p'skottie_animation_get_version ::
  FunPtr (Ptr (Skottie_animation) -> Ptr (Sk_string) -> IO (()))

{- | C function signature:

@
void skottie_animation_get_size(skottie_animation_t *instance, sk_size_t *size)
@
-}
foreign import ccall "skottie_animation_get_size" skottie_animation_get_size ::
  Ptr (Skottie_animation) -- ^ C argument @"skottie_animation_t * instance"@
  -> Ptr (Sk_size) -- ^ C argument @"sk_size_t * size"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'skottie_animation_get_size'
foreign import ccall "&skottie_animation_get_size" p'skottie_animation_get_size ::
  FunPtr (Ptr (Skottie_animation) -> Ptr (Sk_size) -> IO (()))

{- | C function signature:

@
skottie_animation_builder_t *skottie_animation_builder_new(skottie_animation_builder_flags_t flags)
@
-}
foreign import ccall "skottie_animation_builder_new" skottie_animation_builder_new ::
  Skottie_animation_builder_flags -- ^ C argument @"skottie_animation_builder_flags_t flags"@
  -> IO (Ptr (Skottie_animation_builder)) -- ^ C return type: @"skottie_animation_builder_t *"@

-- | Function pointer to 'skottie_animation_builder_new'
foreign import ccall "&skottie_animation_builder_new" p'skottie_animation_builder_new ::
  FunPtr (Skottie_animation_builder_flags -> IO (Ptr (Skottie_animation_builder)))

{- | C function signature:

@
void skottie_animation_builder_delete(skottie_animation_builder_t *instance)
@
-}
foreign import ccall "skottie_animation_builder_delete" skottie_animation_builder_delete ::
  Ptr (Skottie_animation_builder) -- ^ C argument @"skottie_animation_builder_t * instance"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'skottie_animation_builder_delete'
foreign import ccall "&skottie_animation_builder_delete" p'skottie_animation_builder_delete ::
  FunPtr (Ptr (Skottie_animation_builder) -> IO (()))

{- | C function signature:

@
void skottie_animation_builder_get_stats(skottie_animation_builder_t *instance, skottie_animation_builder_stats_t *stats)
@
-}
foreign import ccall "skottie_animation_builder_get_stats" skottie_animation_builder_get_stats ::
  Ptr (Skottie_animation_builder) -- ^ C argument @"skottie_animation_builder_t * instance"@
  -> Ptr (Skottie_animation_builder_stats) -- ^ C argument @"skottie_animation_builder_stats_t * stats"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'skottie_animation_builder_get_stats'
foreign import ccall "&skottie_animation_builder_get_stats" p'skottie_animation_builder_get_stats ::
  FunPtr (Ptr (Skottie_animation_builder) -> Ptr (Skottie_animation_builder_stats) -> IO (()))

{- | C function signature:

@
void skottie_animation_builder_set_resource_provider(skottie_animation_builder_t *instance, skottie_resource_provider_t *resourceProvider)
@
-}
foreign import ccall "skottie_animation_builder_set_resource_provider" skottie_animation_builder_set_resource_provider ::
  Ptr (Skottie_animation_builder) -- ^ C argument @"skottie_animation_builder_t * instance"@
  -> Ptr (Skottie_resource_provider) -- ^ C argument @"skottie_resource_provider_t * resourceProvider"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'skottie_animation_builder_set_resource_provider'
foreign import ccall "&skottie_animation_builder_set_resource_provider" p'skottie_animation_builder_set_resource_provider ::
  FunPtr (Ptr (Skottie_animation_builder) -> Ptr (Skottie_resource_provider) -> IO (()))

{- | C function signature:

@
void skottie_animation_builder_set_font_manager(skottie_animation_builder_t *instance, sk_fontmgr_t *fontManager)
@
-}
foreign import ccall "skottie_animation_builder_set_font_manager" skottie_animation_builder_set_font_manager ::
  Ptr (Skottie_animation_builder) -- ^ C argument @"skottie_animation_builder_t * instance"@
  -> Ptr (Sk_fontmgr) -- ^ C argument @"sk_fontmgr_t * fontManager"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'skottie_animation_builder_set_font_manager'
foreign import ccall "&skottie_animation_builder_set_font_manager" p'skottie_animation_builder_set_font_manager ::
  FunPtr (Ptr (Skottie_animation_builder) -> Ptr (Sk_fontmgr) -> IO (()))

{- | C function signature:

@
skottie_animation_t *skottie_animation_builder_make_from_stream(skottie_animation_builder_t *instance, sk_stream_t *stream)
@
-}
foreign import ccall "skottie_animation_builder_make_from_stream" skottie_animation_builder_make_from_stream ::
  Ptr (Skottie_animation_builder) -- ^ C argument @"skottie_animation_builder_t * instance"@
  -> Ptr (Sk_stream) -- ^ C argument @"sk_stream_t * stream"@
  -> IO (Ptr (Skottie_animation)) -- ^ C return type: @"skottie_animation_t *"@

-- | Function pointer to 'skottie_animation_builder_make_from_stream'
foreign import ccall "&skottie_animation_builder_make_from_stream" p'skottie_animation_builder_make_from_stream ::
  FunPtr (Ptr (Skottie_animation_builder) -> Ptr (Sk_stream) -> IO (Ptr (Skottie_animation)))

{- | C function signature:

@
skottie_animation_t *skottie_animation_builder_make_from_file(skottie_animation_builder_t *instance, const char *path)
@
-}
foreign import ccall "skottie_animation_builder_make_from_file" skottie_animation_builder_make_from_file ::
  Ptr (Skottie_animation_builder) -- ^ C argument @"skottie_animation_builder_t * instance"@
  -> Ptr (CChar) -- ^ C argument @"const char * path"@
  -> IO (Ptr (Skottie_animation)) -- ^ C return type: @"skottie_animation_t *"@

-- | Function pointer to 'skottie_animation_builder_make_from_file'
foreign import ccall "&skottie_animation_builder_make_from_file" p'skottie_animation_builder_make_from_file ::
  FunPtr (Ptr (Skottie_animation_builder) -> Ptr (CChar) -> IO (Ptr (Skottie_animation)))

{- | C function signature:

@
skottie_animation_t *skottie_animation_builder_make_from_string(skottie_animation_builder_t *instance, const char *data, size_t length)
@
-}
foreign import ccall "skottie_animation_builder_make_from_string" skottie_animation_builder_make_from_string ::
  Ptr (Skottie_animation_builder) -- ^ C argument @"skottie_animation_builder_t * instance"@
  -> Ptr (CChar) -- ^ C argument @"const char * data"@
  -> CSize -- ^ C argument @"size_t length"@
  -> IO (Ptr (Skottie_animation)) -- ^ C return type: @"skottie_animation_t *"@

-- | Function pointer to 'skottie_animation_builder_make_from_string'
foreign import ccall "&skottie_animation_builder_make_from_string" p'skottie_animation_builder_make_from_string ::
  FunPtr (Ptr (Skottie_animation_builder) -> Ptr (CChar) -> CSize -> IO (Ptr (Skottie_animation)))

{- | C function signature:

@
skottie_animation_t *skottie_animation_builder_make_from_data(skottie_animation_builder_t *instance, const char *data, size_t length)
@
-}
foreign import ccall "skottie_animation_builder_make_from_data" skottie_animation_builder_make_from_data ::
  Ptr (Skottie_animation_builder) -- ^ C argument @"skottie_animation_builder_t * instance"@
  -> Ptr (CChar) -- ^ C argument @"const char * data"@
  -> CSize -- ^ C argument @"size_t length"@
  -> IO (Ptr (Skottie_animation)) -- ^ C return type: @"skottie_animation_t *"@

-- | Function pointer to 'skottie_animation_builder_make_from_data'
foreign import ccall "&skottie_animation_builder_make_from_data" p'skottie_animation_builder_make_from_data ::
  FunPtr (Ptr (Skottie_animation_builder) -> Ptr (CChar) -> CSize -> IO (Ptr (Skottie_animation)))

{- | C function signature:

@
void skresources_resource_provider_ref(skresources_resource_provider_t *instance)
@
-}
foreign import ccall "skresources_resource_provider_ref" skresources_resource_provider_ref ::
  Ptr (Skresources_resource_provider) -- ^ C argument @"skresources_resource_provider_t * instance"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'skresources_resource_provider_ref'
foreign import ccall "&skresources_resource_provider_ref" p'skresources_resource_provider_ref ::
  FunPtr (Ptr (Skresources_resource_provider) -> IO (()))

{- | C function signature:

@
void skresources_resource_provider_unref(skresources_resource_provider_t *instance)
@
-}
foreign import ccall "skresources_resource_provider_unref" skresources_resource_provider_unref ::
  Ptr (Skresources_resource_provider) -- ^ C argument @"skresources_resource_provider_t * instance"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'skresources_resource_provider_unref'
foreign import ccall "&skresources_resource_provider_unref" p'skresources_resource_provider_unref ::
  FunPtr (Ptr (Skresources_resource_provider) -> IO (()))

{- | C function signature:

@
void skresources_resource_provider_delete(skresources_resource_provider_t *instance)
@
-}
foreign import ccall "skresources_resource_provider_delete" skresources_resource_provider_delete ::
  Ptr (Skresources_resource_provider) -- ^ C argument @"skresources_resource_provider_t * instance"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'skresources_resource_provider_delete'
foreign import ccall "&skresources_resource_provider_delete" p'skresources_resource_provider_delete ::
  FunPtr (Ptr (Skresources_resource_provider) -> IO (()))

{- | C function signature:

@
sk_data_t *skresources_resource_provider_load(skresources_resource_provider_t *instance, const char *path, const char *name)
@
-}
foreign import ccall "skresources_resource_provider_load" skresources_resource_provider_load ::
  Ptr (Skresources_resource_provider) -- ^ C argument @"skresources_resource_provider_t * instance"@
  -> Ptr (CChar) -- ^ C argument @"const char * path"@
  -> Ptr (CChar) -- ^ C argument @"const char * name"@
  -> IO (Ptr (Sk_data)) -- ^ C return type: @"sk_data_t *"@

-- | Function pointer to 'skresources_resource_provider_load'
foreign import ccall "&skresources_resource_provider_load" p'skresources_resource_provider_load ::
  FunPtr (Ptr (Skresources_resource_provider) -> Ptr (CChar) -> Ptr (CChar) -> IO (Ptr (Sk_data)))

{- | C function signature:

@
skresources_image_asset_t *skresources_resource_provider_load_image_asset(skresources_resource_provider_t *instance, const char *path, const char *name, const char *id)
@
-}
foreign import ccall "skresources_resource_provider_load_image_asset" skresources_resource_provider_load_image_asset ::
  Ptr (Skresources_resource_provider) -- ^ C argument @"skresources_resource_provider_t * instance"@
  -> Ptr (CChar) -- ^ C argument @"const char * path"@
  -> Ptr (CChar) -- ^ C argument @"const char * name"@
  -> Ptr (CChar) -- ^ C argument @"const char * id"@
  -> IO (Ptr (Skresources_image_asset)) -- ^ C return type: @"skresources_image_asset_t *"@

-- | Function pointer to 'skresources_resource_provider_load_image_asset'
foreign import ccall "&skresources_resource_provider_load_image_asset" p'skresources_resource_provider_load_image_asset ::
  FunPtr (Ptr (Skresources_resource_provider) -> Ptr (CChar) -> Ptr (CChar) -> Ptr (CChar) -> IO (Ptr (Skresources_image_asset)))

{- | C function signature:

@
skresources_external_track_asset_t *skresources_resource_provider_load_audio_asset(skresources_resource_provider_t *instance, const char *path, const char *name, const char *id)
@
-}
foreign import ccall "skresources_resource_provider_load_audio_asset" skresources_resource_provider_load_audio_asset ::
  Ptr (Skresources_resource_provider) -- ^ C argument @"skresources_resource_provider_t * instance"@
  -> Ptr (CChar) -- ^ C argument @"const char * path"@
  -> Ptr (CChar) -- ^ C argument @"const char * name"@
  -> Ptr (CChar) -- ^ C argument @"const char * id"@
  -> IO (Ptr (Skresources_external_track_asset)) -- ^ C return type: @"skresources_external_track_asset_t *"@

-- | Function pointer to 'skresources_resource_provider_load_audio_asset'
foreign import ccall "&skresources_resource_provider_load_audio_asset" p'skresources_resource_provider_load_audio_asset ::
  FunPtr (Ptr (Skresources_resource_provider) -> Ptr (CChar) -> Ptr (CChar) -> Ptr (CChar) -> IO (Ptr (Skresources_external_track_asset)))

{- | C function signature:

@
sk_typeface_t *skresources_resource_provider_load_typeface(skresources_resource_provider_t *instance, const char *name, const char *url)
@
-}
foreign import ccall "skresources_resource_provider_load_typeface" skresources_resource_provider_load_typeface ::
  Ptr (Skresources_resource_provider) -- ^ C argument @"skresources_resource_provider_t * instance"@
  -> Ptr (CChar) -- ^ C argument @"const char * name"@
  -> Ptr (CChar) -- ^ C argument @"const char * url"@
  -> IO (Ptr (Sk_typeface)) -- ^ C return type: @"sk_typeface_t *"@

-- | Function pointer to 'skresources_resource_provider_load_typeface'
foreign import ccall "&skresources_resource_provider_load_typeface" p'skresources_resource_provider_load_typeface ::
  FunPtr (Ptr (Skresources_resource_provider) -> Ptr (CChar) -> Ptr (CChar) -> IO (Ptr (Sk_typeface)))

{- | C function signature:

@
skresources_resource_provider_t *skresources_file_resource_provider_make(sk_string_t *base_dir, _Bool predecode)
@
-}
foreign import ccall "skresources_file_resource_provider_make" skresources_file_resource_provider_make ::
  Ptr (Sk_string) -- ^ C argument @"sk_string_t * base_dir"@
  -> CBool -- ^ C argument @"_Bool predecode"@
  -> IO (Ptr (Skresources_resource_provider)) -- ^ C return type: @"skresources_resource_provider_t *"@

-- | Function pointer to 'skresources_file_resource_provider_make'
foreign import ccall "&skresources_file_resource_provider_make" p'skresources_file_resource_provider_make ::
  FunPtr (Ptr (Sk_string) -> CBool -> IO (Ptr (Skresources_resource_provider)))

{- | C function signature:

@
skresources_resource_provider_t *skresources_caching_resource_provider_proxy_make(skresources_resource_provider_t *rp)
@
-}
foreign import ccall "skresources_caching_resource_provider_proxy_make" skresources_caching_resource_provider_proxy_make ::
  Ptr (Skresources_resource_provider) -- ^ C argument @"skresources_resource_provider_t * rp"@
  -> IO (Ptr (Skresources_resource_provider)) -- ^ C return type: @"skresources_resource_provider_t *"@

-- | Function pointer to 'skresources_caching_resource_provider_proxy_make'
foreign import ccall "&skresources_caching_resource_provider_proxy_make" p'skresources_caching_resource_provider_proxy_make ::
  FunPtr (Ptr (Skresources_resource_provider) -> IO (Ptr (Skresources_resource_provider)))

{- | C function signature:

@
skresources_resource_provider_t *skresources_data_uri_resource_provider_proxy_make(skresources_resource_provider_t *rp, _Bool predecode)
@
-}
foreign import ccall "skresources_data_uri_resource_provider_proxy_make" skresources_data_uri_resource_provider_proxy_make ::
  Ptr (Skresources_resource_provider) -- ^ C argument @"skresources_resource_provider_t * rp"@
  -> CBool -- ^ C argument @"_Bool predecode"@
  -> IO (Ptr (Skresources_resource_provider)) -- ^ C return type: @"skresources_resource_provider_t *"@

-- | Function pointer to 'skresources_data_uri_resource_provider_proxy_make'
foreign import ccall "&skresources_data_uri_resource_provider_proxy_make" p'skresources_data_uri_resource_provider_proxy_make ::
  FunPtr (Ptr (Skresources_resource_provider) -> CBool -> IO (Ptr (Skresources_resource_provider)))

{- | C function signature:

@
sk_canvas_t *sk_svgcanvas_create_with_stream(const sk_rect_t *bounds, sk_wstream_t *stream)
@
-}
foreign import ccall "sk_svgcanvas_create_with_stream" sk_svgcanvas_create_with_stream ::
  Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * bounds"@
  -> Ptr (Sk_wstream) -- ^ C argument @"sk_wstream_t * stream"@
  -> IO (Ptr (Sk_canvas)) -- ^ C return type: @"sk_canvas_t *"@

-- | Function pointer to 'sk_svgcanvas_create_with_stream'
foreign import ccall "&sk_svgcanvas_create_with_stream" p'sk_svgcanvas_create_with_stream ::
  FunPtr (Ptr (Sk_rect) -> Ptr (Sk_wstream) -> IO (Ptr (Sk_canvas)))

{- | C function signature:

@
sk_string_t *sk_string_new_empty(void)
@
-}
foreign import ccall "sk_string_new_empty" sk_string_new_empty ::
  IO (Ptr (Sk_string)) -- ^ C return type: @"sk_string_t *"@

-- | Function pointer to 'sk_string_new_empty'
foreign import ccall "&sk_string_new_empty" p'sk_string_new_empty ::
  FunPtr (IO (Ptr (Sk_string)))

{- | C function signature:

@
sk_string_t *sk_string_new_with_copy(const char *src, size_t length)
@
-}
foreign import ccall "sk_string_new_with_copy" sk_string_new_with_copy ::
  Ptr (CChar) -- ^ C argument @"const char * src"@
  -> CSize -- ^ C argument @"size_t length"@
  -> IO (Ptr (Sk_string)) -- ^ C return type: @"sk_string_t *"@

-- | Function pointer to 'sk_string_new_with_copy'
foreign import ccall "&sk_string_new_with_copy" p'sk_string_new_with_copy ::
  FunPtr (Ptr (CChar) -> CSize -> IO (Ptr (Sk_string)))

{- | C function signature:

@
void sk_string_destructor(const sk_string_t *)
@
-}
foreign import ccall "sk_string_destructor" sk_string_destructor ::
  Ptr (Sk_string) -- ^ C argument type: @"const sk_string_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_string_destructor'
foreign import ccall "&sk_string_destructor" p'sk_string_destructor ::
  FunPtr (Ptr (Sk_string) -> IO (()))

{- | C function signature:

@
size_t sk_string_get_size(const sk_string_t *)
@
-}
foreign import ccall "sk_string_get_size" sk_string_get_size ::
  Ptr (Sk_string) -- ^ C argument type: @"const sk_string_t *"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_string_get_size'
foreign import ccall "&sk_string_get_size" p'sk_string_get_size ::
  FunPtr (Ptr (Sk_string) -> IO (CSize))

{- | C function signature:

@
const char *sk_string_get_c_str(const sk_string_t *)
@
-}
foreign import ccall "sk_string_get_c_str" sk_string_get_c_str ::
  Ptr (Sk_string) -- ^ C argument type: @"const sk_string_t *"@
  -> IO (Ptr (CChar)) -- ^ C return type: @"const char *"@

-- | Function pointer to 'sk_string_get_c_str'
foreign import ccall "&sk_string_get_c_str" p'sk_string_get_c_str ::
  FunPtr (Ptr (Sk_string) -> IO (Ptr (CChar)))

{- | C function signature:

@
void sk_linker_keep_alive(void)
@
-}
foreign import ccall "sk_linker_keep_alive" sk_linker_keep_alive ::
  IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_linker_keep_alive'
foreign import ccall "&sk_linker_keep_alive" p'sk_linker_keep_alive ::
  FunPtr (IO (()))

{- | C function signature:

@
void sk_path_effect_unref(sk_path_effect_t *t)
@
-}
foreign import ccall "sk_path_effect_unref" sk_path_effect_unref ::
  Ptr (Sk_path_effect) -- ^ C argument @"sk_path_effect_t * t"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_path_effect_unref'
foreign import ccall "&sk_path_effect_unref" p'sk_path_effect_unref ::
  FunPtr (Ptr (Sk_path_effect) -> IO (()))

{- | C function signature:

@
sk_path_effect_t *sk_path_effect_create_compose(sk_path_effect_t *outer, sk_path_effect_t *inner)
@
-}
foreign import ccall "sk_path_effect_create_compose" sk_path_effect_create_compose ::
  Ptr (Sk_path_effect) -- ^ C argument @"sk_path_effect_t * outer"@
  -> Ptr (Sk_path_effect) -- ^ C argument @"sk_path_effect_t * inner"@
  -> IO (Ptr (Sk_path_effect)) -- ^ C return type: @"sk_path_effect_t *"@

-- | Function pointer to 'sk_path_effect_create_compose'
foreign import ccall "&sk_path_effect_create_compose" p'sk_path_effect_create_compose ::
  FunPtr (Ptr (Sk_path_effect) -> Ptr (Sk_path_effect) -> IO (Ptr (Sk_path_effect)))

{- | C function signature:

@
sk_path_effect_t *sk_path_effect_create_sum(sk_path_effect_t *first, sk_path_effect_t *second)
@
-}
foreign import ccall "sk_path_effect_create_sum" sk_path_effect_create_sum ::
  Ptr (Sk_path_effect) -- ^ C argument @"sk_path_effect_t * first"@
  -> Ptr (Sk_path_effect) -- ^ C argument @"sk_path_effect_t * second"@
  -> IO (Ptr (Sk_path_effect)) -- ^ C return type: @"sk_path_effect_t *"@

-- | Function pointer to 'sk_path_effect_create_sum'
foreign import ccall "&sk_path_effect_create_sum" p'sk_path_effect_create_sum ::
  FunPtr (Ptr (Sk_path_effect) -> Ptr (Sk_path_effect) -> IO (Ptr (Sk_path_effect)))

{- | C function signature:

@
sk_path_effect_t *sk_path_effect_create_discrete(float segLength, float deviation, uint32_t seedAssist)
@
-}
foreign import ccall "sk_path_effect_create_discrete" sk_path_effect_create_discrete ::
  CFloat -- ^ C argument @"float segLength"@
  -> CFloat -- ^ C argument @"float deviation"@
  -> Word32 -- ^ C argument @"uint32_t seedAssist"@
  -> IO (Ptr (Sk_path_effect)) -- ^ C return type: @"sk_path_effect_t *"@

-- | Function pointer to 'sk_path_effect_create_discrete'
foreign import ccall "&sk_path_effect_create_discrete" p'sk_path_effect_create_discrete ::
  FunPtr (CFloat -> CFloat -> Word32 -> IO (Ptr (Sk_path_effect)))

{- | C function signature:

@
sk_path_effect_t *sk_path_effect_create_corner(float radius)
@
-}
foreign import ccall "sk_path_effect_create_corner" sk_path_effect_create_corner ::
  CFloat -- ^ C argument @"float radius"@
  -> IO (Ptr (Sk_path_effect)) -- ^ C return type: @"sk_path_effect_t *"@

-- | Function pointer to 'sk_path_effect_create_corner'
foreign import ccall "&sk_path_effect_create_corner" p'sk_path_effect_create_corner ::
  FunPtr (CFloat -> IO (Ptr (Sk_path_effect)))

{- | C function signature:

@
sk_path_effect_t *sk_path_effect_create_1d_path(const sk_path_t *path, float advance, float phase, sk_path_effect_1d_style_t style)
@
-}
foreign import ccall "sk_path_effect_create_1d_path" sk_path_effect_create_1d_path ::
  Ptr (Sk_path) -- ^ C argument @"const sk_path_t * path"@
  -> CFloat -- ^ C argument @"float advance"@
  -> CFloat -- ^ C argument @"float phase"@
  -> Sk_path_effect_1d_style -- ^ C argument @"sk_path_effect_1d_style_t style"@
  -> IO (Ptr (Sk_path_effect)) -- ^ C return type: @"sk_path_effect_t *"@

-- | Function pointer to 'sk_path_effect_create_1d_path'
foreign import ccall "&sk_path_effect_create_1d_path" p'sk_path_effect_create_1d_path ::
  FunPtr (Ptr (Sk_path) -> CFloat -> CFloat -> Sk_path_effect_1d_style -> IO (Ptr (Sk_path_effect)))

{- | C function signature:

@
sk_path_effect_t *sk_path_effect_create_2d_line(float width, const sk_matrix_t *matrix)
@
-}
foreign import ccall "sk_path_effect_create_2d_line" sk_path_effect_create_2d_line ::
  CFloat -- ^ C argument @"float width"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * matrix"@
  -> IO (Ptr (Sk_path_effect)) -- ^ C return type: @"sk_path_effect_t *"@

-- | Function pointer to 'sk_path_effect_create_2d_line'
foreign import ccall "&sk_path_effect_create_2d_line" p'sk_path_effect_create_2d_line ::
  FunPtr (CFloat -> Ptr (Sk_matrix) -> IO (Ptr (Sk_path_effect)))

{- | C function signature:

@
sk_path_effect_t *sk_path_effect_create_2d_path(const sk_matrix_t *matrix, const sk_path_t *path)
@
-}
foreign import ccall "sk_path_effect_create_2d_path" sk_path_effect_create_2d_path ::
  Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * matrix"@
  -> Ptr (Sk_path) -- ^ C argument @"const sk_path_t * path"@
  -> IO (Ptr (Sk_path_effect)) -- ^ C return type: @"sk_path_effect_t *"@

-- | Function pointer to 'sk_path_effect_create_2d_path'
foreign import ccall "&sk_path_effect_create_2d_path" p'sk_path_effect_create_2d_path ::
  FunPtr (Ptr (Sk_matrix) -> Ptr (Sk_path) -> IO (Ptr (Sk_path_effect)))

{- | C function signature:

@
sk_path_effect_t *sk_path_effect_create_dash(const float intervals[], int count, float phase)
@
-}
foreign import ccall "sk_path_effect_create_dash" sk_path_effect_create_dash ::
  Ptr (CFloat) -- ^ C argument @"const float [] intervals"@
  -> CInt -- ^ C argument @"int count"@
  -> CFloat -- ^ C argument @"float phase"@
  -> IO (Ptr (Sk_path_effect)) -- ^ C return type: @"sk_path_effect_t *"@

-- | Function pointer to 'sk_path_effect_create_dash'
foreign import ccall "&sk_path_effect_create_dash" p'sk_path_effect_create_dash ::
  FunPtr (Ptr (CFloat) -> CInt -> CFloat -> IO (Ptr (Sk_path_effect)))

{- | C function signature:

@
sk_path_effect_t *sk_path_effect_create_trim(float start, float stop, sk_path_effect_trim_mode_t mode)
@
-}
foreign import ccall "sk_path_effect_create_trim" sk_path_effect_create_trim ::
  CFloat -- ^ C argument @"float start"@
  -> CFloat -- ^ C argument @"float stop"@
  -> Sk_path_effect_trim_mode -- ^ C argument @"sk_path_effect_trim_mode_t mode"@
  -> IO (Ptr (Sk_path_effect)) -- ^ C return type: @"sk_path_effect_t *"@

-- | Function pointer to 'sk_path_effect_create_trim'
foreign import ccall "&sk_path_effect_create_trim" p'sk_path_effect_create_trim ::
  FunPtr (CFloat -> CFloat -> Sk_path_effect_trim_mode -> IO (Ptr (Sk_path_effect)))

{- | C function signature:

@
void sk_vertices_unref(sk_vertices_t *cvertices)
@
-}
foreign import ccall "sk_vertices_unref" sk_vertices_unref ::
  Ptr (Sk_vertices) -- ^ C argument @"sk_vertices_t * cvertices"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_vertices_unref'
foreign import ccall "&sk_vertices_unref" p'sk_vertices_unref ::
  FunPtr (Ptr (Sk_vertices) -> IO (()))

{- | C function signature:

@
void sk_vertices_ref(sk_vertices_t *cvertices)
@
-}
foreign import ccall "sk_vertices_ref" sk_vertices_ref ::
  Ptr (Sk_vertices) -- ^ C argument @"sk_vertices_t * cvertices"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_vertices_ref'
foreign import ccall "&sk_vertices_ref" p'sk_vertices_ref ::
  FunPtr (Ptr (Sk_vertices) -> IO (()))

{- | C function signature:

@
sk_vertices_t *sk_vertices_make_copy(sk_vertices_vertex_mode_t vmode, int vertexCount, const sk_point_t *positions, const sk_point_t *texs, const sk_color_t *colors, int indexCount, const uint16_t *indices)
@
-}
foreign import ccall "sk_vertices_make_copy" sk_vertices_make_copy ::
  Sk_vertices_vertex_mode -- ^ C argument @"sk_vertices_vertex_mode_t vmode"@
  -> CInt -- ^ C argument @"int vertexCount"@
  -> Ptr (Sk_point) -- ^ C argument @"const sk_point_t * positions"@
  -> Ptr (Sk_point) -- ^ C argument @"const sk_point_t * texs"@
  -> Ptr (Sk_color) -- ^ C argument @"const sk_color_t * colors"@
  -> CInt -- ^ C argument @"int indexCount"@
  -> Ptr (Word16) -- ^ C argument @"const uint16_t * indices"@
  -> IO (Ptr (Sk_vertices)) -- ^ C return type: @"sk_vertices_t *"@

-- | Function pointer to 'sk_vertices_make_copy'
foreign import ccall "&sk_vertices_make_copy" p'sk_vertices_make_copy ::
  FunPtr (Sk_vertices_vertex_mode -> CInt -> Ptr (Sk_point) -> Ptr (Sk_point) -> Ptr (Sk_color) -> CInt -> Ptr (Word16) -> IO (Ptr (Sk_vertices)))

{- | C function signature:

@
sk_font_t *sk_font_new(void)
@
-}
foreign import ccall "sk_font_new" sk_font_new ::
  IO (Ptr (Sk_font)) -- ^ C return type: @"sk_font_t *"@

-- | Function pointer to 'sk_font_new'
foreign import ccall "&sk_font_new" p'sk_font_new ::
  FunPtr (IO (Ptr (Sk_font)))

{- | C function signature:

@
sk_font_t *sk_font_new_with_values(sk_typeface_t *typeface, float size, float scaleX, float skewX)
@
-}
foreign import ccall "sk_font_new_with_values" sk_font_new_with_values ::
  Ptr (Sk_typeface) -- ^ C argument @"sk_typeface_t * typeface"@
  -> CFloat -- ^ C argument @"float size"@
  -> CFloat -- ^ C argument @"float scaleX"@
  -> CFloat -- ^ C argument @"float skewX"@
  -> IO (Ptr (Sk_font)) -- ^ C return type: @"sk_font_t *"@

-- | Function pointer to 'sk_font_new_with_values'
foreign import ccall "&sk_font_new_with_values" p'sk_font_new_with_values ::
  FunPtr (Ptr (Sk_typeface) -> CFloat -> CFloat -> CFloat -> IO (Ptr (Sk_font)))

{- | C function signature:

@
void sk_font_delete(sk_font_t *font)
@
-}
foreign import ccall "sk_font_delete" sk_font_delete ::
  Ptr (Sk_font) -- ^ C argument @"sk_font_t * font"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_delete'
foreign import ccall "&sk_font_delete" p'sk_font_delete ::
  FunPtr (Ptr (Sk_font) -> IO (()))

{- | C function signature:

@
_Bool sk_font_is_force_auto_hinting(const sk_font_t *font)
@
-}
foreign import ccall "sk_font_is_force_auto_hinting" sk_font_is_force_auto_hinting ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_font_is_force_auto_hinting'
foreign import ccall "&sk_font_is_force_auto_hinting" p'sk_font_is_force_auto_hinting ::
  FunPtr (Ptr (Sk_font) -> IO (CBool))

{- | C function signature:

@
void sk_font_set_force_auto_hinting(sk_font_t *font, _Bool value)
@
-}
foreign import ccall "sk_font_set_force_auto_hinting" sk_font_set_force_auto_hinting ::
  Ptr (Sk_font) -- ^ C argument @"sk_font_t * font"@
  -> CBool -- ^ C argument @"_Bool value"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_set_force_auto_hinting'
foreign import ccall "&sk_font_set_force_auto_hinting" p'sk_font_set_force_auto_hinting ::
  FunPtr (Ptr (Sk_font) -> CBool -> IO (()))

{- | C function signature:

@
_Bool sk_font_is_embedded_bitmaps(const sk_font_t *font)
@
-}
foreign import ccall "sk_font_is_embedded_bitmaps" sk_font_is_embedded_bitmaps ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_font_is_embedded_bitmaps'
foreign import ccall "&sk_font_is_embedded_bitmaps" p'sk_font_is_embedded_bitmaps ::
  FunPtr (Ptr (Sk_font) -> IO (CBool))

{- | C function signature:

@
void sk_font_set_embedded_bitmaps(sk_font_t *font, _Bool value)
@
-}
foreign import ccall "sk_font_set_embedded_bitmaps" sk_font_set_embedded_bitmaps ::
  Ptr (Sk_font) -- ^ C argument @"sk_font_t * font"@
  -> CBool -- ^ C argument @"_Bool value"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_set_embedded_bitmaps'
foreign import ccall "&sk_font_set_embedded_bitmaps" p'sk_font_set_embedded_bitmaps ::
  FunPtr (Ptr (Sk_font) -> CBool -> IO (()))

{- | C function signature:

@
_Bool sk_font_is_subpixel(const sk_font_t *font)
@
-}
foreign import ccall "sk_font_is_subpixel" sk_font_is_subpixel ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_font_is_subpixel'
foreign import ccall "&sk_font_is_subpixel" p'sk_font_is_subpixel ::
  FunPtr (Ptr (Sk_font) -> IO (CBool))

{- | C function signature:

@
void sk_font_set_subpixel(sk_font_t *font, _Bool value)
@
-}
foreign import ccall "sk_font_set_subpixel" sk_font_set_subpixel ::
  Ptr (Sk_font) -- ^ C argument @"sk_font_t * font"@
  -> CBool -- ^ C argument @"_Bool value"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_set_subpixel'
foreign import ccall "&sk_font_set_subpixel" p'sk_font_set_subpixel ::
  FunPtr (Ptr (Sk_font) -> CBool -> IO (()))

{- | C function signature:

@
_Bool sk_font_is_linear_metrics(const sk_font_t *font)
@
-}
foreign import ccall "sk_font_is_linear_metrics" sk_font_is_linear_metrics ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_font_is_linear_metrics'
foreign import ccall "&sk_font_is_linear_metrics" p'sk_font_is_linear_metrics ::
  FunPtr (Ptr (Sk_font) -> IO (CBool))

{- | C function signature:

@
void sk_font_set_linear_metrics(sk_font_t *font, _Bool value)
@
-}
foreign import ccall "sk_font_set_linear_metrics" sk_font_set_linear_metrics ::
  Ptr (Sk_font) -- ^ C argument @"sk_font_t * font"@
  -> CBool -- ^ C argument @"_Bool value"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_set_linear_metrics'
foreign import ccall "&sk_font_set_linear_metrics" p'sk_font_set_linear_metrics ::
  FunPtr (Ptr (Sk_font) -> CBool -> IO (()))

{- | C function signature:

@
_Bool sk_font_is_embolden(const sk_font_t *font)
@
-}
foreign import ccall "sk_font_is_embolden" sk_font_is_embolden ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_font_is_embolden'
foreign import ccall "&sk_font_is_embolden" p'sk_font_is_embolden ::
  FunPtr (Ptr (Sk_font) -> IO (CBool))

{- | C function signature:

@
void sk_font_set_embolden(sk_font_t *font, _Bool value)
@
-}
foreign import ccall "sk_font_set_embolden" sk_font_set_embolden ::
  Ptr (Sk_font) -- ^ C argument @"sk_font_t * font"@
  -> CBool -- ^ C argument @"_Bool value"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_set_embolden'
foreign import ccall "&sk_font_set_embolden" p'sk_font_set_embolden ::
  FunPtr (Ptr (Sk_font) -> CBool -> IO (()))

{- | C function signature:

@
_Bool sk_font_is_baseline_snap(const sk_font_t *font)
@
-}
foreign import ccall "sk_font_is_baseline_snap" sk_font_is_baseline_snap ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_font_is_baseline_snap'
foreign import ccall "&sk_font_is_baseline_snap" p'sk_font_is_baseline_snap ::
  FunPtr (Ptr (Sk_font) -> IO (CBool))

{- | C function signature:

@
void sk_font_set_baseline_snap(sk_font_t *font, _Bool value)
@
-}
foreign import ccall "sk_font_set_baseline_snap" sk_font_set_baseline_snap ::
  Ptr (Sk_font) -- ^ C argument @"sk_font_t * font"@
  -> CBool -- ^ C argument @"_Bool value"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_set_baseline_snap'
foreign import ccall "&sk_font_set_baseline_snap" p'sk_font_set_baseline_snap ::
  FunPtr (Ptr (Sk_font) -> CBool -> IO (()))

{- | C function signature:

@
sk_font_edging_t sk_font_get_edging(const sk_font_t *font)
@
-}
foreign import ccall "sk_font_get_edging" sk_font_get_edging ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> IO (Sk_font_edging) -- ^ C return type: @"sk_font_edging_t"@

-- | Function pointer to 'sk_font_get_edging'
foreign import ccall "&sk_font_get_edging" p'sk_font_get_edging ::
  FunPtr (Ptr (Sk_font) -> IO (Sk_font_edging))

{- | C function signature:

@
void sk_font_set_edging(sk_font_t *font, sk_font_edging_t value)
@
-}
foreign import ccall "sk_font_set_edging" sk_font_set_edging ::
  Ptr (Sk_font) -- ^ C argument @"sk_font_t * font"@
  -> Sk_font_edging -- ^ C argument @"sk_font_edging_t value"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_set_edging'
foreign import ccall "&sk_font_set_edging" p'sk_font_set_edging ::
  FunPtr (Ptr (Sk_font) -> Sk_font_edging -> IO (()))

{- | C function signature:

@
sk_font_hinting_t sk_font_get_hinting(const sk_font_t *font)
@
-}
foreign import ccall "sk_font_get_hinting" sk_font_get_hinting ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> IO (Sk_font_hinting) -- ^ C return type: @"sk_font_hinting_t"@

-- | Function pointer to 'sk_font_get_hinting'
foreign import ccall "&sk_font_get_hinting" p'sk_font_get_hinting ::
  FunPtr (Ptr (Sk_font) -> IO (Sk_font_hinting))

{- | C function signature:

@
void sk_font_set_hinting(sk_font_t *font, sk_font_hinting_t value)
@
-}
foreign import ccall "sk_font_set_hinting" sk_font_set_hinting ::
  Ptr (Sk_font) -- ^ C argument @"sk_font_t * font"@
  -> Sk_font_hinting -- ^ C argument @"sk_font_hinting_t value"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_set_hinting'
foreign import ccall "&sk_font_set_hinting" p'sk_font_set_hinting ::
  FunPtr (Ptr (Sk_font) -> Sk_font_hinting -> IO (()))

{- | C function signature:

@
sk_typeface_t *sk_font_get_typeface(const sk_font_t *font)
@
-}
foreign import ccall "sk_font_get_typeface" sk_font_get_typeface ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> IO (Ptr (Sk_typeface)) -- ^ C return type: @"sk_typeface_t *"@

-- | Function pointer to 'sk_font_get_typeface'
foreign import ccall "&sk_font_get_typeface" p'sk_font_get_typeface ::
  FunPtr (Ptr (Sk_font) -> IO (Ptr (Sk_typeface)))

{- | C function signature:

@
void sk_font_set_typeface(sk_font_t *font, sk_typeface_t *value)
@
-}
foreign import ccall "sk_font_set_typeface" sk_font_set_typeface ::
  Ptr (Sk_font) -- ^ C argument @"sk_font_t * font"@
  -> Ptr (Sk_typeface) -- ^ C argument @"sk_typeface_t * value"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_set_typeface'
foreign import ccall "&sk_font_set_typeface" p'sk_font_set_typeface ::
  FunPtr (Ptr (Sk_font) -> Ptr (Sk_typeface) -> IO (()))

{- | C function signature:

@
float sk_font_get_size(const sk_font_t *font)
@
-}
foreign import ccall "sk_font_get_size" sk_font_get_size ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> IO (CFloat) -- ^ C return type: @"float"@

-- | Function pointer to 'sk_font_get_size'
foreign import ccall "&sk_font_get_size" p'sk_font_get_size ::
  FunPtr (Ptr (Sk_font) -> IO (CFloat))

{- | C function signature:

@
void sk_font_set_size(sk_font_t *font, float value)
@
-}
foreign import ccall "sk_font_set_size" sk_font_set_size ::
  Ptr (Sk_font) -- ^ C argument @"sk_font_t * font"@
  -> CFloat -- ^ C argument @"float value"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_set_size'
foreign import ccall "&sk_font_set_size" p'sk_font_set_size ::
  FunPtr (Ptr (Sk_font) -> CFloat -> IO (()))

{- | C function signature:

@
float sk_font_get_scale_x(const sk_font_t *font)
@
-}
foreign import ccall "sk_font_get_scale_x" sk_font_get_scale_x ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> IO (CFloat) -- ^ C return type: @"float"@

-- | Function pointer to 'sk_font_get_scale_x'
foreign import ccall "&sk_font_get_scale_x" p'sk_font_get_scale_x ::
  FunPtr (Ptr (Sk_font) -> IO (CFloat))

{- | C function signature:

@
void sk_font_set_scale_x(sk_font_t *font, float value)
@
-}
foreign import ccall "sk_font_set_scale_x" sk_font_set_scale_x ::
  Ptr (Sk_font) -- ^ C argument @"sk_font_t * font"@
  -> CFloat -- ^ C argument @"float value"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_set_scale_x'
foreign import ccall "&sk_font_set_scale_x" p'sk_font_set_scale_x ::
  FunPtr (Ptr (Sk_font) -> CFloat -> IO (()))

{- | C function signature:

@
float sk_font_get_skew_x(const sk_font_t *font)
@
-}
foreign import ccall "sk_font_get_skew_x" sk_font_get_skew_x ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> IO (CFloat) -- ^ C return type: @"float"@

-- | Function pointer to 'sk_font_get_skew_x'
foreign import ccall "&sk_font_get_skew_x" p'sk_font_get_skew_x ::
  FunPtr (Ptr (Sk_font) -> IO (CFloat))

{- | C function signature:

@
void sk_font_set_skew_x(sk_font_t *font, float value)
@
-}
foreign import ccall "sk_font_set_skew_x" sk_font_set_skew_x ::
  Ptr (Sk_font) -- ^ C argument @"sk_font_t * font"@
  -> CFloat -- ^ C argument @"float value"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_set_skew_x'
foreign import ccall "&sk_font_set_skew_x" p'sk_font_set_skew_x ::
  FunPtr (Ptr (Sk_font) -> CFloat -> IO (()))

{- | C function signature:

@
int sk_font_text_to_glyphs(const sk_font_t *font, const void *text, size_t byteLength, sk_text_encoding_t encoding, uint16_t glyphs[], int maxGlyphCount)
@
-}
foreign import ccall "sk_font_text_to_glyphs" sk_font_text_to_glyphs ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> Ptr (()) -- ^ C argument @"const void * text"@
  -> CSize -- ^ C argument @"size_t byteLength"@
  -> Sk_text_encoding -- ^ C argument @"sk_text_encoding_t encoding"@
  -> Ptr (Word16) -- ^ C argument @"uint16_t [] glyphs"@
  -> CInt -- ^ C argument @"int maxGlyphCount"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_font_text_to_glyphs'
foreign import ccall "&sk_font_text_to_glyphs" p'sk_font_text_to_glyphs ::
  FunPtr (Ptr (Sk_font) -> Ptr (()) -> CSize -> Sk_text_encoding -> Ptr (Word16) -> CInt -> IO (CInt))

{- | C function signature:

@
uint16_t sk_font_unichar_to_glyph(const sk_font_t *font, int32_t uni)
@
-}
foreign import ccall "sk_font_unichar_to_glyph" sk_font_unichar_to_glyph ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> Int32 -- ^ C argument @"int32_t uni"@
  -> IO (Word16) -- ^ C return type: @"uint16_t"@

-- | Function pointer to 'sk_font_unichar_to_glyph'
foreign import ccall "&sk_font_unichar_to_glyph" p'sk_font_unichar_to_glyph ::
  FunPtr (Ptr (Sk_font) -> Int32 -> IO (Word16))

{- | C function signature:

@
void sk_font_unichars_to_glyphs(const sk_font_t *font, const int32_t uni[], int count, uint16_t glyphs[])
@
-}
foreign import ccall "sk_font_unichars_to_glyphs" sk_font_unichars_to_glyphs ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> Ptr (Int32) -- ^ C argument @"const int32_t [] uni"@
  -> CInt -- ^ C argument @"int count"@
  -> Ptr (Word16) -- ^ C argument @"uint16_t [] glyphs"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_unichars_to_glyphs'
foreign import ccall "&sk_font_unichars_to_glyphs" p'sk_font_unichars_to_glyphs ::
  FunPtr (Ptr (Sk_font) -> Ptr (Int32) -> CInt -> Ptr (Word16) -> IO (()))

{- | C function signature:

@
float sk_font_measure_text(const sk_font_t *font, const void *text, size_t byteLength, sk_text_encoding_t encoding, sk_rect_t *bounds, const sk_paint_t *paint)
@
-}
foreign import ccall "sk_font_measure_text" sk_font_measure_text ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> Ptr (()) -- ^ C argument @"const void * text"@
  -> CSize -- ^ C argument @"size_t byteLength"@
  -> Sk_text_encoding -- ^ C argument @"sk_text_encoding_t encoding"@
  -> Ptr (Sk_rect) -- ^ C argument @"sk_rect_t * bounds"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * paint"@
  -> IO (CFloat) -- ^ C return type: @"float"@

-- | Function pointer to 'sk_font_measure_text'
foreign import ccall "&sk_font_measure_text" p'sk_font_measure_text ::
  FunPtr (Ptr (Sk_font) -> Ptr (()) -> CSize -> Sk_text_encoding -> Ptr (Sk_rect) -> Ptr (Sk_paint) -> IO (CFloat))

{- | C function signature:

@
void sk_font_measure_text_no_return(const sk_font_t *font, const void *text, size_t byteLength, sk_text_encoding_t encoding, sk_rect_t *bounds, const sk_paint_t *paint, float *measuredWidth)
@
-}
foreign import ccall "sk_font_measure_text_no_return" sk_font_measure_text_no_return ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> Ptr (()) -- ^ C argument @"const void * text"@
  -> CSize -- ^ C argument @"size_t byteLength"@
  -> Sk_text_encoding -- ^ C argument @"sk_text_encoding_t encoding"@
  -> Ptr (Sk_rect) -- ^ C argument @"sk_rect_t * bounds"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * paint"@
  -> Ptr (CFloat) -- ^ C argument @"float * measuredWidth"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_measure_text_no_return'
foreign import ccall "&sk_font_measure_text_no_return" p'sk_font_measure_text_no_return ::
  FunPtr (Ptr (Sk_font) -> Ptr (()) -> CSize -> Sk_text_encoding -> Ptr (Sk_rect) -> Ptr (Sk_paint) -> Ptr (CFloat) -> IO (()))

{- | C function signature:

@
size_t sk_font_break_text(const sk_font_t *font, const void *text, size_t byteLength, sk_text_encoding_t encoding, float maxWidth, float *measuredWidth, const sk_paint_t *paint)
@
-}
foreign import ccall "sk_font_break_text" sk_font_break_text ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> Ptr (()) -- ^ C argument @"const void * text"@
  -> CSize -- ^ C argument @"size_t byteLength"@
  -> Sk_text_encoding -- ^ C argument @"sk_text_encoding_t encoding"@
  -> CFloat -- ^ C argument @"float maxWidth"@
  -> Ptr (CFloat) -- ^ C argument @"float * measuredWidth"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * paint"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_font_break_text'
foreign import ccall "&sk_font_break_text" p'sk_font_break_text ::
  FunPtr (Ptr (Sk_font) -> Ptr (()) -> CSize -> Sk_text_encoding -> CFloat -> Ptr (CFloat) -> Ptr (Sk_paint) -> IO (CSize))

{- | C function signature:

@
void sk_font_get_widths_bounds(const sk_font_t *font, const uint16_t glyphs[], int count, float widths[], sk_rect_t bounds[], const sk_paint_t *paint)
@
-}
foreign import ccall "sk_font_get_widths_bounds" sk_font_get_widths_bounds ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> Ptr (Word16) -- ^ C argument @"const uint16_t [] glyphs"@
  -> CInt -- ^ C argument @"int count"@
  -> Ptr (CFloat) -- ^ C argument @"float [] widths"@
  -> Ptr (Sk_rect) -- ^ C argument @"sk_rect_t [] bounds"@
  -> Ptr (Sk_paint) -- ^ C argument @"const sk_paint_t * paint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_get_widths_bounds'
foreign import ccall "&sk_font_get_widths_bounds" p'sk_font_get_widths_bounds ::
  FunPtr (Ptr (Sk_font) -> Ptr (Word16) -> CInt -> Ptr (CFloat) -> Ptr (Sk_rect) -> Ptr (Sk_paint) -> IO (()))

{- | C function signature:

@
void sk_font_get_pos(const sk_font_t *font, const uint16_t glyphs[], int count, sk_point_t pos[], sk_point_t *origin)
@
-}
foreign import ccall "sk_font_get_pos" sk_font_get_pos ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> Ptr (Word16) -- ^ C argument @"const uint16_t [] glyphs"@
  -> CInt -- ^ C argument @"int count"@
  -> Ptr (Sk_point) -- ^ C argument @"sk_point_t [] pos"@
  -> Ptr (Sk_point) -- ^ C argument @"sk_point_t * origin"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_get_pos'
foreign import ccall "&sk_font_get_pos" p'sk_font_get_pos ::
  FunPtr (Ptr (Sk_font) -> Ptr (Word16) -> CInt -> Ptr (Sk_point) -> Ptr (Sk_point) -> IO (()))

{- | C function signature:

@
void sk_font_get_xpos(const sk_font_t *font, const uint16_t glyphs[], int count, float xpos[], float origin)
@
-}
foreign import ccall "sk_font_get_xpos" sk_font_get_xpos ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> Ptr (Word16) -- ^ C argument @"const uint16_t [] glyphs"@
  -> CInt -- ^ C argument @"int count"@
  -> Ptr (CFloat) -- ^ C argument @"float [] xpos"@
  -> CFloat -- ^ C argument @"float origin"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_get_xpos'
foreign import ccall "&sk_font_get_xpos" p'sk_font_get_xpos ::
  FunPtr (Ptr (Sk_font) -> Ptr (Word16) -> CInt -> Ptr (CFloat) -> CFloat -> IO (()))

{- | C function signature:

@
_Bool sk_font_get_path(const sk_font_t *font, uint16_t glyph, sk_path_t *path)
@
-}
foreign import ccall "sk_font_get_path" sk_font_get_path ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> Word16 -- ^ C argument @"uint16_t glyph"@
  -> Ptr (Sk_path) -- ^ C argument @"sk_path_t * path"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_font_get_path'
foreign import ccall "&sk_font_get_path" p'sk_font_get_path ::
  FunPtr (Ptr (Sk_font) -> Word16 -> Ptr (Sk_path) -> IO (CBool))

{- | C function signature:

@
void sk_font_get_paths(const sk_font_t *font, uint16_t glyphs[], int count, const sk_glyph_path_proc glyphPathProc, void *context)
@
-}
foreign import ccall "sk_font_get_paths" sk_font_get_paths ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> Ptr (Word16) -- ^ C argument @"uint16_t [] glyphs"@
  -> CInt -- ^ C argument @"int count"@
  -> FunPtr Sk_glyph_path_proc -- ^ C argument @"const sk_glyph_path_proc glyphPathProc"@
  -> Ptr (()) -- ^ C argument @"void * context"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_font_get_paths'
foreign import ccall "&sk_font_get_paths" p'sk_font_get_paths ::
  FunPtr (Ptr (Sk_font) -> Ptr (Word16) -> CInt -> FunPtr Sk_glyph_path_proc -> Ptr (()) -> IO (()))

{- | C function signature:

@
float sk_font_get_metrics(const sk_font_t *font, sk_fontmetrics_t *metrics)
@
-}
foreign import ccall "sk_font_get_metrics" sk_font_get_metrics ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> Ptr (Sk_fontmetrics) -- ^ C argument @"sk_fontmetrics_t * metrics"@
  -> IO (CFloat) -- ^ C return type: @"float"@

-- | Function pointer to 'sk_font_get_metrics'
foreign import ccall "&sk_font_get_metrics" p'sk_font_get_metrics ::
  FunPtr (Ptr (Sk_font) -> Ptr (Sk_fontmetrics) -> IO (CFloat))

{- | C function signature:

@
void sk_text_utils_get_path(const void *text, size_t length, sk_text_encoding_t encoding, float x, float y, const sk_font_t *font, sk_path_t *path)
@
-}
foreign import ccall "sk_text_utils_get_path" sk_text_utils_get_path ::
  Ptr (()) -- ^ C argument @"const void * text"@
  -> CSize -- ^ C argument @"size_t length"@
  -> Sk_text_encoding -- ^ C argument @"sk_text_encoding_t encoding"@
  -> CFloat -- ^ C argument @"float x"@
  -> CFloat -- ^ C argument @"float y"@
  -> Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> Ptr (Sk_path) -- ^ C argument @"sk_path_t * path"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_text_utils_get_path'
foreign import ccall "&sk_text_utils_get_path" p'sk_text_utils_get_path ::
  FunPtr (Ptr (()) -> CSize -> Sk_text_encoding -> CFloat -> CFloat -> Ptr (Sk_font) -> Ptr (Sk_path) -> IO (()))

{- | C function signature:

@
void sk_text_utils_get_pos_path(const void *text, size_t length, sk_text_encoding_t encoding, const sk_point_t pos[], const sk_font_t *font, sk_path_t *path)
@
-}
foreign import ccall "sk_text_utils_get_pos_path" sk_text_utils_get_pos_path ::
  Ptr (()) -- ^ C argument @"const void * text"@
  -> CSize -- ^ C argument @"size_t length"@
  -> Sk_text_encoding -- ^ C argument @"sk_text_encoding_t encoding"@
  -> Ptr (Sk_point) -- ^ C argument @"const sk_point_t [] pos"@
  -> Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> Ptr (Sk_path) -- ^ C argument @"sk_path_t * path"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_text_utils_get_pos_path'
foreign import ccall "&sk_text_utils_get_pos_path" p'sk_text_utils_get_pos_path ::
  FunPtr (Ptr (()) -> CSize -> Sk_text_encoding -> Ptr (Sk_point) -> Ptr (Sk_font) -> Ptr (Sk_path) -> IO (()))

{- | C function signature:

@
sk_rrect_t *sk_rrect_new(void)
@
-}
foreign import ccall "sk_rrect_new" sk_rrect_new ::
  IO (Ptr (Sk_rrect)) -- ^ C return type: @"sk_rrect_t *"@

-- | Function pointer to 'sk_rrect_new'
foreign import ccall "&sk_rrect_new" p'sk_rrect_new ::
  FunPtr (IO (Ptr (Sk_rrect)))

{- | C function signature:

@
sk_rrect_t *sk_rrect_new_copy(const sk_rrect_t *rrect)
@
-}
foreign import ccall "sk_rrect_new_copy" sk_rrect_new_copy ::
  Ptr (Sk_rrect) -- ^ C argument @"const sk_rrect_t * rrect"@
  -> IO (Ptr (Sk_rrect)) -- ^ C return type: @"sk_rrect_t *"@

-- | Function pointer to 'sk_rrect_new_copy'
foreign import ccall "&sk_rrect_new_copy" p'sk_rrect_new_copy ::
  FunPtr (Ptr (Sk_rrect) -> IO (Ptr (Sk_rrect)))

{- | C function signature:

@
void sk_rrect_delete(const sk_rrect_t *rrect)
@
-}
foreign import ccall "sk_rrect_delete" sk_rrect_delete ::
  Ptr (Sk_rrect) -- ^ C argument @"const sk_rrect_t * rrect"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_rrect_delete'
foreign import ccall "&sk_rrect_delete" p'sk_rrect_delete ::
  FunPtr (Ptr (Sk_rrect) -> IO (()))

{- | C function signature:

@
sk_rrect_type_t sk_rrect_get_type(const sk_rrect_t *rrect)
@
-}
foreign import ccall "sk_rrect_get_type" sk_rrect_get_type ::
  Ptr (Sk_rrect) -- ^ C argument @"const sk_rrect_t * rrect"@
  -> IO (Sk_rrect_type) -- ^ C return type: @"sk_rrect_type_t"@

-- | Function pointer to 'sk_rrect_get_type'
foreign import ccall "&sk_rrect_get_type" p'sk_rrect_get_type ::
  FunPtr (Ptr (Sk_rrect) -> IO (Sk_rrect_type))

{- | C function signature:

@
void sk_rrect_get_rect(const sk_rrect_t *rrect, sk_rect_t *rect)
@
-}
foreign import ccall "sk_rrect_get_rect" sk_rrect_get_rect ::
  Ptr (Sk_rrect) -- ^ C argument @"const sk_rrect_t * rrect"@
  -> Ptr (Sk_rect) -- ^ C argument @"sk_rect_t * rect"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_rrect_get_rect'
foreign import ccall "&sk_rrect_get_rect" p'sk_rrect_get_rect ::
  FunPtr (Ptr (Sk_rrect) -> Ptr (Sk_rect) -> IO (()))

{- | C function signature:

@
void sk_rrect_get_radii(const sk_rrect_t *rrect, sk_rrect_corner_t corner, sk_vector_t *radii)
@
-}
foreign import ccall "sk_rrect_get_radii" sk_rrect_get_radii ::
  Ptr (Sk_rrect) -- ^ C argument @"const sk_rrect_t * rrect"@
  -> Sk_rrect_corner -- ^ C argument @"sk_rrect_corner_t corner"@
  -> Ptr (Sk_vector) -- ^ C argument @"sk_vector_t * radii"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_rrect_get_radii'
foreign import ccall "&sk_rrect_get_radii" p'sk_rrect_get_radii ::
  FunPtr (Ptr (Sk_rrect) -> Sk_rrect_corner -> Ptr (Sk_vector) -> IO (()))

{- | C function signature:

@
float sk_rrect_get_width(const sk_rrect_t *rrect)
@
-}
foreign import ccall "sk_rrect_get_width" sk_rrect_get_width ::
  Ptr (Sk_rrect) -- ^ C argument @"const sk_rrect_t * rrect"@
  -> IO (CFloat) -- ^ C return type: @"float"@

-- | Function pointer to 'sk_rrect_get_width'
foreign import ccall "&sk_rrect_get_width" p'sk_rrect_get_width ::
  FunPtr (Ptr (Sk_rrect) -> IO (CFloat))

{- | C function signature:

@
float sk_rrect_get_height(const sk_rrect_t *rrect)
@
-}
foreign import ccall "sk_rrect_get_height" sk_rrect_get_height ::
  Ptr (Sk_rrect) -- ^ C argument @"const sk_rrect_t * rrect"@
  -> IO (CFloat) -- ^ C return type: @"float"@

-- | Function pointer to 'sk_rrect_get_height'
foreign import ccall "&sk_rrect_get_height" p'sk_rrect_get_height ::
  FunPtr (Ptr (Sk_rrect) -> IO (CFloat))

{- | C function signature:

@
void sk_rrect_set_empty(sk_rrect_t *rrect)
@
-}
foreign import ccall "sk_rrect_set_empty" sk_rrect_set_empty ::
  Ptr (Sk_rrect) -- ^ C argument @"sk_rrect_t * rrect"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_rrect_set_empty'
foreign import ccall "&sk_rrect_set_empty" p'sk_rrect_set_empty ::
  FunPtr (Ptr (Sk_rrect) -> IO (()))

{- | C function signature:

@
void sk_rrect_set_rect(sk_rrect_t *rrect, const sk_rect_t *rect)
@
-}
foreign import ccall "sk_rrect_set_rect" sk_rrect_set_rect ::
  Ptr (Sk_rrect) -- ^ C argument @"sk_rrect_t * rrect"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * rect"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_rrect_set_rect'
foreign import ccall "&sk_rrect_set_rect" p'sk_rrect_set_rect ::
  FunPtr (Ptr (Sk_rrect) -> Ptr (Sk_rect) -> IO (()))

{- | C function signature:

@
void sk_rrect_set_oval(sk_rrect_t *rrect, const sk_rect_t *rect)
@
-}
foreign import ccall "sk_rrect_set_oval" sk_rrect_set_oval ::
  Ptr (Sk_rrect) -- ^ C argument @"sk_rrect_t * rrect"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * rect"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_rrect_set_oval'
foreign import ccall "&sk_rrect_set_oval" p'sk_rrect_set_oval ::
  FunPtr (Ptr (Sk_rrect) -> Ptr (Sk_rect) -> IO (()))

{- | C function signature:

@
void sk_rrect_set_rect_xy(sk_rrect_t *rrect, const sk_rect_t *rect, float xRad, float yRad)
@
-}
foreign import ccall "sk_rrect_set_rect_xy" sk_rrect_set_rect_xy ::
  Ptr (Sk_rrect) -- ^ C argument @"sk_rrect_t * rrect"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * rect"@
  -> CFloat -- ^ C argument @"float xRad"@
  -> CFloat -- ^ C argument @"float yRad"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_rrect_set_rect_xy'
foreign import ccall "&sk_rrect_set_rect_xy" p'sk_rrect_set_rect_xy ::
  FunPtr (Ptr (Sk_rrect) -> Ptr (Sk_rect) -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_rrect_set_nine_patch(sk_rrect_t *rrect, const sk_rect_t *rect, float leftRad, float topRad, float rightRad, float bottomRad)
@
-}
foreign import ccall "sk_rrect_set_nine_patch" sk_rrect_set_nine_patch ::
  Ptr (Sk_rrect) -- ^ C argument @"sk_rrect_t * rrect"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * rect"@
  -> CFloat -- ^ C argument @"float leftRad"@
  -> CFloat -- ^ C argument @"float topRad"@
  -> CFloat -- ^ C argument @"float rightRad"@
  -> CFloat -- ^ C argument @"float bottomRad"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_rrect_set_nine_patch'
foreign import ccall "&sk_rrect_set_nine_patch" p'sk_rrect_set_nine_patch ::
  FunPtr (Ptr (Sk_rrect) -> Ptr (Sk_rect) -> CFloat -> CFloat -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_rrect_set_rect_radii(sk_rrect_t *rrect, const sk_rect_t *rect, const sk_vector_t *radii)
@
-}
foreign import ccall "sk_rrect_set_rect_radii" sk_rrect_set_rect_radii ::
  Ptr (Sk_rrect) -- ^ C argument @"sk_rrect_t * rrect"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * rect"@
  -> Ptr (Sk_vector) -- ^ C argument @"const sk_vector_t * radii"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_rrect_set_rect_radii'
foreign import ccall "&sk_rrect_set_rect_radii" p'sk_rrect_set_rect_radii ::
  FunPtr (Ptr (Sk_rrect) -> Ptr (Sk_rect) -> Ptr (Sk_vector) -> IO (()))

{- | C function signature:

@
void sk_rrect_inset(sk_rrect_t *rrect, float dx, float dy)
@
-}
foreign import ccall "sk_rrect_inset" sk_rrect_inset ::
  Ptr (Sk_rrect) -- ^ C argument @"sk_rrect_t * rrect"@
  -> CFloat -- ^ C argument @"float dx"@
  -> CFloat -- ^ C argument @"float dy"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_rrect_inset'
foreign import ccall "&sk_rrect_inset" p'sk_rrect_inset ::
  FunPtr (Ptr (Sk_rrect) -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_rrect_outset(sk_rrect_t *rrect, float dx, float dy)
@
-}
foreign import ccall "sk_rrect_outset" sk_rrect_outset ::
  Ptr (Sk_rrect) -- ^ C argument @"sk_rrect_t * rrect"@
  -> CFloat -- ^ C argument @"float dx"@
  -> CFloat -- ^ C argument @"float dy"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_rrect_outset'
foreign import ccall "&sk_rrect_outset" p'sk_rrect_outset ::
  FunPtr (Ptr (Sk_rrect) -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
void sk_rrect_offset(sk_rrect_t *rrect, float dx, float dy)
@
-}
foreign import ccall "sk_rrect_offset" sk_rrect_offset ::
  Ptr (Sk_rrect) -- ^ C argument @"sk_rrect_t * rrect"@
  -> CFloat -- ^ C argument @"float dx"@
  -> CFloat -- ^ C argument @"float dy"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_rrect_offset'
foreign import ccall "&sk_rrect_offset" p'sk_rrect_offset ::
  FunPtr (Ptr (Sk_rrect) -> CFloat -> CFloat -> IO (()))

{- | C function signature:

@
_Bool sk_rrect_contains(const sk_rrect_t *rrect, const sk_rect_t *rect)
@
-}
foreign import ccall "sk_rrect_contains" sk_rrect_contains ::
  Ptr (Sk_rrect) -- ^ C argument @"const sk_rrect_t * rrect"@
  -> Ptr (Sk_rect) -- ^ C argument @"const sk_rect_t * rect"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_rrect_contains'
foreign import ccall "&sk_rrect_contains" p'sk_rrect_contains ::
  FunPtr (Ptr (Sk_rrect) -> Ptr (Sk_rect) -> IO (CBool))

{- | C function signature:

@
_Bool sk_rrect_is_valid(const sk_rrect_t *rrect)
@
-}
foreign import ccall "sk_rrect_is_valid" sk_rrect_is_valid ::
  Ptr (Sk_rrect) -- ^ C argument @"const sk_rrect_t * rrect"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_rrect_is_valid'
foreign import ccall "&sk_rrect_is_valid" p'sk_rrect_is_valid ::
  FunPtr (Ptr (Sk_rrect) -> IO (CBool))

{- | C function signature:

@
_Bool sk_rrect_transform(sk_rrect_t *rrect, const sk_matrix_t *matrix, sk_rrect_t *dest)
@
-}
foreign import ccall "sk_rrect_transform" sk_rrect_transform ::
  Ptr (Sk_rrect) -- ^ C argument @"sk_rrect_t * rrect"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * matrix"@
  -> Ptr (Sk_rrect) -- ^ C argument @"sk_rrect_t * dest"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_rrect_transform'
foreign import ccall "&sk_rrect_transform" p'sk_rrect_transform ::
  FunPtr (Ptr (Sk_rrect) -> Ptr (Sk_matrix) -> Ptr (Sk_rrect) -> IO (CBool))

{- | C function signature:

@
_Bool sk_matrix_try_invert(sk_matrix_t *matrix, sk_matrix_t *result)
@
-}
foreign import ccall "sk_matrix_try_invert" sk_matrix_try_invert ::
  Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * matrix"@
  -> Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * result"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_matrix_try_invert'
foreign import ccall "&sk_matrix_try_invert" p'sk_matrix_try_invert ::
  FunPtr (Ptr (Sk_matrix) -> Ptr (Sk_matrix) -> IO (CBool))

{- | C function signature:

@
void sk_matrix_concat(sk_matrix_t *result, sk_matrix_t *first, sk_matrix_t *second)
@
-}
foreign import ccall "sk_matrix_concat" sk_matrix_concat ::
  Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * result"@
  -> Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * first"@
  -> Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * second"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_matrix_concat'
foreign import ccall "&sk_matrix_concat" p'sk_matrix_concat ::
  FunPtr (Ptr (Sk_matrix) -> Ptr (Sk_matrix) -> Ptr (Sk_matrix) -> IO (()))

{- | C function signature:

@
void sk_matrix_pre_concat(sk_matrix_t *result, sk_matrix_t *matrix)
@
-}
foreign import ccall "sk_matrix_pre_concat" sk_matrix_pre_concat ::
  Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * result"@
  -> Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * matrix"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_matrix_pre_concat'
foreign import ccall "&sk_matrix_pre_concat" p'sk_matrix_pre_concat ::
  FunPtr (Ptr (Sk_matrix) -> Ptr (Sk_matrix) -> IO (()))

{- | C function signature:

@
void sk_matrix_post_concat(sk_matrix_t *result, sk_matrix_t *matrix)
@
-}
foreign import ccall "sk_matrix_post_concat" sk_matrix_post_concat ::
  Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * result"@
  -> Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * matrix"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_matrix_post_concat'
foreign import ccall "&sk_matrix_post_concat" p'sk_matrix_post_concat ::
  FunPtr (Ptr (Sk_matrix) -> Ptr (Sk_matrix) -> IO (()))

{- | C function signature:

@
void sk_matrix_map_rect(sk_matrix_t *matrix, sk_rect_t *dest, sk_rect_t *source)
@
-}
foreign import ccall "sk_matrix_map_rect" sk_matrix_map_rect ::
  Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * matrix"@
  -> Ptr (Sk_rect) -- ^ C argument @"sk_rect_t * dest"@
  -> Ptr (Sk_rect) -- ^ C argument @"sk_rect_t * source"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_matrix_map_rect'
foreign import ccall "&sk_matrix_map_rect" p'sk_matrix_map_rect ::
  FunPtr (Ptr (Sk_matrix) -> Ptr (Sk_rect) -> Ptr (Sk_rect) -> IO (()))

{- | C function signature:

@
void sk_matrix_map_points(sk_matrix_t *matrix, sk_point_t *dst, sk_point_t *src, int count)
@
-}
foreign import ccall "sk_matrix_map_points" sk_matrix_map_points ::
  Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * matrix"@
  -> Ptr (Sk_point) -- ^ C argument @"sk_point_t * dst"@
  -> Ptr (Sk_point) -- ^ C argument @"sk_point_t * src"@
  -> CInt -- ^ C argument @"int count"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_matrix_map_points'
foreign import ccall "&sk_matrix_map_points" p'sk_matrix_map_points ::
  FunPtr (Ptr (Sk_matrix) -> Ptr (Sk_point) -> Ptr (Sk_point) -> CInt -> IO (()))

{- | C function signature:

@
void sk_matrix_map_vectors(sk_matrix_t *matrix, sk_point_t *dst, sk_point_t *src, int count)
@
-}
foreign import ccall "sk_matrix_map_vectors" sk_matrix_map_vectors ::
  Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * matrix"@
  -> Ptr (Sk_point) -- ^ C argument @"sk_point_t * dst"@
  -> Ptr (Sk_point) -- ^ C argument @"sk_point_t * src"@
  -> CInt -- ^ C argument @"int count"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_matrix_map_vectors'
foreign import ccall "&sk_matrix_map_vectors" p'sk_matrix_map_vectors ::
  FunPtr (Ptr (Sk_matrix) -> Ptr (Sk_point) -> Ptr (Sk_point) -> CInt -> IO (()))

{- | C function signature:

@
void sk_matrix_map_xy(sk_matrix_t *matrix, float x, float y, sk_point_t *result)
@
-}
foreign import ccall "sk_matrix_map_xy" sk_matrix_map_xy ::
  Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * matrix"@
  -> CFloat -- ^ C argument @"float x"@
  -> CFloat -- ^ C argument @"float y"@
  -> Ptr (Sk_point) -- ^ C argument @"sk_point_t * result"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_matrix_map_xy'
foreign import ccall "&sk_matrix_map_xy" p'sk_matrix_map_xy ::
  FunPtr (Ptr (Sk_matrix) -> CFloat -> CFloat -> Ptr (Sk_point) -> IO (()))

{- | C function signature:

@
void sk_matrix_map_vector(sk_matrix_t *matrix, float x, float y, sk_point_t *result)
@
-}
foreign import ccall "sk_matrix_map_vector" sk_matrix_map_vector ::
  Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * matrix"@
  -> CFloat -- ^ C argument @"float x"@
  -> CFloat -- ^ C argument @"float y"@
  -> Ptr (Sk_point) -- ^ C argument @"sk_point_t * result"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_matrix_map_vector'
foreign import ccall "&sk_matrix_map_vector" p'sk_matrix_map_vector ::
  FunPtr (Ptr (Sk_matrix) -> CFloat -> CFloat -> Ptr (Sk_point) -> IO (()))

{- | C function signature:

@
float sk_matrix_map_radius(sk_matrix_t *matrix, float radius)
@
-}
foreign import ccall "sk_matrix_map_radius" sk_matrix_map_radius ::
  Ptr (Sk_matrix) -- ^ C argument @"sk_matrix_t * matrix"@
  -> CFloat -- ^ C argument @"float radius"@
  -> IO (CFloat) -- ^ C return type: @"float"@

-- | Function pointer to 'sk_matrix_map_radius'
foreign import ccall "&sk_matrix_map_radius" p'sk_matrix_map_radius ::
  FunPtr (Ptr (Sk_matrix) -> CFloat -> IO (CFloat))

{- | C function signature:

@
void sk_shader_ref(sk_shader_t *shader)
@
-}
foreign import ccall "sk_shader_ref" sk_shader_ref ::
  Ptr (Sk_shader) -- ^ C argument @"sk_shader_t * shader"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_shader_ref'
foreign import ccall "&sk_shader_ref" p'sk_shader_ref ::
  FunPtr (Ptr (Sk_shader) -> IO (()))

{- | C function signature:

@
void sk_shader_unref(sk_shader_t *shader)
@
-}
foreign import ccall "sk_shader_unref" sk_shader_unref ::
  Ptr (Sk_shader) -- ^ C argument @"sk_shader_t * shader"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_shader_unref'
foreign import ccall "&sk_shader_unref" p'sk_shader_unref ::
  FunPtr (Ptr (Sk_shader) -> IO (()))

{- | C function signature:

@
sk_shader_t *sk_shader_with_local_matrix(const sk_shader_t *shader, const sk_matrix_t *localMatrix)
@
-}
foreign import ccall "sk_shader_with_local_matrix" sk_shader_with_local_matrix ::
  Ptr (Sk_shader) -- ^ C argument @"const sk_shader_t * shader"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * localMatrix"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_shader_with_local_matrix'
foreign import ccall "&sk_shader_with_local_matrix" p'sk_shader_with_local_matrix ::
  FunPtr (Ptr (Sk_shader) -> Ptr (Sk_matrix) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_shader_t *sk_shader_with_color_filter(const sk_shader_t *shader, const sk_colorfilter_t *filter)
@
-}
foreign import ccall "sk_shader_with_color_filter" sk_shader_with_color_filter ::
  Ptr (Sk_shader) -- ^ C argument @"const sk_shader_t * shader"@
  -> Ptr (Sk_colorfilter) -- ^ C argument @"const sk_colorfilter_t * filter"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_shader_with_color_filter'
foreign import ccall "&sk_shader_with_color_filter" p'sk_shader_with_color_filter ::
  FunPtr (Ptr (Sk_shader) -> Ptr (Sk_colorfilter) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_shader_t *sk_shader_new_empty(void)
@
-}
foreign import ccall "sk_shader_new_empty" sk_shader_new_empty ::
  IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_shader_new_empty'
foreign import ccall "&sk_shader_new_empty" p'sk_shader_new_empty ::
  FunPtr (IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_shader_t *sk_shader_new_color(sk_color_t color)
@
-}
foreign import ccall "sk_shader_new_color" sk_shader_new_color ::
  Sk_color -- ^ C argument @"sk_color_t color"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_shader_new_color'
foreign import ccall "&sk_shader_new_color" p'sk_shader_new_color ::
  FunPtr (Sk_color -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_shader_t *sk_shader_new_color4f(const sk_color4f_t *color, const sk_colorspace_t *colorspace)
@
-}
foreign import ccall "sk_shader_new_color4f" sk_shader_new_color4f ::
  Ptr (Sk_color4f) -- ^ C argument @"const sk_color4f_t * color"@
  -> Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * colorspace"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_shader_new_color4f'
foreign import ccall "&sk_shader_new_color4f" p'sk_shader_new_color4f ::
  FunPtr (Ptr (Sk_color4f) -> Ptr (Sk_colorspace) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_shader_t *sk_shader_new_blend(sk_blendmode_t mode, const sk_shader_t *dst, const sk_shader_t *src)
@
-}
foreign import ccall "sk_shader_new_blend" sk_shader_new_blend ::
  Sk_blendmode -- ^ C argument @"sk_blendmode_t mode"@
  -> Ptr (Sk_shader) -- ^ C argument @"const sk_shader_t * dst"@
  -> Ptr (Sk_shader) -- ^ C argument @"const sk_shader_t * src"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_shader_new_blend'
foreign import ccall "&sk_shader_new_blend" p'sk_shader_new_blend ::
  FunPtr (Sk_blendmode -> Ptr (Sk_shader) -> Ptr (Sk_shader) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_shader_t *sk_shader_new_blender(sk_blender_t *blender, const sk_shader_t *dst, const sk_shader_t *src)
@
-}
foreign import ccall "sk_shader_new_blender" sk_shader_new_blender ::
  Ptr (Sk_blender) -- ^ C argument @"sk_blender_t * blender"@
  -> Ptr (Sk_shader) -- ^ C argument @"const sk_shader_t * dst"@
  -> Ptr (Sk_shader) -- ^ C argument @"const sk_shader_t * src"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_shader_new_blender'
foreign import ccall "&sk_shader_new_blender" p'sk_shader_new_blender ::
  FunPtr (Ptr (Sk_blender) -> Ptr (Sk_shader) -> Ptr (Sk_shader) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_shader_t *sk_shader_new_linear_gradient(const sk_point_t points[2], const sk_color_t colors[], const float colorPos[], int colorCount, sk_shader_tilemode_t tileMode, const sk_matrix_t *localMatrix)
@
-}
foreign import ccall "sk_shader_new_linear_gradient" sk_shader_new_linear_gradient ::
  Ptr (Sk_point) -- ^ C argument @"const sk_point_t [2] points"@
  -> Ptr (Sk_color) -- ^ C argument @"const sk_color_t [] colors"@
  -> Ptr (CFloat) -- ^ C argument @"const float [] colorPos"@
  -> CInt -- ^ C argument @"int colorCount"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t tileMode"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * localMatrix"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_shader_new_linear_gradient'
foreign import ccall "&sk_shader_new_linear_gradient" p'sk_shader_new_linear_gradient ::
  FunPtr (Ptr (Sk_point) -> Ptr (Sk_color) -> Ptr (CFloat) -> CInt -> Sk_shader_tilemode -> Ptr (Sk_matrix) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_shader_t *sk_shader_new_linear_gradient_color4f(const sk_point_t points[2], const sk_color4f_t *colors, const sk_colorspace_t *colorspace, const float colorPos[], int colorCount, sk_shader_tilemode_t tileMode, const sk_matrix_t *localMatrix)
@
-}
foreign import ccall "sk_shader_new_linear_gradient_color4f" sk_shader_new_linear_gradient_color4f ::
  Ptr (Sk_point) -- ^ C argument @"const sk_point_t [2] points"@
  -> Ptr (Sk_color4f) -- ^ C argument @"const sk_color4f_t * colors"@
  -> Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * colorspace"@
  -> Ptr (CFloat) -- ^ C argument @"const float [] colorPos"@
  -> CInt -- ^ C argument @"int colorCount"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t tileMode"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * localMatrix"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_shader_new_linear_gradient_color4f'
foreign import ccall "&sk_shader_new_linear_gradient_color4f" p'sk_shader_new_linear_gradient_color4f ::
  FunPtr (Ptr (Sk_point) -> Ptr (Sk_color4f) -> Ptr (Sk_colorspace) -> Ptr (CFloat) -> CInt -> Sk_shader_tilemode -> Ptr (Sk_matrix) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_shader_t *sk_shader_new_radial_gradient(const sk_point_t *center, float radius, const sk_color_t colors[], const float colorPos[], int colorCount, sk_shader_tilemode_t tileMode, const sk_matrix_t *localMatrix)
@
-}
foreign import ccall "sk_shader_new_radial_gradient" sk_shader_new_radial_gradient ::
  Ptr (Sk_point) -- ^ C argument @"const sk_point_t * center"@
  -> CFloat -- ^ C argument @"float radius"@
  -> Ptr (Sk_color) -- ^ C argument @"const sk_color_t [] colors"@
  -> Ptr (CFloat) -- ^ C argument @"const float [] colorPos"@
  -> CInt -- ^ C argument @"int colorCount"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t tileMode"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * localMatrix"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_shader_new_radial_gradient'
foreign import ccall "&sk_shader_new_radial_gradient" p'sk_shader_new_radial_gradient ::
  FunPtr (Ptr (Sk_point) -> CFloat -> Ptr (Sk_color) -> Ptr (CFloat) -> CInt -> Sk_shader_tilemode -> Ptr (Sk_matrix) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_shader_t *sk_shader_new_radial_gradient_color4f(const sk_point_t *center, float radius, const sk_color4f_t *colors, const sk_colorspace_t *colorspace, const float colorPos[], int colorCount, sk_shader_tilemode_t tileMode, const sk_matrix_t *localMatrix)
@
-}
foreign import ccall "sk_shader_new_radial_gradient_color4f" sk_shader_new_radial_gradient_color4f ::
  Ptr (Sk_point) -- ^ C argument @"const sk_point_t * center"@
  -> CFloat -- ^ C argument @"float radius"@
  -> Ptr (Sk_color4f) -- ^ C argument @"const sk_color4f_t * colors"@
  -> Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * colorspace"@
  -> Ptr (CFloat) -- ^ C argument @"const float [] colorPos"@
  -> CInt -- ^ C argument @"int colorCount"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t tileMode"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * localMatrix"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_shader_new_radial_gradient_color4f'
foreign import ccall "&sk_shader_new_radial_gradient_color4f" p'sk_shader_new_radial_gradient_color4f ::
  FunPtr (Ptr (Sk_point) -> CFloat -> Ptr (Sk_color4f) -> Ptr (Sk_colorspace) -> Ptr (CFloat) -> CInt -> Sk_shader_tilemode -> Ptr (Sk_matrix) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_shader_t *sk_shader_new_sweep_gradient(const sk_point_t *center, const sk_color_t colors[], const float colorPos[], int colorCount, sk_shader_tilemode_t tileMode, float startAngle, float endAngle, const sk_matrix_t *localMatrix)
@
-}
foreign import ccall "sk_shader_new_sweep_gradient" sk_shader_new_sweep_gradient ::
  Ptr (Sk_point) -- ^ C argument @"const sk_point_t * center"@
  -> Ptr (Sk_color) -- ^ C argument @"const sk_color_t [] colors"@
  -> Ptr (CFloat) -- ^ C argument @"const float [] colorPos"@
  -> CInt -- ^ C argument @"int colorCount"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t tileMode"@
  -> CFloat -- ^ C argument @"float startAngle"@
  -> CFloat -- ^ C argument @"float endAngle"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * localMatrix"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_shader_new_sweep_gradient'
foreign import ccall "&sk_shader_new_sweep_gradient" p'sk_shader_new_sweep_gradient ::
  FunPtr (Ptr (Sk_point) -> Ptr (Sk_color) -> Ptr (CFloat) -> CInt -> Sk_shader_tilemode -> CFloat -> CFloat -> Ptr (Sk_matrix) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_shader_t *sk_shader_new_sweep_gradient_color4f(const sk_point_t *center, const sk_color4f_t *colors, const sk_colorspace_t *colorspace, const float colorPos[], int colorCount, sk_shader_tilemode_t tileMode, float startAngle, float endAngle, const sk_matrix_t *localMatrix)
@
-}
foreign import ccall "sk_shader_new_sweep_gradient_color4f" sk_shader_new_sweep_gradient_color4f ::
  Ptr (Sk_point) -- ^ C argument @"const sk_point_t * center"@
  -> Ptr (Sk_color4f) -- ^ C argument @"const sk_color4f_t * colors"@
  -> Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * colorspace"@
  -> Ptr (CFloat) -- ^ C argument @"const float [] colorPos"@
  -> CInt -- ^ C argument @"int colorCount"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t tileMode"@
  -> CFloat -- ^ C argument @"float startAngle"@
  -> CFloat -- ^ C argument @"float endAngle"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * localMatrix"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_shader_new_sweep_gradient_color4f'
foreign import ccall "&sk_shader_new_sweep_gradient_color4f" p'sk_shader_new_sweep_gradient_color4f ::
  FunPtr (Ptr (Sk_point) -> Ptr (Sk_color4f) -> Ptr (Sk_colorspace) -> Ptr (CFloat) -> CInt -> Sk_shader_tilemode -> CFloat -> CFloat -> Ptr (Sk_matrix) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_shader_t *sk_shader_new_two_point_conical_gradient(const sk_point_t *start, float startRadius, const sk_point_t *end, float endRadius, const sk_color_t colors[], const float colorPos[], int colorCount, sk_shader_tilemode_t tileMode, const sk_matrix_t *localMatrix)
@
-}
foreign import ccall "sk_shader_new_two_point_conical_gradient" sk_shader_new_two_point_conical_gradient ::
  Ptr (Sk_point) -- ^ C argument @"const sk_point_t * start"@
  -> CFloat -- ^ C argument @"float startRadius"@
  -> Ptr (Sk_point) -- ^ C argument @"const sk_point_t * end"@
  -> CFloat -- ^ C argument @"float endRadius"@
  -> Ptr (Sk_color) -- ^ C argument @"const sk_color_t [] colors"@
  -> Ptr (CFloat) -- ^ C argument @"const float [] colorPos"@
  -> CInt -- ^ C argument @"int colorCount"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t tileMode"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * localMatrix"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_shader_new_two_point_conical_gradient'
foreign import ccall "&sk_shader_new_two_point_conical_gradient" p'sk_shader_new_two_point_conical_gradient ::
  FunPtr (Ptr (Sk_point) -> CFloat -> Ptr (Sk_point) -> CFloat -> Ptr (Sk_color) -> Ptr (CFloat) -> CInt -> Sk_shader_tilemode -> Ptr (Sk_matrix) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_shader_t *sk_shader_new_two_point_conical_gradient_color4f(const sk_point_t *start, float startRadius, const sk_point_t *end, float endRadius, const sk_color4f_t *colors, const sk_colorspace_t *colorspace, const float colorPos[], int colorCount, sk_shader_tilemode_t tileMode, const sk_matrix_t *localMatrix)
@
-}
foreign import ccall "sk_shader_new_two_point_conical_gradient_color4f" sk_shader_new_two_point_conical_gradient_color4f ::
  Ptr (Sk_point) -- ^ C argument @"const sk_point_t * start"@
  -> CFloat -- ^ C argument @"float startRadius"@
  -> Ptr (Sk_point) -- ^ C argument @"const sk_point_t * end"@
  -> CFloat -- ^ C argument @"float endRadius"@
  -> Ptr (Sk_color4f) -- ^ C argument @"const sk_color4f_t * colors"@
  -> Ptr (Sk_colorspace) -- ^ C argument @"const sk_colorspace_t * colorspace"@
  -> Ptr (CFloat) -- ^ C argument @"const float [] colorPos"@
  -> CInt -- ^ C argument @"int colorCount"@
  -> Sk_shader_tilemode -- ^ C argument @"sk_shader_tilemode_t tileMode"@
  -> Ptr (Sk_matrix) -- ^ C argument @"const sk_matrix_t * localMatrix"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_shader_new_two_point_conical_gradient_color4f'
foreign import ccall "&sk_shader_new_two_point_conical_gradient_color4f" p'sk_shader_new_two_point_conical_gradient_color4f ::
  FunPtr (Ptr (Sk_point) -> CFloat -> Ptr (Sk_point) -> CFloat -> Ptr (Sk_color4f) -> Ptr (Sk_colorspace) -> Ptr (CFloat) -> CInt -> Sk_shader_tilemode -> Ptr (Sk_matrix) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_shader_t *sk_shader_new_perlin_noise_fractal_noise(float baseFrequencyX, float baseFrequencyY, int numOctaves, float seed, const sk_isize_t *tileSize)
@
-}
foreign import ccall "sk_shader_new_perlin_noise_fractal_noise" sk_shader_new_perlin_noise_fractal_noise ::
  CFloat -- ^ C argument @"float baseFrequencyX"@
  -> CFloat -- ^ C argument @"float baseFrequencyY"@
  -> CInt -- ^ C argument @"int numOctaves"@
  -> CFloat -- ^ C argument @"float seed"@
  -> Ptr (Sk_isize) -- ^ C argument @"const sk_isize_t * tileSize"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_shader_new_perlin_noise_fractal_noise'
foreign import ccall "&sk_shader_new_perlin_noise_fractal_noise" p'sk_shader_new_perlin_noise_fractal_noise ::
  FunPtr (CFloat -> CFloat -> CInt -> CFloat -> Ptr (Sk_isize) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
sk_shader_t *sk_shader_new_perlin_noise_turbulence(float baseFrequencyX, float baseFrequencyY, int numOctaves, float seed, const sk_isize_t *tileSize)
@
-}
foreign import ccall "sk_shader_new_perlin_noise_turbulence" sk_shader_new_perlin_noise_turbulence ::
  CFloat -- ^ C argument @"float baseFrequencyX"@
  -> CFloat -- ^ C argument @"float baseFrequencyY"@
  -> CInt -- ^ C argument @"int numOctaves"@
  -> CFloat -- ^ C argument @"float seed"@
  -> Ptr (Sk_isize) -- ^ C argument @"const sk_isize_t * tileSize"@
  -> IO (Ptr (Sk_shader)) -- ^ C return type: @"sk_shader_t *"@

-- | Function pointer to 'sk_shader_new_perlin_noise_turbulence'
foreign import ccall "&sk_shader_new_perlin_noise_turbulence" p'sk_shader_new_perlin_noise_turbulence ::
  FunPtr (CFloat -> CFloat -> CInt -> CFloat -> Ptr (Sk_isize) -> IO (Ptr (Sk_shader)))

{- | C function signature:

@
void gr_recording_context_unref(gr_recording_context_t *context)
@
-}
foreign import ccall "gr_recording_context_unref" gr_recording_context_unref ::
  Ptr (Gr_recording_context) -- ^ C argument @"gr_recording_context_t * context"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_recording_context_unref'
foreign import ccall "&gr_recording_context_unref" p'gr_recording_context_unref ::
  FunPtr (Ptr (Gr_recording_context) -> IO (()))

{- | C function signature:

@
int gr_recording_context_get_max_surface_sample_count_for_color_type(gr_recording_context_t *context, sk_colortype_t colorType)
@
-}
foreign import ccall "gr_recording_context_get_max_surface_sample_count_for_color_type" gr_recording_context_get_max_surface_sample_count_for_color_type ::
  Ptr (Gr_recording_context) -- ^ C argument @"gr_recording_context_t * context"@
  -> Sk_colortype -- ^ C argument @"sk_colortype_t colorType"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'gr_recording_context_get_max_surface_sample_count_for_color_type'
foreign import ccall "&gr_recording_context_get_max_surface_sample_count_for_color_type" p'gr_recording_context_get_max_surface_sample_count_for_color_type ::
  FunPtr (Ptr (Gr_recording_context) -> Sk_colortype -> IO (CInt))

{- | C function signature:

@
gr_backend_t gr_recording_context_get_backend(gr_recording_context_t *context)
@
-}
foreign import ccall "gr_recording_context_get_backend" gr_recording_context_get_backend ::
  Ptr (Gr_recording_context) -- ^ C argument @"gr_recording_context_t * context"@
  -> IO (Gr_backend) -- ^ C return type: @"gr_backend_t"@

-- | Function pointer to 'gr_recording_context_get_backend'
foreign import ccall "&gr_recording_context_get_backend" p'gr_recording_context_get_backend ::
  FunPtr (Ptr (Gr_recording_context) -> IO (Gr_backend))

{- | C function signature:

@
_Bool gr_recording_context_is_abandoned(gr_recording_context_t *context)
@
-}
foreign import ccall "gr_recording_context_is_abandoned" gr_recording_context_is_abandoned ::
  Ptr (Gr_recording_context) -- ^ C argument @"gr_recording_context_t * context"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'gr_recording_context_is_abandoned'
foreign import ccall "&gr_recording_context_is_abandoned" p'gr_recording_context_is_abandoned ::
  FunPtr (Ptr (Gr_recording_context) -> IO (CBool))

{- | C function signature:

@
int gr_recording_context_max_texture_size(gr_recording_context_t *context)
@
-}
foreign import ccall "gr_recording_context_max_texture_size" gr_recording_context_max_texture_size ::
  Ptr (Gr_recording_context) -- ^ C argument @"gr_recording_context_t * context"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'gr_recording_context_max_texture_size'
foreign import ccall "&gr_recording_context_max_texture_size" p'gr_recording_context_max_texture_size ::
  FunPtr (Ptr (Gr_recording_context) -> IO (CInt))

{- | C function signature:

@
int gr_recording_context_max_render_target_size(gr_recording_context_t *context)
@
-}
foreign import ccall "gr_recording_context_max_render_target_size" gr_recording_context_max_render_target_size ::
  Ptr (Gr_recording_context) -- ^ C argument @"gr_recording_context_t * context"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'gr_recording_context_max_render_target_size'
foreign import ccall "&gr_recording_context_max_render_target_size" p'gr_recording_context_max_render_target_size ::
  FunPtr (Ptr (Gr_recording_context) -> IO (CInt))

{- | C function signature:

@
gr_direct_context_t *gr_recording_context_get_direct_context(gr_recording_context_t *context)
@
-}
foreign import ccall "gr_recording_context_get_direct_context" gr_recording_context_get_direct_context ::
  Ptr (Gr_recording_context) -- ^ C argument @"gr_recording_context_t * context"@
  -> IO (Ptr (Gr_direct_context)) -- ^ C return type: @"gr_direct_context_t *"@

-- | Function pointer to 'gr_recording_context_get_direct_context'
foreign import ccall "&gr_recording_context_get_direct_context" p'gr_recording_context_get_direct_context ::
  FunPtr (Ptr (Gr_recording_context) -> IO (Ptr (Gr_direct_context)))

{- | C function signature:

@
gr_direct_context_t *gr_direct_context_make_gl(const gr_glinterface_t *glInterface)
@
-}
foreign import ccall "gr_direct_context_make_gl" gr_direct_context_make_gl ::
  Ptr (Gr_glinterface) -- ^ C argument @"const gr_glinterface_t * glInterface"@
  -> IO (Ptr (Gr_direct_context)) -- ^ C return type: @"gr_direct_context_t *"@

-- | Function pointer to 'gr_direct_context_make_gl'
foreign import ccall "&gr_direct_context_make_gl" p'gr_direct_context_make_gl ::
  FunPtr (Ptr (Gr_glinterface) -> IO (Ptr (Gr_direct_context)))

{- | C function signature:

@
gr_direct_context_t *gr_direct_context_make_gl_with_options(const gr_glinterface_t *glInterface, const gr_context_options_t *options)
@
-}
foreign import ccall "gr_direct_context_make_gl_with_options" gr_direct_context_make_gl_with_options ::
  Ptr (Gr_glinterface) -- ^ C argument @"const gr_glinterface_t * glInterface"@
  -> Ptr (Gr_context_options) -- ^ C argument @"const gr_context_options_t * options"@
  -> IO (Ptr (Gr_direct_context)) -- ^ C return type: @"gr_direct_context_t *"@

-- | Function pointer to 'gr_direct_context_make_gl_with_options'
foreign import ccall "&gr_direct_context_make_gl_with_options" p'gr_direct_context_make_gl_with_options ::
  FunPtr (Ptr (Gr_glinterface) -> Ptr (Gr_context_options) -> IO (Ptr (Gr_direct_context)))

{- | C function signature:

@
gr_direct_context_t *gr_direct_context_make_metal(void *device, void *queue)
@
-}
foreign import ccall "gr_direct_context_make_metal" gr_direct_context_make_metal ::
  Ptr (()) -- ^ C argument @"void * device"@
  -> Ptr (()) -- ^ C argument @"void * queue"@
  -> IO (Ptr (Gr_direct_context)) -- ^ C return type: @"gr_direct_context_t *"@

-- | Function pointer to 'gr_direct_context_make_metal'
foreign import ccall "&gr_direct_context_make_metal" p'gr_direct_context_make_metal ::
  FunPtr (Ptr (()) -> Ptr (()) -> IO (Ptr (Gr_direct_context)))

{- | C function signature:

@
gr_direct_context_t *gr_direct_context_make_metal_with_options(void *device, void *queue, const gr_context_options_t *options)
@
-}
foreign import ccall "gr_direct_context_make_metal_with_options" gr_direct_context_make_metal_with_options ::
  Ptr (()) -- ^ C argument @"void * device"@
  -> Ptr (()) -- ^ C argument @"void * queue"@
  -> Ptr (Gr_context_options) -- ^ C argument @"const gr_context_options_t * options"@
  -> IO (Ptr (Gr_direct_context)) -- ^ C return type: @"gr_direct_context_t *"@

-- | Function pointer to 'gr_direct_context_make_metal_with_options'
foreign import ccall "&gr_direct_context_make_metal_with_options" p'gr_direct_context_make_metal_with_options ::
  FunPtr (Ptr (()) -> Ptr (()) -> Ptr (Gr_context_options) -> IO (Ptr (Gr_direct_context)))

{- | C function signature:

@
_Bool gr_direct_context_is_abandoned(gr_direct_context_t *context)
@
-}
foreign import ccall "gr_direct_context_is_abandoned" gr_direct_context_is_abandoned ::
  Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'gr_direct_context_is_abandoned'
foreign import ccall "&gr_direct_context_is_abandoned" p'gr_direct_context_is_abandoned ::
  FunPtr (Ptr (Gr_direct_context) -> IO (CBool))

{- | C function signature:

@
void gr_direct_context_abandon_context(gr_direct_context_t *context)
@
-}
foreign import ccall "gr_direct_context_abandon_context" gr_direct_context_abandon_context ::
  Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_direct_context_abandon_context'
foreign import ccall "&gr_direct_context_abandon_context" p'gr_direct_context_abandon_context ::
  FunPtr (Ptr (Gr_direct_context) -> IO (()))

{- | C function signature:

@
void gr_direct_context_release_resources_and_abandon_context(gr_direct_context_t *context)
@
-}
foreign import ccall "gr_direct_context_release_resources_and_abandon_context" gr_direct_context_release_resources_and_abandon_context ::
  Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_direct_context_release_resources_and_abandon_context'
foreign import ccall "&gr_direct_context_release_resources_and_abandon_context" p'gr_direct_context_release_resources_and_abandon_context ::
  FunPtr (Ptr (Gr_direct_context) -> IO (()))

{- | C function signature:

@
size_t gr_direct_context_get_resource_cache_limit(gr_direct_context_t *context)
@
-}
foreign import ccall "gr_direct_context_get_resource_cache_limit" gr_direct_context_get_resource_cache_limit ::
  Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'gr_direct_context_get_resource_cache_limit'
foreign import ccall "&gr_direct_context_get_resource_cache_limit" p'gr_direct_context_get_resource_cache_limit ::
  FunPtr (Ptr (Gr_direct_context) -> IO (CSize))

{- | C function signature:

@
void gr_direct_context_set_resource_cache_limit(gr_direct_context_t *context, size_t maxResourceBytes)
@
-}
foreign import ccall "gr_direct_context_set_resource_cache_limit" gr_direct_context_set_resource_cache_limit ::
  Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> CSize -- ^ C argument @"size_t maxResourceBytes"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_direct_context_set_resource_cache_limit'
foreign import ccall "&gr_direct_context_set_resource_cache_limit" p'gr_direct_context_set_resource_cache_limit ::
  FunPtr (Ptr (Gr_direct_context) -> CSize -> IO (()))

{- | C function signature:

@
void gr_direct_context_get_resource_cache_usage(gr_direct_context_t *context, int *maxResources, size_t *maxResourceBytes)
@
-}
foreign import ccall "gr_direct_context_get_resource_cache_usage" gr_direct_context_get_resource_cache_usage ::
  Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> Ptr (CInt) -- ^ C argument @"int * maxResources"@
  -> Ptr (CSize) -- ^ C argument @"size_t * maxResourceBytes"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_direct_context_get_resource_cache_usage'
foreign import ccall "&gr_direct_context_get_resource_cache_usage" p'gr_direct_context_get_resource_cache_usage ::
  FunPtr (Ptr (Gr_direct_context) -> Ptr (CInt) -> Ptr (CSize) -> IO (()))

{- | C function signature:

@
void gr_direct_context_flush(gr_direct_context_t *context)
@
-}
foreign import ccall "gr_direct_context_flush" gr_direct_context_flush ::
  Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_direct_context_flush'
foreign import ccall "&gr_direct_context_flush" p'gr_direct_context_flush ::
  FunPtr (Ptr (Gr_direct_context) -> IO (()))

{- | C function signature:

@
_Bool gr_direct_context_submit(gr_direct_context_t *context, _Bool syncCpu)
@
-}
foreign import ccall "gr_direct_context_submit" gr_direct_context_submit ::
  Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> CBool -- ^ C argument @"_Bool syncCpu"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'gr_direct_context_submit'
foreign import ccall "&gr_direct_context_submit" p'gr_direct_context_submit ::
  FunPtr (Ptr (Gr_direct_context) -> CBool -> IO (CBool))

{- | C function signature:

@
void gr_direct_context_flush_and_submit(gr_direct_context_t *context, _Bool syncCpu)
@
-}
foreign import ccall "gr_direct_context_flush_and_submit" gr_direct_context_flush_and_submit ::
  Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> CBool -- ^ C argument @"_Bool syncCpu"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_direct_context_flush_and_submit'
foreign import ccall "&gr_direct_context_flush_and_submit" p'gr_direct_context_flush_and_submit ::
  FunPtr (Ptr (Gr_direct_context) -> CBool -> IO (()))

{- | C function signature:

@
void gr_direct_context_flush_image(gr_direct_context_t *context, const sk_image_t *image)
@
-}
foreign import ccall "gr_direct_context_flush_image" gr_direct_context_flush_image ::
  Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> Ptr (Sk_image) -- ^ C argument @"const sk_image_t * image"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_direct_context_flush_image'
foreign import ccall "&gr_direct_context_flush_image" p'gr_direct_context_flush_image ::
  FunPtr (Ptr (Gr_direct_context) -> Ptr (Sk_image) -> IO (()))

{- | C function signature:

@
void gr_direct_context_flush_surface(gr_direct_context_t *context, sk_surface_t *surface)
@
-}
foreign import ccall "gr_direct_context_flush_surface" gr_direct_context_flush_surface ::
  Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> Ptr (Sk_surface) -- ^ C argument @"sk_surface_t * surface"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_direct_context_flush_surface'
foreign import ccall "&gr_direct_context_flush_surface" p'gr_direct_context_flush_surface ::
  FunPtr (Ptr (Gr_direct_context) -> Ptr (Sk_surface) -> IO (()))

{- | C function signature:

@
void gr_direct_context_reset_context(gr_direct_context_t *context, uint32_t state)
@
-}
foreign import ccall "gr_direct_context_reset_context" gr_direct_context_reset_context ::
  Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> Word32 -- ^ C argument @"uint32_t state"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_direct_context_reset_context'
foreign import ccall "&gr_direct_context_reset_context" p'gr_direct_context_reset_context ::
  FunPtr (Ptr (Gr_direct_context) -> Word32 -> IO (()))

{- | C function signature:

@
void gr_direct_context_dump_memory_statistics(const gr_direct_context_t *context, sk_tracememorydump_t *dump)
@
-}
foreign import ccall "gr_direct_context_dump_memory_statistics" gr_direct_context_dump_memory_statistics ::
  Ptr (Gr_direct_context) -- ^ C argument @"const gr_direct_context_t * context"@
  -> Ptr (Sk_tracememorydump) -- ^ C argument @"sk_tracememorydump_t * dump"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_direct_context_dump_memory_statistics'
foreign import ccall "&gr_direct_context_dump_memory_statistics" p'gr_direct_context_dump_memory_statistics ::
  FunPtr (Ptr (Gr_direct_context) -> Ptr (Sk_tracememorydump) -> IO (()))

{- | C function signature:

@
void gr_direct_context_free_gpu_resources(gr_direct_context_t *context)
@
-}
foreign import ccall "gr_direct_context_free_gpu_resources" gr_direct_context_free_gpu_resources ::
  Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_direct_context_free_gpu_resources'
foreign import ccall "&gr_direct_context_free_gpu_resources" p'gr_direct_context_free_gpu_resources ::
  FunPtr (Ptr (Gr_direct_context) -> IO (()))

{- | C function signature:

@
void gr_direct_context_perform_deferred_cleanup(gr_direct_context_t *context, long long ms)
@
-}
foreign import ccall "gr_direct_context_perform_deferred_cleanup" gr_direct_context_perform_deferred_cleanup ::
  Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> CLLong -- ^ C argument @"long long ms"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_direct_context_perform_deferred_cleanup'
foreign import ccall "&gr_direct_context_perform_deferred_cleanup" p'gr_direct_context_perform_deferred_cleanup ::
  FunPtr (Ptr (Gr_direct_context) -> CLLong -> IO (()))

{- | C function signature:

@
void gr_direct_context_purge_unlocked_resources_bytes(gr_direct_context_t *context, size_t bytesToPurge, _Bool preferScratchResources)
@
-}
foreign import ccall "gr_direct_context_purge_unlocked_resources_bytes" gr_direct_context_purge_unlocked_resources_bytes ::
  Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> CSize -- ^ C argument @"size_t bytesToPurge"@
  -> CBool -- ^ C argument @"_Bool preferScratchResources"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_direct_context_purge_unlocked_resources_bytes'
foreign import ccall "&gr_direct_context_purge_unlocked_resources_bytes" p'gr_direct_context_purge_unlocked_resources_bytes ::
  FunPtr (Ptr (Gr_direct_context) -> CSize -> CBool -> IO (()))

{- | C function signature:

@
void gr_direct_context_purge_unlocked_resources(gr_direct_context_t *context, _Bool scratchResourcesOnly)
@
-}
foreign import ccall "gr_direct_context_purge_unlocked_resources" gr_direct_context_purge_unlocked_resources ::
  Ptr (Gr_direct_context) -- ^ C argument @"gr_direct_context_t * context"@
  -> CBool -- ^ C argument @"_Bool scratchResourcesOnly"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_direct_context_purge_unlocked_resources'
foreign import ccall "&gr_direct_context_purge_unlocked_resources" p'gr_direct_context_purge_unlocked_resources ::
  FunPtr (Ptr (Gr_direct_context) -> CBool -> IO (()))

{- | C function signature:

@
const gr_glinterface_t *gr_glinterface_create_native_interface(void)
@
-}
foreign import ccall "gr_glinterface_create_native_interface" gr_glinterface_create_native_interface ::
  IO (Ptr (Gr_glinterface)) -- ^ C return type: @"const gr_glinterface_t *"@

-- | Function pointer to 'gr_glinterface_create_native_interface'
foreign import ccall "&gr_glinterface_create_native_interface" p'gr_glinterface_create_native_interface ::
  FunPtr (IO (Ptr (Gr_glinterface)))

{- | C function signature:

@
const gr_glinterface_t *gr_glinterface_assemble_interface(void *ctx, gr_gl_get_proc get)
@
-}
foreign import ccall "gr_glinterface_assemble_interface" gr_glinterface_assemble_interface ::
  Ptr (()) -- ^ C argument @"void * ctx"@
  -> FunPtr Gr_gl_get_proc -- ^ C argument @"gr_gl_get_proc get"@
  -> IO (Ptr (Gr_glinterface)) -- ^ C return type: @"const gr_glinterface_t *"@

-- | Function pointer to 'gr_glinterface_assemble_interface'
foreign import ccall "&gr_glinterface_assemble_interface" p'gr_glinterface_assemble_interface ::
  FunPtr (Ptr (()) -> FunPtr Gr_gl_get_proc -> IO (Ptr (Gr_glinterface)))

{- | C function signature:

@
const gr_glinterface_t *gr_glinterface_assemble_gl_interface(void *ctx, gr_gl_get_proc get)
@
-}
foreign import ccall "gr_glinterface_assemble_gl_interface" gr_glinterface_assemble_gl_interface ::
  Ptr (()) -- ^ C argument @"void * ctx"@
  -> FunPtr Gr_gl_get_proc -- ^ C argument @"gr_gl_get_proc get"@
  -> IO (Ptr (Gr_glinterface)) -- ^ C return type: @"const gr_glinterface_t *"@

-- | Function pointer to 'gr_glinterface_assemble_gl_interface'
foreign import ccall "&gr_glinterface_assemble_gl_interface" p'gr_glinterface_assemble_gl_interface ::
  FunPtr (Ptr (()) -> FunPtr Gr_gl_get_proc -> IO (Ptr (Gr_glinterface)))

{- | C function signature:

@
const gr_glinterface_t *gr_glinterface_assemble_gles_interface(void *ctx, gr_gl_get_proc get)
@
-}
foreign import ccall "gr_glinterface_assemble_gles_interface" gr_glinterface_assemble_gles_interface ::
  Ptr (()) -- ^ C argument @"void * ctx"@
  -> FunPtr Gr_gl_get_proc -- ^ C argument @"gr_gl_get_proc get"@
  -> IO (Ptr (Gr_glinterface)) -- ^ C return type: @"const gr_glinterface_t *"@

-- | Function pointer to 'gr_glinterface_assemble_gles_interface'
foreign import ccall "&gr_glinterface_assemble_gles_interface" p'gr_glinterface_assemble_gles_interface ::
  FunPtr (Ptr (()) -> FunPtr Gr_gl_get_proc -> IO (Ptr (Gr_glinterface)))

{- | C function signature:

@
const gr_glinterface_t *gr_glinterface_assemble_webgl_interface(void *ctx, gr_gl_get_proc get)
@
-}
foreign import ccall "gr_glinterface_assemble_webgl_interface" gr_glinterface_assemble_webgl_interface ::
  Ptr (()) -- ^ C argument @"void * ctx"@
  -> FunPtr Gr_gl_get_proc -- ^ C argument @"gr_gl_get_proc get"@
  -> IO (Ptr (Gr_glinterface)) -- ^ C return type: @"const gr_glinterface_t *"@

-- | Function pointer to 'gr_glinterface_assemble_webgl_interface'
foreign import ccall "&gr_glinterface_assemble_webgl_interface" p'gr_glinterface_assemble_webgl_interface ::
  FunPtr (Ptr (()) -> FunPtr Gr_gl_get_proc -> IO (Ptr (Gr_glinterface)))

{- | C function signature:

@
void gr_glinterface_unref(const gr_glinterface_t *glInterface)
@
-}
foreign import ccall "gr_glinterface_unref" gr_glinterface_unref ::
  Ptr (Gr_glinterface) -- ^ C argument @"const gr_glinterface_t * glInterface"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_glinterface_unref'
foreign import ccall "&gr_glinterface_unref" p'gr_glinterface_unref ::
  FunPtr (Ptr (Gr_glinterface) -> IO (()))

{- | C function signature:

@
_Bool gr_glinterface_validate(const gr_glinterface_t *glInterface)
@
-}
foreign import ccall "gr_glinterface_validate" gr_glinterface_validate ::
  Ptr (Gr_glinterface) -- ^ C argument @"const gr_glinterface_t * glInterface"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'gr_glinterface_validate'
foreign import ccall "&gr_glinterface_validate" p'gr_glinterface_validate ::
  FunPtr (Ptr (Gr_glinterface) -> IO (CBool))

{- | C function signature:

@
_Bool gr_glinterface_has_extension(const gr_glinterface_t *glInterface, const char *extension)
@
-}
foreign import ccall "gr_glinterface_has_extension" gr_glinterface_has_extension ::
  Ptr (Gr_glinterface) -- ^ C argument @"const gr_glinterface_t * glInterface"@
  -> Ptr (CChar) -- ^ C argument @"const char * extension"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'gr_glinterface_has_extension'
foreign import ccall "&gr_glinterface_has_extension" p'gr_glinterface_has_extension ::
  FunPtr (Ptr (Gr_glinterface) -> Ptr (CChar) -> IO (CBool))

{- | C function signature:

@
gr_vk_extensions_t *gr_vk_extensions_new(void)
@
-}
foreign import ccall "gr_vk_extensions_new" gr_vk_extensions_new ::
  IO (Ptr (Gr_vk_extensions)) -- ^ C return type: @"gr_vk_extensions_t *"@

-- | Function pointer to 'gr_vk_extensions_new'
foreign import ccall "&gr_vk_extensions_new" p'gr_vk_extensions_new ::
  FunPtr (IO (Ptr (Gr_vk_extensions)))

{- | C function signature:

@
void gr_vk_extensions_delete(gr_vk_extensions_t *extensions)
@
-}
foreign import ccall "gr_vk_extensions_delete" gr_vk_extensions_delete ::
  Ptr (Gr_vk_extensions) -- ^ C argument @"gr_vk_extensions_t * extensions"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_vk_extensions_delete'
foreign import ccall "&gr_vk_extensions_delete" p'gr_vk_extensions_delete ::
  FunPtr (Ptr (Gr_vk_extensions) -> IO (()))

{- | C function signature:

@
void gr_vk_extensions_init(gr_vk_extensions_t *extensions, gr_vk_get_proc getProc, void *userData, vk_instance_t *instance, vk_physical_device_t *physDev, uint32_t instanceExtensionCount, const char **instanceExtensions, uint32_t deviceExtensionCount, const char **deviceExtensions)
@
-}
foreign import ccall "gr_vk_extensions_init" gr_vk_extensions_init ::
  Ptr (Gr_vk_extensions) -- ^ C argument @"gr_vk_extensions_t * extensions"@
  -> FunPtr Gr_vk_get_proc -- ^ C argument @"gr_vk_get_proc getProc"@
  -> Ptr (()) -- ^ C argument @"void * userData"@
  -> Ptr (Vk_instance) -- ^ C argument @"vk_instance_t * instance"@
  -> Ptr (Vk_physical_device) -- ^ C argument @"vk_physical_device_t * physDev"@
  -> Word32 -- ^ C argument @"uint32_t instanceExtensionCount"@
  -> Ptr (Ptr (CChar)) -- ^ C argument @"const char ** instanceExtensions"@
  -> Word32 -- ^ C argument @"uint32_t deviceExtensionCount"@
  -> Ptr (Ptr (CChar)) -- ^ C argument @"const char ** deviceExtensions"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_vk_extensions_init'
foreign import ccall "&gr_vk_extensions_init" p'gr_vk_extensions_init ::
  FunPtr (Ptr (Gr_vk_extensions) -> FunPtr Gr_vk_get_proc -> Ptr (()) -> Ptr (Vk_instance) -> Ptr (Vk_physical_device) -> Word32 -> Ptr (Ptr (CChar)) -> Word32 -> Ptr (Ptr (CChar)) -> IO (()))

{- | C function signature:

@
_Bool gr_vk_extensions_has_extension(gr_vk_extensions_t *extensions, const char *ext, uint32_t minVersion)
@
-}
foreign import ccall "gr_vk_extensions_has_extension" gr_vk_extensions_has_extension ::
  Ptr (Gr_vk_extensions) -- ^ C argument @"gr_vk_extensions_t * extensions"@
  -> Ptr (CChar) -- ^ C argument @"const char * ext"@
  -> Word32 -- ^ C argument @"uint32_t minVersion"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'gr_vk_extensions_has_extension'
foreign import ccall "&gr_vk_extensions_has_extension" p'gr_vk_extensions_has_extension ::
  FunPtr (Ptr (Gr_vk_extensions) -> Ptr (CChar) -> Word32 -> IO (CBool))

{- | C function signature:

@
gr_backendtexture_t *gr_backendtexture_new_gl(int width, int height, _Bool mipmapped, const gr_gl_textureinfo_t *glInfo)
@
-}
foreign import ccall "gr_backendtexture_new_gl" gr_backendtexture_new_gl ::
  CInt -- ^ C argument @"int width"@
  -> CInt -- ^ C argument @"int height"@
  -> CBool -- ^ C argument @"_Bool mipmapped"@
  -> Ptr (Gr_gl_textureinfo) -- ^ C argument @"const gr_gl_textureinfo_t * glInfo"@
  -> IO (Ptr (Gr_backendtexture)) -- ^ C return type: @"gr_backendtexture_t *"@

-- | Function pointer to 'gr_backendtexture_new_gl'
foreign import ccall "&gr_backendtexture_new_gl" p'gr_backendtexture_new_gl ::
  FunPtr (CInt -> CInt -> CBool -> Ptr (Gr_gl_textureinfo) -> IO (Ptr (Gr_backendtexture)))

{- | C function signature:

@
gr_backendtexture_t *gr_backendtexture_new_vulkan(int width, int height, const gr_vk_imageinfo_t *vkInfo)
@
-}
foreign import ccall "gr_backendtexture_new_vulkan" gr_backendtexture_new_vulkan ::
  CInt -- ^ C argument @"int width"@
  -> CInt -- ^ C argument @"int height"@
  -> Ptr (Gr_vk_imageinfo) -- ^ C argument @"const gr_vk_imageinfo_t * vkInfo"@
  -> IO (Ptr (Gr_backendtexture)) -- ^ C return type: @"gr_backendtexture_t *"@

-- | Function pointer to 'gr_backendtexture_new_vulkan'
foreign import ccall "&gr_backendtexture_new_vulkan" p'gr_backendtexture_new_vulkan ::
  FunPtr (CInt -> CInt -> Ptr (Gr_vk_imageinfo) -> IO (Ptr (Gr_backendtexture)))

{- | C function signature:

@
gr_backendtexture_t *gr_backendtexture_new_metal(int width, int height, _Bool mipmapped, const gr_mtl_textureinfo_t *mtlInfo)
@
-}
foreign import ccall "gr_backendtexture_new_metal" gr_backendtexture_new_metal ::
  CInt -- ^ C argument @"int width"@
  -> CInt -- ^ C argument @"int height"@
  -> CBool -- ^ C argument @"_Bool mipmapped"@
  -> Ptr (Gr_mtl_textureinfo) -- ^ C argument @"const gr_mtl_textureinfo_t * mtlInfo"@
  -> IO (Ptr (Gr_backendtexture)) -- ^ C return type: @"gr_backendtexture_t *"@

-- | Function pointer to 'gr_backendtexture_new_metal'
foreign import ccall "&gr_backendtexture_new_metal" p'gr_backendtexture_new_metal ::
  FunPtr (CInt -> CInt -> CBool -> Ptr (Gr_mtl_textureinfo) -> IO (Ptr (Gr_backendtexture)))

{- | C function signature:

@
gr_backendtexture_t *gr_backendtexture_new_direct3d(int width, int height, const gr_d3d_textureresourceinfo_t *d3dInfo)
@
-}
foreign import ccall "gr_backendtexture_new_direct3d" gr_backendtexture_new_direct3d ::
  CInt -- ^ C argument @"int width"@
  -> CInt -- ^ C argument @"int height"@
  -> Ptr (Gr_d3d_textureresourceinfo) -- ^ C argument @"const gr_d3d_textureresourceinfo_t * d3dInfo"@
  -> IO (Ptr (Gr_backendtexture)) -- ^ C return type: @"gr_backendtexture_t *"@

-- | Function pointer to 'gr_backendtexture_new_direct3d'
foreign import ccall "&gr_backendtexture_new_direct3d" p'gr_backendtexture_new_direct3d ::
  FunPtr (CInt -> CInt -> Ptr (Gr_d3d_textureresourceinfo) -> IO (Ptr (Gr_backendtexture)))

{- | C function signature:

@
void gr_backendtexture_delete(gr_backendtexture_t *texture)
@
-}
foreign import ccall "gr_backendtexture_delete" gr_backendtexture_delete ::
  Ptr (Gr_backendtexture) -- ^ C argument @"gr_backendtexture_t * texture"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_backendtexture_delete'
foreign import ccall "&gr_backendtexture_delete" p'gr_backendtexture_delete ::
  FunPtr (Ptr (Gr_backendtexture) -> IO (()))

{- | C function signature:

@
_Bool gr_backendtexture_is_valid(const gr_backendtexture_t *texture)
@
-}
foreign import ccall "gr_backendtexture_is_valid" gr_backendtexture_is_valid ::
  Ptr (Gr_backendtexture) -- ^ C argument @"const gr_backendtexture_t * texture"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'gr_backendtexture_is_valid'
foreign import ccall "&gr_backendtexture_is_valid" p'gr_backendtexture_is_valid ::
  FunPtr (Ptr (Gr_backendtexture) -> IO (CBool))

{- | C function signature:

@
int gr_backendtexture_get_width(const gr_backendtexture_t *texture)
@
-}
foreign import ccall "gr_backendtexture_get_width" gr_backendtexture_get_width ::
  Ptr (Gr_backendtexture) -- ^ C argument @"const gr_backendtexture_t * texture"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'gr_backendtexture_get_width'
foreign import ccall "&gr_backendtexture_get_width" p'gr_backendtexture_get_width ::
  FunPtr (Ptr (Gr_backendtexture) -> IO (CInt))

{- | C function signature:

@
int gr_backendtexture_get_height(const gr_backendtexture_t *texture)
@
-}
foreign import ccall "gr_backendtexture_get_height" gr_backendtexture_get_height ::
  Ptr (Gr_backendtexture) -- ^ C argument @"const gr_backendtexture_t * texture"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'gr_backendtexture_get_height'
foreign import ccall "&gr_backendtexture_get_height" p'gr_backendtexture_get_height ::
  FunPtr (Ptr (Gr_backendtexture) -> IO (CInt))

{- | C function signature:

@
_Bool gr_backendtexture_has_mipmaps(const gr_backendtexture_t *texture)
@
-}
foreign import ccall "gr_backendtexture_has_mipmaps" gr_backendtexture_has_mipmaps ::
  Ptr (Gr_backendtexture) -- ^ C argument @"const gr_backendtexture_t * texture"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'gr_backendtexture_has_mipmaps'
foreign import ccall "&gr_backendtexture_has_mipmaps" p'gr_backendtexture_has_mipmaps ::
  FunPtr (Ptr (Gr_backendtexture) -> IO (CBool))

{- | C function signature:

@
gr_backend_t gr_backendtexture_get_backend(const gr_backendtexture_t *texture)
@
-}
foreign import ccall "gr_backendtexture_get_backend" gr_backendtexture_get_backend ::
  Ptr (Gr_backendtexture) -- ^ C argument @"const gr_backendtexture_t * texture"@
  -> IO (Gr_backend) -- ^ C return type: @"gr_backend_t"@

-- | Function pointer to 'gr_backendtexture_get_backend'
foreign import ccall "&gr_backendtexture_get_backend" p'gr_backendtexture_get_backend ::
  FunPtr (Ptr (Gr_backendtexture) -> IO (Gr_backend))

{- | C function signature:

@
_Bool gr_backendtexture_get_gl_textureinfo(const gr_backendtexture_t *texture, gr_gl_textureinfo_t *glInfo)
@
-}
foreign import ccall "gr_backendtexture_get_gl_textureinfo" gr_backendtexture_get_gl_textureinfo ::
  Ptr (Gr_backendtexture) -- ^ C argument @"const gr_backendtexture_t * texture"@
  -> Ptr (Gr_gl_textureinfo) -- ^ C argument @"gr_gl_textureinfo_t * glInfo"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'gr_backendtexture_get_gl_textureinfo'
foreign import ccall "&gr_backendtexture_get_gl_textureinfo" p'gr_backendtexture_get_gl_textureinfo ::
  FunPtr (Ptr (Gr_backendtexture) -> Ptr (Gr_gl_textureinfo) -> IO (CBool))

{- | C function signature:

@
gr_backendrendertarget_t *gr_backendrendertarget_new_gl(int width, int height, int samples, int stencils, const gr_gl_framebufferinfo_t *glInfo)
@
-}
foreign import ccall "gr_backendrendertarget_new_gl" gr_backendrendertarget_new_gl ::
  CInt -- ^ C argument @"int width"@
  -> CInt -- ^ C argument @"int height"@
  -> CInt -- ^ C argument @"int samples"@
  -> CInt -- ^ C argument @"int stencils"@
  -> Ptr (Gr_gl_framebufferinfo) -- ^ C argument @"const gr_gl_framebufferinfo_t * glInfo"@
  -> IO (Ptr (Gr_backendrendertarget)) -- ^ C return type: @"gr_backendrendertarget_t *"@

-- | Function pointer to 'gr_backendrendertarget_new_gl'
foreign import ccall "&gr_backendrendertarget_new_gl" p'gr_backendrendertarget_new_gl ::
  FunPtr (CInt -> CInt -> CInt -> CInt -> Ptr (Gr_gl_framebufferinfo) -> IO (Ptr (Gr_backendrendertarget)))

{- | C function signature:

@
gr_backendrendertarget_t *gr_backendrendertarget_new_vulkan(int width, int height, const gr_vk_imageinfo_t *vkImageInfo)
@
-}
foreign import ccall "gr_backendrendertarget_new_vulkan" gr_backendrendertarget_new_vulkan ::
  CInt -- ^ C argument @"int width"@
  -> CInt -- ^ C argument @"int height"@
  -> Ptr (Gr_vk_imageinfo) -- ^ C argument @"const gr_vk_imageinfo_t * vkImageInfo"@
  -> IO (Ptr (Gr_backendrendertarget)) -- ^ C return type: @"gr_backendrendertarget_t *"@

-- | Function pointer to 'gr_backendrendertarget_new_vulkan'
foreign import ccall "&gr_backendrendertarget_new_vulkan" p'gr_backendrendertarget_new_vulkan ::
  FunPtr (CInt -> CInt -> Ptr (Gr_vk_imageinfo) -> IO (Ptr (Gr_backendrendertarget)))

{- | C function signature:

@
gr_backendrendertarget_t *gr_backendrendertarget_new_metal(int width, int height, const gr_mtl_textureinfo_t *mtlInfo)
@
-}
foreign import ccall "gr_backendrendertarget_new_metal" gr_backendrendertarget_new_metal ::
  CInt -- ^ C argument @"int width"@
  -> CInt -- ^ C argument @"int height"@
  -> Ptr (Gr_mtl_textureinfo) -- ^ C argument @"const gr_mtl_textureinfo_t * mtlInfo"@
  -> IO (Ptr (Gr_backendrendertarget)) -- ^ C return type: @"gr_backendrendertarget_t *"@

-- | Function pointer to 'gr_backendrendertarget_new_metal'
foreign import ccall "&gr_backendrendertarget_new_metal" p'gr_backendrendertarget_new_metal ::
  FunPtr (CInt -> CInt -> Ptr (Gr_mtl_textureinfo) -> IO (Ptr (Gr_backendrendertarget)))

{- | C function signature:

@
gr_backendrendertarget_t *gr_backendrendertarget_new_direct3d(int width, int height, const gr_d3d_textureresourceinfo_t *d3dInfo)
@
-}
foreign import ccall "gr_backendrendertarget_new_direct3d" gr_backendrendertarget_new_direct3d ::
  CInt -- ^ C argument @"int width"@
  -> CInt -- ^ C argument @"int height"@
  -> Ptr (Gr_d3d_textureresourceinfo) -- ^ C argument @"const gr_d3d_textureresourceinfo_t * d3dInfo"@
  -> IO (Ptr (Gr_backendrendertarget)) -- ^ C return type: @"gr_backendrendertarget_t *"@

-- | Function pointer to 'gr_backendrendertarget_new_direct3d'
foreign import ccall "&gr_backendrendertarget_new_direct3d" p'gr_backendrendertarget_new_direct3d ::
  FunPtr (CInt -> CInt -> Ptr (Gr_d3d_textureresourceinfo) -> IO (Ptr (Gr_backendrendertarget)))

{- | C function signature:

@
void gr_backendrendertarget_delete(gr_backendrendertarget_t *rendertarget)
@
-}
foreign import ccall "gr_backendrendertarget_delete" gr_backendrendertarget_delete ::
  Ptr (Gr_backendrendertarget) -- ^ C argument @"gr_backendrendertarget_t * rendertarget"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'gr_backendrendertarget_delete'
foreign import ccall "&gr_backendrendertarget_delete" p'gr_backendrendertarget_delete ::
  FunPtr (Ptr (Gr_backendrendertarget) -> IO (()))

{- | C function signature:

@
_Bool gr_backendrendertarget_is_valid(const gr_backendrendertarget_t *rendertarget)
@
-}
foreign import ccall "gr_backendrendertarget_is_valid" gr_backendrendertarget_is_valid ::
  Ptr (Gr_backendrendertarget) -- ^ C argument @"const gr_backendrendertarget_t * rendertarget"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'gr_backendrendertarget_is_valid'
foreign import ccall "&gr_backendrendertarget_is_valid" p'gr_backendrendertarget_is_valid ::
  FunPtr (Ptr (Gr_backendrendertarget) -> IO (CBool))

{- | C function signature:

@
int gr_backendrendertarget_get_width(const gr_backendrendertarget_t *rendertarget)
@
-}
foreign import ccall "gr_backendrendertarget_get_width" gr_backendrendertarget_get_width ::
  Ptr (Gr_backendrendertarget) -- ^ C argument @"const gr_backendrendertarget_t * rendertarget"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'gr_backendrendertarget_get_width'
foreign import ccall "&gr_backendrendertarget_get_width" p'gr_backendrendertarget_get_width ::
  FunPtr (Ptr (Gr_backendrendertarget) -> IO (CInt))

{- | C function signature:

@
int gr_backendrendertarget_get_height(const gr_backendrendertarget_t *rendertarget)
@
-}
foreign import ccall "gr_backendrendertarget_get_height" gr_backendrendertarget_get_height ::
  Ptr (Gr_backendrendertarget) -- ^ C argument @"const gr_backendrendertarget_t * rendertarget"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'gr_backendrendertarget_get_height'
foreign import ccall "&gr_backendrendertarget_get_height" p'gr_backendrendertarget_get_height ::
  FunPtr (Ptr (Gr_backendrendertarget) -> IO (CInt))

{- | C function signature:

@
int gr_backendrendertarget_get_samples(const gr_backendrendertarget_t *rendertarget)
@
-}
foreign import ccall "gr_backendrendertarget_get_samples" gr_backendrendertarget_get_samples ::
  Ptr (Gr_backendrendertarget) -- ^ C argument @"const gr_backendrendertarget_t * rendertarget"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'gr_backendrendertarget_get_samples'
foreign import ccall "&gr_backendrendertarget_get_samples" p'gr_backendrendertarget_get_samples ::
  FunPtr (Ptr (Gr_backendrendertarget) -> IO (CInt))

{- | C function signature:

@
int gr_backendrendertarget_get_stencils(const gr_backendrendertarget_t *rendertarget)
@
-}
foreign import ccall "gr_backendrendertarget_get_stencils" gr_backendrendertarget_get_stencils ::
  Ptr (Gr_backendrendertarget) -- ^ C argument @"const gr_backendrendertarget_t * rendertarget"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'gr_backendrendertarget_get_stencils'
foreign import ccall "&gr_backendrendertarget_get_stencils" p'gr_backendrendertarget_get_stencils ::
  FunPtr (Ptr (Gr_backendrendertarget) -> IO (CInt))

{- | C function signature:

@
gr_backend_t gr_backendrendertarget_get_backend(const gr_backendrendertarget_t *rendertarget)
@
-}
foreign import ccall "gr_backendrendertarget_get_backend" gr_backendrendertarget_get_backend ::
  Ptr (Gr_backendrendertarget) -- ^ C argument @"const gr_backendrendertarget_t * rendertarget"@
  -> IO (Gr_backend) -- ^ C return type: @"gr_backend_t"@

-- | Function pointer to 'gr_backendrendertarget_get_backend'
foreign import ccall "&gr_backendrendertarget_get_backend" p'gr_backendrendertarget_get_backend ::
  FunPtr (Ptr (Gr_backendrendertarget) -> IO (Gr_backend))

{- | C function signature:

@
_Bool gr_backendrendertarget_get_gl_framebufferinfo(const gr_backendrendertarget_t *rendertarget, gr_gl_framebufferinfo_t *glInfo)
@
-}
foreign import ccall "gr_backendrendertarget_get_gl_framebufferinfo" gr_backendrendertarget_get_gl_framebufferinfo ::
  Ptr (Gr_backendrendertarget) -- ^ C argument @"const gr_backendrendertarget_t * rendertarget"@
  -> Ptr (Gr_gl_framebufferinfo) -- ^ C argument @"gr_gl_framebufferinfo_t * glInfo"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'gr_backendrendertarget_get_gl_framebufferinfo'
foreign import ccall "&gr_backendrendertarget_get_gl_framebufferinfo" p'gr_backendrendertarget_get_gl_framebufferinfo ::
  FunPtr (Ptr (Gr_backendrendertarget) -> Ptr (Gr_gl_framebufferinfo) -> IO (CBool))

{- | C function signature:

@
void sk_drawable_unref(sk_drawable_t *)
@
-}
foreign import ccall "sk_drawable_unref" sk_drawable_unref ::
  Ptr (Sk_drawable) -- ^ C argument type: @"sk_drawable_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_drawable_unref'
foreign import ccall "&sk_drawable_unref" p'sk_drawable_unref ::
  FunPtr (Ptr (Sk_drawable) -> IO (()))

{- | C function signature:

@
uint32_t sk_drawable_get_generation_id(sk_drawable_t *)
@
-}
foreign import ccall "sk_drawable_get_generation_id" sk_drawable_get_generation_id ::
  Ptr (Sk_drawable) -- ^ C argument type: @"sk_drawable_t *"@
  -> IO (Word32) -- ^ C return type: @"uint32_t"@

-- | Function pointer to 'sk_drawable_get_generation_id'
foreign import ccall "&sk_drawable_get_generation_id" p'sk_drawable_get_generation_id ::
  FunPtr (Ptr (Sk_drawable) -> IO (Word32))

{- | C function signature:

@
void sk_drawable_get_bounds(sk_drawable_t *, sk_rect_t *)
@
-}
foreign import ccall "sk_drawable_get_bounds" sk_drawable_get_bounds ::
  Ptr (Sk_drawable) -- ^ C argument type: @"sk_drawable_t *"@
  -> Ptr (Sk_rect) -- ^ C argument type: @"sk_rect_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_drawable_get_bounds'
foreign import ccall "&sk_drawable_get_bounds" p'sk_drawable_get_bounds ::
  FunPtr (Ptr (Sk_drawable) -> Ptr (Sk_rect) -> IO (()))

{- | C function signature:

@
void sk_drawable_draw(sk_drawable_t *, sk_canvas_t *, const sk_matrix_t *)
@
-}
foreign import ccall "sk_drawable_draw" sk_drawable_draw ::
  Ptr (Sk_drawable) -- ^ C argument type: @"sk_drawable_t *"@
  -> Ptr (Sk_canvas) -- ^ C argument type: @"sk_canvas_t *"@
  -> Ptr (Sk_matrix) -- ^ C argument type: @"const sk_matrix_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_drawable_draw'
foreign import ccall "&sk_drawable_draw" p'sk_drawable_draw ::
  FunPtr (Ptr (Sk_drawable) -> Ptr (Sk_canvas) -> Ptr (Sk_matrix) -> IO (()))

{- | C function signature:

@
sk_picture_t *sk_drawable_new_picture_snapshot(sk_drawable_t *)
@
-}
foreign import ccall "sk_drawable_new_picture_snapshot" sk_drawable_new_picture_snapshot ::
  Ptr (Sk_drawable) -- ^ C argument type: @"sk_drawable_t *"@
  -> IO (Ptr (Sk_picture)) -- ^ C return type: @"sk_picture_t *"@

-- | Function pointer to 'sk_drawable_new_picture_snapshot'
foreign import ccall "&sk_drawable_new_picture_snapshot" p'sk_drawable_new_picture_snapshot ::
  FunPtr (Ptr (Sk_drawable) -> IO (Ptr (Sk_picture)))

{- | C function signature:

@
void sk_drawable_notify_drawing_changed(sk_drawable_t *)
@
-}
foreign import ccall "sk_drawable_notify_drawing_changed" sk_drawable_notify_drawing_changed ::
  Ptr (Sk_drawable) -- ^ C argument type: @"sk_drawable_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_drawable_notify_drawing_changed'
foreign import ccall "&sk_drawable_notify_drawing_changed" p'sk_drawable_notify_drawing_changed ::
  FunPtr (Ptr (Sk_drawable) -> IO (()))

{- | C function signature:

@
size_t sk_drawable_approximate_bytes_used(sk_drawable_t *)
@
-}
foreign import ccall "sk_drawable_approximate_bytes_used" sk_drawable_approximate_bytes_used ::
  Ptr (Sk_drawable) -- ^ C argument type: @"sk_drawable_t *"@
  -> IO (CSize) -- ^ C return type: @"size_t"@

-- | Function pointer to 'sk_drawable_approximate_bytes_used'
foreign import ccall "&sk_drawable_approximate_bytes_used" p'sk_drawable_approximate_bytes_used ::
  FunPtr (Ptr (Sk_drawable) -> IO (CSize))

{- | Opaque C struct: @"sk_manageddrawable_t"@
-}
data Sk_manageddrawable = Sk_manageddrawable

-- | C function pointer type: @typedef void (*sk_manageddrawable_draw_proc)(sk_manageddrawable_t *d, void *context, sk_canvas_t *ccanvas)@
type Sk_manageddrawable_draw_proc = Ptr (Sk_manageddrawable) -> Ptr (()) -> Ptr (Sk_canvas) -> IO (())

-- | Creates a 'FunPtr' of @"sk_manageddrawable_draw_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_manageddrawable_draw_proc :: Sk_manageddrawable_draw_proc -> IO (FunPtr Sk_manageddrawable_draw_proc)

-- | C function pointer type: @typedef void (*sk_manageddrawable_getBounds_proc)(sk_manageddrawable_t *d, void *context, sk_rect_t *rect)@
type Sk_manageddrawable_getBounds_proc = Ptr (Sk_manageddrawable) -> Ptr (()) -> Ptr (Sk_rect) -> IO (())

-- | Creates a 'FunPtr' of @"sk_manageddrawable_getBounds_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_manageddrawable_getBounds_proc :: Sk_manageddrawable_getBounds_proc -> IO (FunPtr Sk_manageddrawable_getBounds_proc)

-- | C function pointer type: @typedef size_t (*sk_manageddrawable_approximateBytesUsed_proc)(sk_manageddrawable_t *d, void *context)@
type Sk_manageddrawable_approximateBytesUsed_proc = Ptr (Sk_manageddrawable) -> Ptr (()) -> IO (CSize)

-- | Creates a 'FunPtr' of @"sk_manageddrawable_approximateBytesUsed_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_manageddrawable_approximateBytesUsed_proc :: Sk_manageddrawable_approximateBytesUsed_proc -> IO (FunPtr Sk_manageddrawable_approximateBytesUsed_proc)

-- | C function pointer type: @typedef sk_picture_t *(*sk_manageddrawable_makePictureSnapshot_proc)(sk_manageddrawable_t *d, void *context)@
type Sk_manageddrawable_makePictureSnapshot_proc = Ptr (Sk_manageddrawable) -> Ptr (()) -> IO (Ptr (Sk_picture))

-- | Creates a 'FunPtr' of @"sk_manageddrawable_makePictureSnapshot_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_manageddrawable_makePictureSnapshot_proc :: Sk_manageddrawable_makePictureSnapshot_proc -> IO (FunPtr Sk_manageddrawable_makePictureSnapshot_proc)

-- | C function pointer type: @typedef void (*sk_manageddrawable_destroy_proc)(sk_manageddrawable_t *d, void *context)@
type Sk_manageddrawable_destroy_proc = Ptr (Sk_manageddrawable) -> Ptr (()) -> IO (())

-- | Creates a 'FunPtr' of @"sk_manageddrawable_destroy_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_manageddrawable_destroy_proc :: Sk_manageddrawable_destroy_proc -> IO (FunPtr Sk_manageddrawable_destroy_proc)

{- | C struct: @"sk_manageddrawable_procs_t"@

@
typedef struct 
{
  sk_manageddrawable_draw_proc fDraw;
  sk_manageddrawable_getBounds_proc fGetBounds;
  sk_manageddrawable_approximateBytesUsed_proc fApproximateBytesUsed;
  sk_manageddrawable_makePictureSnapshot_proc fMakePictureSnapshot;
  sk_manageddrawable_destroy_proc fDestroy;
} sk_manageddrawable_procs_t
@
-}
data Sk_manageddrawable_procs = Sk_manageddrawable_procs
  { fDraw :: FunPtr Sk_manageddrawable_draw_proc -- ^ C field: @"sk_manageddrawable_draw_proc fDraw"@
  , fGetBounds :: FunPtr Sk_manageddrawable_getBounds_proc -- ^ C field: @"sk_manageddrawable_getBounds_proc fGetBounds"@
  , fApproximateBytesUsed :: FunPtr Sk_manageddrawable_approximateBytesUsed_proc -- ^ C field: @"sk_manageddrawable_approximateBytesUsed_proc fApproximateBytesUsed"@
  , fMakePictureSnapshot :: FunPtr Sk_manageddrawable_makePictureSnapshot_proc -- ^ C field: @"sk_manageddrawable_makePictureSnapshot_proc fMakePictureSnapshot"@
  , fDestroy :: FunPtr Sk_manageddrawable_destroy_proc -- ^ C field: @"sk_manageddrawable_destroy_proc fDestroy"@
  }
instance Foreign.Storable.Offset.Offset "fDraw" Sk_manageddrawable_procs where
  rawOffset = (#offset sk_manageddrawable_procs_t, fDraw)
instance Foreign.Storable.Offset.Offset "fGetBounds" Sk_manageddrawable_procs where
  rawOffset = (#offset sk_manageddrawable_procs_t, fGetBounds)
instance Foreign.Storable.Offset.Offset "fApproximateBytesUsed" Sk_manageddrawable_procs where
  rawOffset = (#offset sk_manageddrawable_procs_t, fApproximateBytesUsed)
instance Foreign.Storable.Offset.Offset "fMakePictureSnapshot" Sk_manageddrawable_procs where
  rawOffset = (#offset sk_manageddrawable_procs_t, fMakePictureSnapshot)
instance Foreign.Storable.Offset.Offset "fDestroy" Sk_manageddrawable_procs where
  rawOffset = (#offset sk_manageddrawable_procs_t, fDestroy)
instance Foreign.Storable.Storable Sk_manageddrawable_procs where
  sizeOf _ = (#size sk_manageddrawable_procs_t)
  alignment _ = (#alignment sk_manageddrawable_procs_t)
  peek p' = do
    fDraw <- (#peek sk_manageddrawable_procs_t, fDraw) p'
    fGetBounds <- (#peek sk_manageddrawable_procs_t, fGetBounds) p'
    fApproximateBytesUsed <- (#peek sk_manageddrawable_procs_t, fApproximateBytesUsed) p'
    fMakePictureSnapshot <- (#peek sk_manageddrawable_procs_t, fMakePictureSnapshot) p'
    fDestroy <- (#peek sk_manageddrawable_procs_t, fDestroy) p'
    pure Sk_manageddrawable_procs{..}
  poke p' Sk_manageddrawable_procs{..} = do
    (#poke sk_manageddrawable_procs_t, fDraw) p' fDraw
    (#poke sk_manageddrawable_procs_t, fGetBounds) p' fGetBounds
    (#poke sk_manageddrawable_procs_t, fApproximateBytesUsed) p' fApproximateBytesUsed
    (#poke sk_manageddrawable_procs_t, fMakePictureSnapshot) p' fMakePictureSnapshot
    (#poke sk_manageddrawable_procs_t, fDestroy) p' fDestroy

{- | C function signature:

@
sk_manageddrawable_t *sk_manageddrawable_new(void *context)
@
-}
foreign import ccall "sk_manageddrawable_new" sk_manageddrawable_new ::
  Ptr (()) -- ^ C argument @"void * context"@
  -> IO (Ptr (Sk_manageddrawable)) -- ^ C return type: @"sk_manageddrawable_t *"@

-- | Function pointer to 'sk_manageddrawable_new'
foreign import ccall "&sk_manageddrawable_new" p'sk_manageddrawable_new ::
  FunPtr (Ptr (()) -> IO (Ptr (Sk_manageddrawable)))

{- | C function signature:

@
void sk_manageddrawable_unref(sk_manageddrawable_t *)
@
-}
foreign import ccall "sk_manageddrawable_unref" sk_manageddrawable_unref ::
  Ptr (Sk_manageddrawable) -- ^ C argument type: @"sk_manageddrawable_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_manageddrawable_unref'
foreign import ccall "&sk_manageddrawable_unref" p'sk_manageddrawable_unref ::
  FunPtr (Ptr (Sk_manageddrawable) -> IO (()))

{- | Opaque C struct: @"sk_managedtracememorydump_t"@
-}
data Sk_managedtracememorydump = Sk_managedtracememorydump

-- | C function pointer type: @typedef void (*sk_managedtraceMemoryDump_dumpNumericValue_proc)(sk_managedtracememorydump_t *d, void *context, const char *dumpName, const char *valueName, const char *units, uint64_t value)@
type Sk_managedtraceMemoryDump_dumpNumericValue_proc = Ptr (Sk_managedtracememorydump) -> Ptr (()) -> Ptr (CChar) -> Ptr (CChar) -> Ptr (CChar) -> Word64 -> IO (())

-- | Creates a 'FunPtr' of @"sk_managedtraceMemoryDump_dumpNumericValue_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedtraceMemoryDump_dumpNumericValue_proc :: Sk_managedtraceMemoryDump_dumpNumericValue_proc -> IO (FunPtr Sk_managedtraceMemoryDump_dumpNumericValue_proc)

-- | C function pointer type: @typedef void (*sk_managedtraceMemoryDump_dumpStringValue_proc)(sk_managedtracememorydump_t *d, void *context, const char *dumpName, const char *valueName, const char *value)@
type Sk_managedtraceMemoryDump_dumpStringValue_proc = Ptr (Sk_managedtracememorydump) -> Ptr (()) -> Ptr (CChar) -> Ptr (CChar) -> Ptr (CChar) -> IO (())

-- | Creates a 'FunPtr' of @"sk_managedtraceMemoryDump_dumpStringValue_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedtraceMemoryDump_dumpStringValue_proc :: Sk_managedtraceMemoryDump_dumpStringValue_proc -> IO (FunPtr Sk_managedtraceMemoryDump_dumpStringValue_proc)

{- | C struct: @"sk_managedtracememorydump_procs_t"@

@
typedef struct 
{
  sk_managedtraceMemoryDump_dumpNumericValue_proc fDumpNumericValue;
  sk_managedtraceMemoryDump_dumpStringValue_proc fDumpStringValue;
} sk_managedtracememorydump_procs_t
@
-}
data Sk_managedtracememorydump_procs = Sk_managedtracememorydump_procs
  { fDumpNumericValue :: FunPtr Sk_managedtraceMemoryDump_dumpNumericValue_proc -- ^ C field: @"sk_managedtraceMemoryDump_dumpNumericValue_proc fDumpNumericValue"@
  , fDumpStringValue :: FunPtr Sk_managedtraceMemoryDump_dumpStringValue_proc -- ^ C field: @"sk_managedtraceMemoryDump_dumpStringValue_proc fDumpStringValue"@
  }
instance Foreign.Storable.Offset.Offset "fDumpNumericValue" Sk_managedtracememorydump_procs where
  rawOffset = (#offset sk_managedtracememorydump_procs_t, fDumpNumericValue)
instance Foreign.Storable.Offset.Offset "fDumpStringValue" Sk_managedtracememorydump_procs where
  rawOffset = (#offset sk_managedtracememorydump_procs_t, fDumpStringValue)
instance Foreign.Storable.Storable Sk_managedtracememorydump_procs where
  sizeOf _ = (#size sk_managedtracememorydump_procs_t)
  alignment _ = (#alignment sk_managedtracememorydump_procs_t)
  peek p' = do
    fDumpNumericValue <- (#peek sk_managedtracememorydump_procs_t, fDumpNumericValue) p'
    fDumpStringValue <- (#peek sk_managedtracememorydump_procs_t, fDumpStringValue) p'
    pure Sk_managedtracememorydump_procs{..}
  poke p' Sk_managedtracememorydump_procs{..} = do
    (#poke sk_managedtracememorydump_procs_t, fDumpNumericValue) p' fDumpNumericValue
    (#poke sk_managedtracememorydump_procs_t, fDumpStringValue) p' fDumpStringValue

{- | C function signature:

@
sk_managedtracememorydump_t *sk_managedtracememorydump_new(_Bool detailed, _Bool dumpWrapped, void *context)
@
-}
foreign import ccall "sk_managedtracememorydump_new" sk_managedtracememorydump_new ::
  CBool -- ^ C argument @"_Bool detailed"@
  -> CBool -- ^ C argument @"_Bool dumpWrapped"@
  -> Ptr (()) -- ^ C argument @"void * context"@
  -> IO (Ptr (Sk_managedtracememorydump)) -- ^ C return type: @"sk_managedtracememorydump_t *"@

-- | Function pointer to 'sk_managedtracememorydump_new'
foreign import ccall "&sk_managedtracememorydump_new" p'sk_managedtracememorydump_new ::
  FunPtr (CBool -> CBool -> Ptr (()) -> IO (Ptr (Sk_managedtracememorydump)))

{- | C function signature:

@
void sk_managedtracememorydump_delete(sk_managedtracememorydump_t *)
@
-}
foreign import ccall "sk_managedtracememorydump_delete" sk_managedtracememorydump_delete ::
  Ptr (Sk_managedtracememorydump) -- ^ C argument type: @"sk_managedtracememorydump_t *"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_managedtracememorydump_delete'
foreign import ccall "&sk_managedtracememorydump_delete" p'sk_managedtracememorydump_delete ::
  FunPtr (Ptr (Sk_managedtracememorydump) -> IO (()))

{- | Opaque C struct: @"sk_wstream_managedstream_t"@
-}
data Sk_wstream_managedstream = Sk_wstream_managedstream

-- | C function pointer type: @typedef _Bool (*sk_managedwstream_write_proc)(sk_wstream_managedstream_t *s, void *context, const void *buffer, size_t size)@
type Sk_managedwstream_write_proc = Ptr (Sk_wstream_managedstream) -> Ptr (()) -> Ptr (()) -> CSize -> IO (CBool)

-- | Creates a 'FunPtr' of @"sk_managedwstream_write_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedwstream_write_proc :: Sk_managedwstream_write_proc -> IO (FunPtr Sk_managedwstream_write_proc)

-- | C function pointer type: @typedef void (*sk_managedwstream_flush_proc)(sk_wstream_managedstream_t *s, void *context)@
type Sk_managedwstream_flush_proc = Ptr (Sk_wstream_managedstream) -> Ptr (()) -> IO (())

-- | Creates a 'FunPtr' of @"sk_managedwstream_flush_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedwstream_flush_proc :: Sk_managedwstream_flush_proc -> IO (FunPtr Sk_managedwstream_flush_proc)

-- | C function pointer type: @typedef size_t (*sk_managedwstream_bytesWritten_proc)(const sk_wstream_managedstream_t *s, void *context)@
type Sk_managedwstream_bytesWritten_proc = Ptr (Sk_wstream_managedstream) -> Ptr (()) -> IO (CSize)

-- | Creates a 'FunPtr' of @"sk_managedwstream_bytesWritten_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedwstream_bytesWritten_proc :: Sk_managedwstream_bytesWritten_proc -> IO (FunPtr Sk_managedwstream_bytesWritten_proc)

-- | C function pointer type: @typedef void (*sk_managedwstream_destroy_proc)(sk_wstream_managedstream_t *s, void *context)@
type Sk_managedwstream_destroy_proc = Ptr (Sk_wstream_managedstream) -> Ptr (()) -> IO (())

-- | Creates a 'FunPtr' of @"sk_managedwstream_destroy_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedwstream_destroy_proc :: Sk_managedwstream_destroy_proc -> IO (FunPtr Sk_managedwstream_destroy_proc)

{- | C struct: @"sk_managedwstream_procs_t"@

@
typedef struct 
{
  sk_managedwstream_write_proc fWrite;
  sk_managedwstream_flush_proc fFlush;
  sk_managedwstream_bytesWritten_proc fBytesWritten;
  sk_managedwstream_destroy_proc fDestroy;
} sk_managedwstream_procs_t
@
-}
data Sk_managedwstream_procs = Sk_managedwstream_procs
  { fWrite :: FunPtr Sk_managedwstream_write_proc -- ^ C field: @"sk_managedwstream_write_proc fWrite"@
  , fFlush :: FunPtr Sk_managedwstream_flush_proc -- ^ C field: @"sk_managedwstream_flush_proc fFlush"@
  , fBytesWritten :: FunPtr Sk_managedwstream_bytesWritten_proc -- ^ C field: @"sk_managedwstream_bytesWritten_proc fBytesWritten"@
  , fDestroy :: FunPtr Sk_managedwstream_destroy_proc -- ^ C field: @"sk_managedwstream_destroy_proc fDestroy"@
  }
instance Foreign.Storable.Offset.Offset "fWrite" Sk_managedwstream_procs where
  rawOffset = (#offset sk_managedwstream_procs_t, fWrite)
instance Foreign.Storable.Offset.Offset "fFlush" Sk_managedwstream_procs where
  rawOffset = (#offset sk_managedwstream_procs_t, fFlush)
instance Foreign.Storable.Offset.Offset "fBytesWritten" Sk_managedwstream_procs where
  rawOffset = (#offset sk_managedwstream_procs_t, fBytesWritten)
instance Foreign.Storable.Offset.Offset "fDestroy" Sk_managedwstream_procs where
  rawOffset = (#offset sk_managedwstream_procs_t, fDestroy)
instance Foreign.Storable.Storable Sk_managedwstream_procs where
  sizeOf _ = (#size sk_managedwstream_procs_t)
  alignment _ = (#alignment sk_managedwstream_procs_t)
  peek p' = do
    fWrite <- (#peek sk_managedwstream_procs_t, fWrite) p'
    fFlush <- (#peek sk_managedwstream_procs_t, fFlush) p'
    fBytesWritten <- (#peek sk_managedwstream_procs_t, fBytesWritten) p'
    fDestroy <- (#peek sk_managedwstream_procs_t, fDestroy) p'
    pure Sk_managedwstream_procs{..}
  poke p' Sk_managedwstream_procs{..} = do
    (#poke sk_managedwstream_procs_t, fWrite) p' fWrite
    (#poke sk_managedwstream_procs_t, fFlush) p' fFlush
    (#poke sk_managedwstream_procs_t, fBytesWritten) p' fBytesWritten
    (#poke sk_managedwstream_procs_t, fDestroy) p' fDestroy

{- | C function signature:

@
sk_wstream_managedstream_t *sk_managedwstream_new(void *context)
@
-}
foreign import ccall "sk_managedwstream_new" sk_managedwstream_new ::
  Ptr (()) -- ^ C argument @"void * context"@
  -> IO (Ptr (Sk_wstream_managedstream)) -- ^ C return type: @"sk_wstream_managedstream_t *"@

-- | Function pointer to 'sk_managedwstream_new'
foreign import ccall "&sk_managedwstream_new" p'sk_managedwstream_new ::
  FunPtr (Ptr (()) -> IO (Ptr (Sk_wstream_managedstream)))

{- | C function signature:

@
void sk_managedwstream_destroy(sk_wstream_managedstream_t *s)
@
-}
foreign import ccall "sk_managedwstream_destroy" sk_managedwstream_destroy ::
  Ptr (Sk_wstream_managedstream) -- ^ C argument @"sk_wstream_managedstream_t * s"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_managedwstream_destroy'
foreign import ccall "&sk_managedwstream_destroy" p'sk_managedwstream_destroy ::
  FunPtr (Ptr (Sk_wstream_managedstream) -> IO (()))

{- | Opaque C struct: @"sk_stream_managedstream_t"@
-}
data Sk_stream_managedstream = Sk_stream_managedstream

-- | C function pointer type: @typedef size_t (*sk_managedstream_read_proc)(sk_stream_managedstream_t *s, void *context, void *buffer, size_t size)@
type Sk_managedstream_read_proc = Ptr (Sk_stream_managedstream) -> Ptr (()) -> Ptr (()) -> CSize -> IO (CSize)

-- | Creates a 'FunPtr' of @"sk_managedstream_read_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedstream_read_proc :: Sk_managedstream_read_proc -> IO (FunPtr Sk_managedstream_read_proc)

-- | C function pointer type: @typedef size_t (*sk_managedstream_peek_proc)(const sk_stream_managedstream_t *s, void *context, void *buffer, size_t size)@
type Sk_managedstream_peek_proc = Ptr (Sk_stream_managedstream) -> Ptr (()) -> Ptr (()) -> CSize -> IO (CSize)

-- | Creates a 'FunPtr' of @"sk_managedstream_peek_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedstream_peek_proc :: Sk_managedstream_peek_proc -> IO (FunPtr Sk_managedstream_peek_proc)

-- | C function pointer type: @typedef _Bool (*sk_managedstream_isAtEnd_proc)(const sk_stream_managedstream_t *s, void *context)@
type Sk_managedstream_isAtEnd_proc = Ptr (Sk_stream_managedstream) -> Ptr (()) -> IO (CBool)

-- | Creates a 'FunPtr' of @"sk_managedstream_isAtEnd_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedstream_isAtEnd_proc :: Sk_managedstream_isAtEnd_proc -> IO (FunPtr Sk_managedstream_isAtEnd_proc)

-- | C function pointer type: @typedef _Bool (*sk_managedstream_hasPosition_proc)(const sk_stream_managedstream_t *s, void *context)@
type Sk_managedstream_hasPosition_proc = Ptr (Sk_stream_managedstream) -> Ptr (()) -> IO (CBool)

-- | Creates a 'FunPtr' of @"sk_managedstream_hasPosition_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedstream_hasPosition_proc :: Sk_managedstream_hasPosition_proc -> IO (FunPtr Sk_managedstream_hasPosition_proc)

-- | C function pointer type: @typedef _Bool (*sk_managedstream_hasLength_proc)(const sk_stream_managedstream_t *s, void *context)@
type Sk_managedstream_hasLength_proc = Ptr (Sk_stream_managedstream) -> Ptr (()) -> IO (CBool)

-- | Creates a 'FunPtr' of @"sk_managedstream_hasLength_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedstream_hasLength_proc :: Sk_managedstream_hasLength_proc -> IO (FunPtr Sk_managedstream_hasLength_proc)

-- | C function pointer type: @typedef _Bool (*sk_managedstream_rewind_proc)(sk_stream_managedstream_t *s, void *context)@
type Sk_managedstream_rewind_proc = Ptr (Sk_stream_managedstream) -> Ptr (()) -> IO (CBool)

-- | Creates a 'FunPtr' of @"sk_managedstream_rewind_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedstream_rewind_proc :: Sk_managedstream_rewind_proc -> IO (FunPtr Sk_managedstream_rewind_proc)

-- | C function pointer type: @typedef size_t (*sk_managedstream_getPosition_proc)(const sk_stream_managedstream_t *s, void *context)@
type Sk_managedstream_getPosition_proc = Ptr (Sk_stream_managedstream) -> Ptr (()) -> IO (CSize)

-- | Creates a 'FunPtr' of @"sk_managedstream_getPosition_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedstream_getPosition_proc :: Sk_managedstream_getPosition_proc -> IO (FunPtr Sk_managedstream_getPosition_proc)

-- | C function pointer type: @typedef _Bool (*sk_managedstream_seek_proc)(sk_stream_managedstream_t *s, void *context, size_t position)@
type Sk_managedstream_seek_proc = Ptr (Sk_stream_managedstream) -> Ptr (()) -> CSize -> IO (CBool)

-- | Creates a 'FunPtr' of @"sk_managedstream_seek_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedstream_seek_proc :: Sk_managedstream_seek_proc -> IO (FunPtr Sk_managedstream_seek_proc)

-- | C function pointer type: @typedef _Bool (*sk_managedstream_move_proc)(sk_stream_managedstream_t *s, void *context, long offset)@
type Sk_managedstream_move_proc = Ptr (Sk_stream_managedstream) -> Ptr (()) -> CLong -> IO (CBool)

-- | Creates a 'FunPtr' of @"sk_managedstream_move_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedstream_move_proc :: Sk_managedstream_move_proc -> IO (FunPtr Sk_managedstream_move_proc)

-- | C function pointer type: @typedef size_t (*sk_managedstream_getLength_proc)(const sk_stream_managedstream_t *s, void *context)@
type Sk_managedstream_getLength_proc = Ptr (Sk_stream_managedstream) -> Ptr (()) -> IO (CSize)

-- | Creates a 'FunPtr' of @"sk_managedstream_getLength_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedstream_getLength_proc :: Sk_managedstream_getLength_proc -> IO (FunPtr Sk_managedstream_getLength_proc)

-- | C function pointer type: @typedef sk_stream_managedstream_t *(*sk_managedstream_duplicate_proc)(const sk_stream_managedstream_t *s, void *context)@
type Sk_managedstream_duplicate_proc = Ptr (Sk_stream_managedstream) -> Ptr (()) -> IO (Ptr (Sk_stream_managedstream))

-- | Creates a 'FunPtr' of @"sk_managedstream_duplicate_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedstream_duplicate_proc :: Sk_managedstream_duplicate_proc -> IO (FunPtr Sk_managedstream_duplicate_proc)

-- | C function pointer type: @typedef sk_stream_managedstream_t *(*sk_managedstream_fork_proc)(const sk_stream_managedstream_t *s, void *context)@
type Sk_managedstream_fork_proc = Ptr (Sk_stream_managedstream) -> Ptr (()) -> IO (Ptr (Sk_stream_managedstream))

-- | Creates a 'FunPtr' of @"sk_managedstream_fork_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedstream_fork_proc :: Sk_managedstream_fork_proc -> IO (FunPtr Sk_managedstream_fork_proc)

-- | C function pointer type: @typedef void (*sk_managedstream_destroy_proc)(sk_stream_managedstream_t *s, void *context)@
type Sk_managedstream_destroy_proc = Ptr (Sk_stream_managedstream) -> Ptr (()) -> IO (())

-- | Creates a 'FunPtr' of @"sk_managedstream_destroy_proc"@.
foreign import ccall "wrapper" mkFunPtr'Sk_managedstream_destroy_proc :: Sk_managedstream_destroy_proc -> IO (FunPtr Sk_managedstream_destroy_proc)

{- | C struct: @"sk_managedstream_procs_t"@

@
typedef struct 
{
  sk_managedstream_read_proc fRead;
  sk_managedstream_peek_proc fPeek;
  sk_managedstream_isAtEnd_proc fIsAtEnd;
  sk_managedstream_hasPosition_proc fHasPosition;
  sk_managedstream_hasLength_proc fHasLength;
  sk_managedstream_rewind_proc fRewind;
  sk_managedstream_getPosition_proc fGetPosition;
  sk_managedstream_seek_proc fSeek;
  sk_managedstream_move_proc fMove;
  sk_managedstream_getLength_proc fGetLength;
  sk_managedstream_duplicate_proc fDuplicate;
  sk_managedstream_fork_proc fFork;
  sk_managedstream_destroy_proc fDestroy;
} sk_managedstream_procs_t
@
-}
data Sk_managedstream_procs = Sk_managedstream_procs
  { fRead :: FunPtr Sk_managedstream_read_proc -- ^ C field: @"sk_managedstream_read_proc fRead"@
  , fPeek :: FunPtr Sk_managedstream_peek_proc -- ^ C field: @"sk_managedstream_peek_proc fPeek"@
  , fIsAtEnd :: FunPtr Sk_managedstream_isAtEnd_proc -- ^ C field: @"sk_managedstream_isAtEnd_proc fIsAtEnd"@
  , fHasPosition :: FunPtr Sk_managedstream_hasPosition_proc -- ^ C field: @"sk_managedstream_hasPosition_proc fHasPosition"@
  , fHasLength :: FunPtr Sk_managedstream_hasLength_proc -- ^ C field: @"sk_managedstream_hasLength_proc fHasLength"@
  , fRewind :: FunPtr Sk_managedstream_rewind_proc -- ^ C field: @"sk_managedstream_rewind_proc fRewind"@
  , fGetPosition :: FunPtr Sk_managedstream_getPosition_proc -- ^ C field: @"sk_managedstream_getPosition_proc fGetPosition"@
  , fSeek :: FunPtr Sk_managedstream_seek_proc -- ^ C field: @"sk_managedstream_seek_proc fSeek"@
  , fMove :: FunPtr Sk_managedstream_move_proc -- ^ C field: @"sk_managedstream_move_proc fMove"@
  , fGetLength :: FunPtr Sk_managedstream_getLength_proc -- ^ C field: @"sk_managedstream_getLength_proc fGetLength"@
  , fDuplicate :: FunPtr Sk_managedstream_duplicate_proc -- ^ C field: @"sk_managedstream_duplicate_proc fDuplicate"@
  , fFork :: FunPtr Sk_managedstream_fork_proc -- ^ C field: @"sk_managedstream_fork_proc fFork"@
  , fDestroy :: FunPtr Sk_managedstream_destroy_proc -- ^ C field: @"sk_managedstream_destroy_proc fDestroy"@
  }
instance Foreign.Storable.Offset.Offset "fRead" Sk_managedstream_procs where
  rawOffset = (#offset sk_managedstream_procs_t, fRead)
instance Foreign.Storable.Offset.Offset "fPeek" Sk_managedstream_procs where
  rawOffset = (#offset sk_managedstream_procs_t, fPeek)
instance Foreign.Storable.Offset.Offset "fIsAtEnd" Sk_managedstream_procs where
  rawOffset = (#offset sk_managedstream_procs_t, fIsAtEnd)
instance Foreign.Storable.Offset.Offset "fHasPosition" Sk_managedstream_procs where
  rawOffset = (#offset sk_managedstream_procs_t, fHasPosition)
instance Foreign.Storable.Offset.Offset "fHasLength" Sk_managedstream_procs where
  rawOffset = (#offset sk_managedstream_procs_t, fHasLength)
instance Foreign.Storable.Offset.Offset "fRewind" Sk_managedstream_procs where
  rawOffset = (#offset sk_managedstream_procs_t, fRewind)
instance Foreign.Storable.Offset.Offset "fGetPosition" Sk_managedstream_procs where
  rawOffset = (#offset sk_managedstream_procs_t, fGetPosition)
instance Foreign.Storable.Offset.Offset "fSeek" Sk_managedstream_procs where
  rawOffset = (#offset sk_managedstream_procs_t, fSeek)
instance Foreign.Storable.Offset.Offset "fMove" Sk_managedstream_procs where
  rawOffset = (#offset sk_managedstream_procs_t, fMove)
instance Foreign.Storable.Offset.Offset "fGetLength" Sk_managedstream_procs where
  rawOffset = (#offset sk_managedstream_procs_t, fGetLength)
instance Foreign.Storable.Offset.Offset "fDuplicate" Sk_managedstream_procs where
  rawOffset = (#offset sk_managedstream_procs_t, fDuplicate)
instance Foreign.Storable.Offset.Offset "fFork" Sk_managedstream_procs where
  rawOffset = (#offset sk_managedstream_procs_t, fFork)
instance Foreign.Storable.Offset.Offset "fDestroy" Sk_managedstream_procs where
  rawOffset = (#offset sk_managedstream_procs_t, fDestroy)
instance Foreign.Storable.Storable Sk_managedstream_procs where
  sizeOf _ = (#size sk_managedstream_procs_t)
  alignment _ = (#alignment sk_managedstream_procs_t)
  peek p' = do
    fRead <- (#peek sk_managedstream_procs_t, fRead) p'
    fPeek <- (#peek sk_managedstream_procs_t, fPeek) p'
    fIsAtEnd <- (#peek sk_managedstream_procs_t, fIsAtEnd) p'
    fHasPosition <- (#peek sk_managedstream_procs_t, fHasPosition) p'
    fHasLength <- (#peek sk_managedstream_procs_t, fHasLength) p'
    fRewind <- (#peek sk_managedstream_procs_t, fRewind) p'
    fGetPosition <- (#peek sk_managedstream_procs_t, fGetPosition) p'
    fSeek <- (#peek sk_managedstream_procs_t, fSeek) p'
    fMove <- (#peek sk_managedstream_procs_t, fMove) p'
    fGetLength <- (#peek sk_managedstream_procs_t, fGetLength) p'
    fDuplicate <- (#peek sk_managedstream_procs_t, fDuplicate) p'
    fFork <- (#peek sk_managedstream_procs_t, fFork) p'
    fDestroy <- (#peek sk_managedstream_procs_t, fDestroy) p'
    pure Sk_managedstream_procs{..}
  poke p' Sk_managedstream_procs{..} = do
    (#poke sk_managedstream_procs_t, fRead) p' fRead
    (#poke sk_managedstream_procs_t, fPeek) p' fPeek
    (#poke sk_managedstream_procs_t, fIsAtEnd) p' fIsAtEnd
    (#poke sk_managedstream_procs_t, fHasPosition) p' fHasPosition
    (#poke sk_managedstream_procs_t, fHasLength) p' fHasLength
    (#poke sk_managedstream_procs_t, fRewind) p' fRewind
    (#poke sk_managedstream_procs_t, fGetPosition) p' fGetPosition
    (#poke sk_managedstream_procs_t, fSeek) p' fSeek
    (#poke sk_managedstream_procs_t, fMove) p' fMove
    (#poke sk_managedstream_procs_t, fGetLength) p' fGetLength
    (#poke sk_managedstream_procs_t, fDuplicate) p' fDuplicate
    (#poke sk_managedstream_procs_t, fFork) p' fFork
    (#poke sk_managedstream_procs_t, fDestroy) p' fDestroy

{- | C function signature:

@
sk_stream_managedstream_t *sk_managedstream_new(void *context)
@
-}
foreign import ccall "sk_managedstream_new" sk_managedstream_new ::
  Ptr (()) -- ^ C argument @"void * context"@
  -> IO (Ptr (Sk_stream_managedstream)) -- ^ C return type: @"sk_stream_managedstream_t *"@

-- | Function pointer to 'sk_managedstream_new'
foreign import ccall "&sk_managedstream_new" p'sk_managedstream_new ::
  FunPtr (Ptr (()) -> IO (Ptr (Sk_stream_managedstream)))

{- | C function signature:

@
void sk_managedstream_destroy(sk_stream_managedstream_t *s)
@
-}
foreign import ccall "sk_managedstream_destroy" sk_managedstream_destroy ::
  Ptr (Sk_stream_managedstream) -- ^ C argument @"sk_stream_managedstream_t * s"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_managedstream_destroy'
foreign import ccall "&sk_managedstream_destroy" p'sk_managedstream_destroy ::
  FunPtr (Ptr (Sk_stream_managedstream) -> IO (()))

{- | Opaque C struct: @"sk_compatpaint_t"@
-}
data Sk_compatpaint = Sk_compatpaint

{- | C function signature:

@
sk_compatpaint_t *sk_compatpaint_new(void)
@
-}
foreign import ccall "sk_compatpaint_new" sk_compatpaint_new ::
  IO (Ptr (Sk_compatpaint)) -- ^ C return type: @"sk_compatpaint_t *"@

-- | Function pointer to 'sk_compatpaint_new'
foreign import ccall "&sk_compatpaint_new" p'sk_compatpaint_new ::
  FunPtr (IO (Ptr (Sk_compatpaint)))

{- | C function signature:

@
sk_compatpaint_t *sk_compatpaint_new_with_font(const sk_font_t *font)
@
-}
foreign import ccall "sk_compatpaint_new_with_font" sk_compatpaint_new_with_font ::
  Ptr (Sk_font) -- ^ C argument @"const sk_font_t * font"@
  -> IO (Ptr (Sk_compatpaint)) -- ^ C return type: @"sk_compatpaint_t *"@

-- | Function pointer to 'sk_compatpaint_new_with_font'
foreign import ccall "&sk_compatpaint_new_with_font" p'sk_compatpaint_new_with_font ::
  FunPtr (Ptr (Sk_font) -> IO (Ptr (Sk_compatpaint)))

{- | C function signature:

@
void sk_compatpaint_delete(sk_compatpaint_t *paint)
@
-}
foreign import ccall "sk_compatpaint_delete" sk_compatpaint_delete ::
  Ptr (Sk_compatpaint) -- ^ C argument @"sk_compatpaint_t * paint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_compatpaint_delete'
foreign import ccall "&sk_compatpaint_delete" p'sk_compatpaint_delete ::
  FunPtr (Ptr (Sk_compatpaint) -> IO (()))

{- | C function signature:

@
sk_compatpaint_t *sk_compatpaint_clone(const sk_compatpaint_t *paint)
@
-}
foreign import ccall "sk_compatpaint_clone" sk_compatpaint_clone ::
  Ptr (Sk_compatpaint) -- ^ C argument @"const sk_compatpaint_t * paint"@
  -> IO (Ptr (Sk_compatpaint)) -- ^ C return type: @"sk_compatpaint_t *"@

-- | Function pointer to 'sk_compatpaint_clone'
foreign import ccall "&sk_compatpaint_clone" p'sk_compatpaint_clone ::
  FunPtr (Ptr (Sk_compatpaint) -> IO (Ptr (Sk_compatpaint)))

{- | C function signature:

@
void sk_compatpaint_reset(sk_compatpaint_t *paint)
@
-}
foreign import ccall "sk_compatpaint_reset" sk_compatpaint_reset ::
  Ptr (Sk_compatpaint) -- ^ C argument @"sk_compatpaint_t * paint"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_compatpaint_reset'
foreign import ccall "&sk_compatpaint_reset" p'sk_compatpaint_reset ::
  FunPtr (Ptr (Sk_compatpaint) -> IO (()))

{- | C function signature:

@
sk_font_t *sk_compatpaint_make_font(sk_compatpaint_t *paint)
@
-}
foreign import ccall "sk_compatpaint_make_font" sk_compatpaint_make_font ::
  Ptr (Sk_compatpaint) -- ^ C argument @"sk_compatpaint_t * paint"@
  -> IO (Ptr (Sk_font)) -- ^ C return type: @"sk_font_t *"@

-- | Function pointer to 'sk_compatpaint_make_font'
foreign import ccall "&sk_compatpaint_make_font" p'sk_compatpaint_make_font ::
  FunPtr (Ptr (Sk_compatpaint) -> IO (Ptr (Sk_font)))

{- | C function signature:

@
sk_font_t *sk_compatpaint_get_font(sk_compatpaint_t *paint)
@
-}
foreign import ccall "sk_compatpaint_get_font" sk_compatpaint_get_font ::
  Ptr (Sk_compatpaint) -- ^ C argument @"sk_compatpaint_t * paint"@
  -> IO (Ptr (Sk_font)) -- ^ C return type: @"sk_font_t *"@

-- | Function pointer to 'sk_compatpaint_get_font'
foreign import ccall "&sk_compatpaint_get_font" p'sk_compatpaint_get_font ::
  FunPtr (Ptr (Sk_compatpaint) -> IO (Ptr (Sk_font)))

{- | C function signature:

@
void sk_compatpaint_set_text_align(sk_compatpaint_t *paint, sk_text_align_t align)
@
-}
foreign import ccall "sk_compatpaint_set_text_align" sk_compatpaint_set_text_align ::
  Ptr (Sk_compatpaint) -- ^ C argument @"sk_compatpaint_t * paint"@
  -> Sk_text_align -- ^ C argument @"sk_text_align_t align"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_compatpaint_set_text_align'
foreign import ccall "&sk_compatpaint_set_text_align" p'sk_compatpaint_set_text_align ::
  FunPtr (Ptr (Sk_compatpaint) -> Sk_text_align -> IO (()))

{- | C function signature:

@
sk_text_align_t sk_compatpaint_get_text_align(const sk_compatpaint_t *paint)
@
-}
foreign import ccall "sk_compatpaint_get_text_align" sk_compatpaint_get_text_align ::
  Ptr (Sk_compatpaint) -- ^ C argument @"const sk_compatpaint_t * paint"@
  -> IO (Sk_text_align) -- ^ C return type: @"sk_text_align_t"@

-- | Function pointer to 'sk_compatpaint_get_text_align'
foreign import ccall "&sk_compatpaint_get_text_align" p'sk_compatpaint_get_text_align ::
  FunPtr (Ptr (Sk_compatpaint) -> IO (Sk_text_align))

{- | C function signature:

@
void sk_compatpaint_set_text_encoding(sk_compatpaint_t *paint, sk_text_encoding_t encoding)
@
-}
foreign import ccall "sk_compatpaint_set_text_encoding" sk_compatpaint_set_text_encoding ::
  Ptr (Sk_compatpaint) -- ^ C argument @"sk_compatpaint_t * paint"@
  -> Sk_text_encoding -- ^ C argument @"sk_text_encoding_t encoding"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_compatpaint_set_text_encoding'
foreign import ccall "&sk_compatpaint_set_text_encoding" p'sk_compatpaint_set_text_encoding ::
  FunPtr (Ptr (Sk_compatpaint) -> Sk_text_encoding -> IO (()))

{- | C function signature:

@
sk_text_encoding_t sk_compatpaint_get_text_encoding(const sk_compatpaint_t *paint)
@
-}
foreign import ccall "sk_compatpaint_get_text_encoding" sk_compatpaint_get_text_encoding ::
  Ptr (Sk_compatpaint) -- ^ C argument @"const sk_compatpaint_t * paint"@
  -> IO (Sk_text_encoding) -- ^ C return type: @"sk_text_encoding_t"@

-- | Function pointer to 'sk_compatpaint_get_text_encoding'
foreign import ccall "&sk_compatpaint_get_text_encoding" p'sk_compatpaint_get_text_encoding ::
  FunPtr (Ptr (Sk_compatpaint) -> IO (Sk_text_encoding))

{- | C function signature:

@
void sk_compatpaint_set_filter_quality(sk_compatpaint_t *paint, int quality)
@
-}
foreign import ccall "sk_compatpaint_set_filter_quality" sk_compatpaint_set_filter_quality ::
  Ptr (Sk_compatpaint) -- ^ C argument @"sk_compatpaint_t * paint"@
  -> CInt -- ^ C argument @"int quality"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_compatpaint_set_filter_quality'
foreign import ccall "&sk_compatpaint_set_filter_quality" p'sk_compatpaint_set_filter_quality ::
  FunPtr (Ptr (Sk_compatpaint) -> CInt -> IO (()))

{- | C function signature:

@
int sk_compatpaint_get_filter_quality(const sk_compatpaint_t *paint)
@
-}
foreign import ccall "sk_compatpaint_get_filter_quality" sk_compatpaint_get_filter_quality ::
  Ptr (Sk_compatpaint) -- ^ C argument @"const sk_compatpaint_t * paint"@
  -> IO (CInt) -- ^ C return type: @"int"@

-- | Function pointer to 'sk_compatpaint_get_filter_quality'
foreign import ccall "&sk_compatpaint_get_filter_quality" p'sk_compatpaint_get_filter_quality ::
  FunPtr (Ptr (Sk_compatpaint) -> IO (CInt))

{- | C function signature:

@
void sk_compatpaint_set_lcd_render_text(sk_compatpaint_t *paint, _Bool lcdRenderText)
@
-}
foreign import ccall "sk_compatpaint_set_lcd_render_text" sk_compatpaint_set_lcd_render_text ::
  Ptr (Sk_compatpaint) -- ^ C argument @"sk_compatpaint_t * paint"@
  -> CBool -- ^ C argument @"_Bool lcdRenderText"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_compatpaint_set_lcd_render_text'
foreign import ccall "&sk_compatpaint_set_lcd_render_text" p'sk_compatpaint_set_lcd_render_text ::
  FunPtr (Ptr (Sk_compatpaint) -> CBool -> IO (()))

{- | C function signature:

@
_Bool sk_compatpaint_get_lcd_render_text(const sk_compatpaint_t *paint)
@
-}
foreign import ccall "sk_compatpaint_get_lcd_render_text" sk_compatpaint_get_lcd_render_text ::
  Ptr (Sk_compatpaint) -- ^ C argument @"const sk_compatpaint_t * paint"@
  -> IO (CBool) -- ^ C return type: @"_Bool"@

-- | Function pointer to 'sk_compatpaint_get_lcd_render_text'
foreign import ccall "&sk_compatpaint_get_lcd_render_text" p'sk_compatpaint_get_lcd_render_text ::
  FunPtr (Ptr (Sk_compatpaint) -> IO (CBool))

{- | C function signature:

@
void sk_compatpaint_set_is_antialias(sk_compatpaint_t *paint, _Bool antialias)
@
-}
foreign import ccall "sk_compatpaint_set_is_antialias" sk_compatpaint_set_is_antialias ::
  Ptr (Sk_compatpaint) -- ^ C argument @"sk_compatpaint_t * paint"@
  -> CBool -- ^ C argument @"_Bool antialias"@
  -> IO (()) -- ^ C return type: @"void"@

-- | Function pointer to 'sk_compatpaint_set_is_antialias'
foreign import ccall "&sk_compatpaint_set_is_antialias" p'sk_compatpaint_set_is_antialias ::
  FunPtr (Ptr (Sk_compatpaint) -> CBool -> IO (()))
