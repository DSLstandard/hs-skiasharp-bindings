name: skia
author: DSLstandard
maintainer: qgeneral35@gmail.com
version: 0.0.1
license-file: LICENSE
synopsis: Bindings to Google's Skia library through the C API of https://github.com/mono/skia

default-extensions:
  - AllowAmbiguousTypes
  - Arrows
  - BinaryLiterals
  - BlockArguments
  - ConstraintKinds
  - DataKinds
  - DefaultSignatures
  - DeriveAnyClass
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveTraversable
  - DerivingStrategies
  - DerivingVia
  - DuplicateRecordFields
  - EmptyCase
  - ExplicitForAll
  - FlexibleContexts
  - FlexibleInstances
  - FunctionalDependencies
  - GADTs
  - GeneralizedNewtypeDeriving
  - ImportQualifiedPost
  - LambdaCase
  - LiberalTypeSynonyms
  - MultiParamTypeClasses
  - MultiWayIf
  - NamedFieldPuns
  - OverloadedLabels
  - OverloadedRecordDot
  - OverloadedStrings
  - PartialTypeSignatures
  - PatternSynonyms
  - QuasiQuotes
  - RankNTypes
  - RecordWildCards
  - RecursiveDo
  - ScopedTypeVariables
  - StandaloneDeriving
  - TemplateHaskell
  - TupleSections
  - TypeApplications
  - TypeFamilies
  - TypeOperators
  - UndecidableInstances
  - ViewPatterns
ghc-options: -Wall -Wno-name-shadowing -Wno-orphans

# DEVELOPER NOTE: Link to a tutorial on using cabal flags to enable/disable
# assertions: https://guide.aelve.com/haskell/cpp-vww0qd72.html#item-oh9ytz0p
flags:
  enable-skia-assertions:
    description: >
      Enable Haskell IO assertions on the outputs of certain functions in the
      C++ Skia library. To elaborate, some Skia functions guarantee specific
      postconditions, and this Haskell binding library typically assumes that
      these postconditions are never violated and exploits this assumption to
      perform fast operations, which can fail spectacularly if the
      postconditions are in fact untrue. Enabling this flag adds simple
      assertion tests for the postconditions and raises a @SkiaAssertionError@
      if any violations are detected. These assertion tests should have very
      little runtime cost, thus it is recommended to leave this flag on.
    default: true
    manual: true
  enable-check-nullptr:
    description: >
      Enable Haskell IO assertions in 'Skia.Types.Core.toObjectFin' (and its
      variants) to ensure that no nullptr is passed. To elaborate, this Haskell
      library may have incorrectly used some of the Skia object factory
      functions and assumed they never return nullptrs. Enabling this flag can
      help catch these errors. Note that enabling this flag incurs very little
      runtime cost, as it only involves a nullptr check.
    default: true
    manual: true
  enable-debug-trace-finalizers:
    description: >
      Enable the ability to set up IO action debug hooks to trace all SKObject
      'ForeignPtr' finalizations. If you are encountering segmentation faults
      randomly, it is likely due to a bug in this Haskell library (e.g., not
      keeping an object's lifetime long enough and allowing the Haskell
      runtime's garbage collector to prematurely finalize objects), or it may be
      due to a use-after-free error in your program. Enabling this flag allows
      you to print out all SKObject finalizations and helps you to debug. Note
      that enabling this flag incurs a very little runtime cost.
    default: false
    manual: true

library:
  source-dirs: src/
  build-tools: hsc2hs
  dependencies:
    - base
    - bytestring
    - haskell-src-exts
    - haskell-src-meta
    - inline-c
    - linear
    - mtl
    - neat-interpolation
    - storable-offset
    - template-haskell
    - text
    - time
    - transformers
    - vector
    - bcp47
  pkg-config-dependencies:
    - skia
  extra-libraries:
    - SkiaSharp
  cxx-sources:
    - cbits/everything.cpp
  include-dirs:
    - cbits/
  when:
    - condition: flag(enable-skia-assertions)
      cpp-options: -DHS_SKIA_SKIA_ASSERTIONS_ENABLED
    - condition: flag(enable-check-nullptr)
      cpp-options: -DHS_SKIA_CHECK_NULLPTR_ENABLED
    - condition: flag(enable-debug-trace-finalizers)
      cpp-options: -DHS_SKIA_DEBUG_TRACE_FINALIZERS_ENABLED

tests:
  skia-test:
    source-dirs: test/
    main: Spec.hs
    dependencies:
      - base
      - skia
      - tasty
      - tasty-hunit
      - tasty-quickcheck
      - linear
      - vector

executables:
  demo-raster-example-with-bindings:
    source-dirs: demos/
    main: DemoRasterExampleBindingsOnly.hs
    other-modules: []
    dependencies: [base, skia]

  demo-glfw-opengl:
    source-dirs: demos/
    main: DemoGLFWOpenGL.hs
    other-modules: []
    dependencies: [base, GLFW-b, OpenGLRaw, skia]

  demo-skottie-animation-viewer:
    source-dirs: demos/
    main: DemoSkottieAnimationViewer.hs
    other-modules: [SharedUtils.MakeDemoApp]
    dependencies:
      [base, GLFW-b, OpenGLRaw, skia, time, optparse-applicative, linear, text]

  demo-draw-text:
    source-dirs: demos/
    main: DemoDrawText.hs
    other-modules: [SharedUtils.MakeDemoApp]
    dependencies: [base, GLFW-b, OpenGLRaw, skia, time, linear, text]
